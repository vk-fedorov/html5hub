var bannershown =false;
var StringManager = (function () {
    function a() {
        this.container = new createjs.Container();
        this.strings = new Object()
    }
    a.getInstance = function () {
        return a.g_instance
    };
    a.prototype.getString = function (b) {
        return this.strings[b]
    };
    a.prototype.loadStrings = function () {};
    a.prototype.setLanguage = function (b) {
        this.strings = g_strings[b]
    };
    a.g_instance = new a();
    a.STRING_TUTORIAL_1 = "STRING_TUTORIAL_1";
    a.STRING_TUTORIAL_2 = "STRING_TUTORIAL_2";
    a.STRING_TUTORIAL_3 = "STRING_TUTORIAL_3";
    return a
})();
var SoundManager = (function () {
    function a() {
        this.soundEnabled = true;
        this.initiliazed = false;
        this.musicInstance = null;
        this.focus = true;
        this.wasMusicPlay = false
    }
    a.prototype.onLostFocus = function () {
        if (this.focus) {
            this.focus = false;
            if (this.soundEnabled) {
                if (this.musicInstance) {
                    this.musicInstance.stop()
                }
                this.wasMusicPlay = false
            }
        }
    };
    a.prototype.onFocus = function () {
        if (!this.focus) {
            this.focus = true;
            this.playMusic()
        }
    };
    a.prototype.init = function () {
        if (!this.initiliazed) {
            if (!createjs.Sound.initializeDefaultPlugins()) {
                return
            }
            this.initiliazed = true
        }
    };
    a.prototype.isSoundEnabled = function () {
        return this.soundEnabled
    };
    a.prototype.setSoundEnabled = function (b) {
        this.soundEnabled = b;
        if (!b) {
            if (this.musicInstance) {
                this.musicInstance.stop()
            }
            this.wasMusicPlay = false
        } else {
            this.playMusic()
        }
    };
    a.prototype.play = function (b) {
        if (this.initiliazed && this.soundEnabled) {
            return createjs.Sound.play(b, createjs.Sound.INTERRUPT_NONE, 0, 0, 0, 1)
        }
        return null
    };
    a.prototype.playMusic = function () {
        if (this.initiliazed && this.soundEnabled) {
            if (!this.wasMusicPlay) {
                this.wasMusicPlay = true;
                this.musicInstance = createjs.Sound.play(a.SOUND_MUSIC, createjs.Sound.INTERRUPT_NONE, 0, 0, -1, 1);
                if (this.musicInstance.playState == "playFailed") {
                    this.wasMusicPlay = false;
                    return null
                }
                return this.musicInstance
            }
        }
        return null
    };
    a.g_instance = new a();
    a.SOUND_MUSIC = "music";
    a.SOUND_ADD_TIME = "clock";
    a.SOUND_CLICK = "click";
    a.SOUND_MATCH_1 = "chew_1";
    a.SOUND_MATCH_2 = "chew_2";
    a.SOUND_MATCH_3 = "chew_3";
    a.SOUND_DROP_1 = "drop_1";
    a.SOUND_DROP_2 = "drop_2";
    a.SOUND_DROP_3 = "drop_3";
    a.SOUND_LINE = "line";
    a.SOUND_KILL_COLOR = "kill_color";
    a.SOUND_ALARM = "alarm";
    a.SOUND_POISON = "poison";
    a.SOUND_EXCHANGE = "exchange";
    a.SOUND_WIN = "win";
    return a
})();
var StateManager = (function () {
    function a(b) {
        var d = this;
        this.statesConstainer = new createjs.Container();
        this.isMouseDown = false;
        this.timeDevider = 1;
        this.lastTime = 0;
        a.g_instance = this;
        this.states = Array();
        this.canvas = document.getElementById("canvas");
        this.stage = new createjs.Stage(this.canvas);
        this.stage.autoClear = true;
        createjs.Touch.enable(this.stage);
        this.stage.enableMouseOver(5);
        createjs.Ticker.setFPS(60);
        createjs.Ticker.addEventListener("tick", function (f) {
            return d.update(f)
        });
        if (Constants.DEBUG_MODE) {
            document.onkeydown = function (f) {
                return d.onKeyDown(f)
            };
            document.onkeyup = function (f) {
                return d.onKeyUp(f)
            }
        }
        var c = new AssetsManager(b);
        this.stage.addChild(c);
        c.addEventListener(Constants.LOAD_COMPLETE, function (f) {
            return d.allAssetsLoaded(f)
        });
        c.startDownLoad();
        this.stage.addChild(this.statesConstainer);
        Constants.PIXEL_RATIO = (window.devicePixelRatio ? window.devicePixelRatio : 1);
        if (Constants.g_isPC) {
            window.onresize = (function (f) {
                return d.onResize(f)
            });
            this.onResize(null)
        } else {
            if (viewporter.ACTIVE) {
                window.addEventListener("viewportready", function () {
                    return d.onOrientationChanged()
                });
                window.addEventListener("viewportchange", function () {
                    return d.onOrientationChanged()
                })
            } else {
                window.addEventListener("orientationchange", function () {
                    return d.onOrientationChanged()
                });
                this.onOrientationChanged()
            }
        }
    }
    a.prototype.isLandscape = function () {
        return viewporter.isLandscape()
    };
    a.prototype.onOrientationChanged = function () {
        var c = this.isLandscape();
        var b = window.innerWidth;
        var d = window.innerHeight;
        this.canvas.width = b * Constants.PIXEL_RATIO;
        this.canvas.height = d * Constants.PIXEL_RATIO;
        this.canvas.style.width = b + "px";
        this.canvas.style.height = d + "px";
        if (c) {
            Constants.SCREEN_SCALE = d / Constants.ASSETS_HEIGHT * Constants.PIXEL_RATIO;
            Constants.SCREEN_HEIGHT = d
        } else {
            Constants.SCREEN_SCALE = b / Constants.ASSETS_WIDTH * Constants.PIXEL_RATIO;
            Constants.SCREEN_HEIGHT = d / Constants.SCREEN_SCALE * Constants.PIXEL_RATIO
        }
        this.statesConstainer.scaleX = this.statesConstainer.scaleY = Constants.SCREEN_SCALE;
        if (this.states.length != 0) {
            this.states[this.states.length - 1].onOrientationChanged(c)
        }
        if (AssetsManager.g_instance.parent) {
            AssetsManager.g_instance.onOrientationChanged(c)
        }
    };
    a.prototype.allAssetsLoaded = function (b) {
        var f = this;
        b.target.removeEventListener(Constants.LOAD_COMPLETE, this.allAssetsLoaded);
        this.stage.addEventListener(Constants.MOUSE_MOVE, (function (g) {
            return f.handleMouse(g)
        }));
        this.stage.addEventListener(Constants.MOUSE_DOWN, (function (g) {
            return f.handleMouse(g)
        }));
        this.stage.addEventListener(Constants.MOUSE_UP, (function (g) {
            return f.handleMouse(g)
        }));
        if (window.onpagehide) {
            window.onpagehide = (function (g) {
                return f.onLostFocus(g)
            })
        }
        if (window.onblur) {
            window.onblur = (function (g) {
                return f.onLostFocus(g)
            })
        }
        if (window.onpageshow) {
            window.onpageshow = (function (g) {
                return f.onFocus(g)
            })
        }
        if (window.onfocus) {
            window.onfocus = (function (g) {
                return f.onFocus(g)
            })
        }
        if (AssetsManager.g_instance.parent) {
            AssetsManager.g_instance.parent.removeChild(AssetsManager.g_instance)
        }
        this.pushState(new MainMenuState());
        if (this.isLandscape()) {
            this.pushState(new PortraitLockState())
        }
        try {
            SG_Hooks.start();
            var d = SG_Hooks.getLanguage(g_allLanguages);
            console.log("here", d);
            StringManager.getInstance().setLanguage(d);
            SG_Hooks.setOrientationHandler(function () {
                a.g_instance.onOrientationChanged()
            });
            SG_Hooks.setResizeHandler(function () {
                a.g_instance.onResize(null)
            })
        } catch (c) {
            console.log("SG_Hooks error")
        }
    };
    a.prototype.update = function (d) {
        if (this.states.length != 0) {
            var b = this.states[this.states.length - 1];
            if (!b.isInitiliazed()) {
                b.init()
            }
            var c = createjs.Ticker.getTime();
            var e = (c - this.lastTime);
            this.lastTime = c;
            b.update(e * 0.001 / this.timeDevider)
        }
        this.stage.update(d)
    };
    a.prototype.changeState = function (b) {
        while (this.states.length != 0) {
            this.popState()
        }
        this.pushState(b)
    };
    a.prototype.pushState = function (b) {
        this.states.push(b);
        this.statesConstainer.addChild(b)
    };
    a.prototype.popState = function () {
        if (this.states.length != 0) {
            this.states[this.states.length - 1].cleanup();
            this.statesConstainer.removeChild(this.states[this.states.length - 1]);
            this.states.pop();
            if (this.states.length != 0) {
                this.states[this.states.length - 1].resume()
            }
        }
    };
    a.prototype.onResize = function (b) {
        Constants.SCREEN_SCALE = window.innerHeight / Constants.ASSETS_HEIGHT * Constants.PIXEL_RATIO;
        Constants.SCREEN_HEIGHT = window.innerHeight / Constants.SCREEN_SCALE * Constants.PIXEL_RATIO;
        this.canvas.width = Constants.ASSETS_WIDTH * Constants.SCREEN_SCALE;
        this.canvas.height = Constants.ASSETS_HEIGHT * Constants.SCREEN_SCALE;
        this.canvas.style.width = this.canvas.width + "px";
        this.canvas.style.height = this.canvas.height + "px";
        this.canvas.style.marginLeft = (window.innerWidth - this.canvas.width) / 2 + "px";
        this.statesConstainer.scaleX = this.statesConstainer.scaleY = Constants.SCREEN_SCALE
    };
    a.prototype.onLostFocus = function (b) {
        SoundManager.g_instance.onLostFocus()
    };
    a.prototype.onFocus = function (b) {
        SoundManager.g_instance.onFocus()
    };
    a.prototype.handleMouse = function (c) {
        if (this.states.length == 0) {
            return
        }
        c.preventDefault();
        var b = this.states[this.states.length - 1];
        var d = 0;
        switch (c.type) {
        case Constants.MOUSE_DOWN:
            SoundManager.g_instance.init();
            SoundManager.g_instance.playMusic();
            this.isMouseDown = true;
            b.onMouseDown(c.stageX / Constants.SCREEN_SCALE, c.stageY / Constants.SCREEN_SCALE + d);
            break;
        case Constants.MOUSE_UP:
            this.isMouseDown = false;
            b.onMouseUp(c.stageX / Constants.SCREEN_SCALE, c.stageY / Constants.SCREEN_SCALE + d);
            break;
        case Constants.MOUSE_MOVE:
            if (this.isMouseDown) {
                b.onMouseMove(c.stageX / Constants.SCREEN_SCALE, c.stageY / Constants.SCREEN_SCALE + d)
            }
            break
        }
    };
    a.prototype.onKeyDown = function (b) {
        switch (b.keyCode) {
        case 65:
            this.timeDevider = 5;
            break;
        case 68:
            this.timeDevider = 10;
            break
        }
        this.stage.update()
    };
    a.prototype.onKeyUp = function (b) {
        switch (b.keyCode) {
        case 65:
            this.timeDevider = 1;
            break;
        case 68:
            this.timeDevider = 1;
            break
        }
    };
    return a
})();
var __extends = this.__extends || function (f, a) {
        for (var e in a) {
            if (a.hasOwnProperty(e)) {
                f[e] = a[e]
            }
        }

        function c() {
            this.constructor = f
        }
        c.prototype = a.prototype;
        f.prototype = new c()
    };
var GameState = (function (b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.liveTime = 0;
        this.gameObjects = new Array();
        this.gui = new Array();
        this.newGameObjects = new Array();
        this.initiliazed = false;
        this.consoleH = 200
    }
    a.prototype.consolePrint = function (d) {
        var c = new createjs.Text(d, "bold 35px Arial", "#000000");
        this.addChild(c);
        c.x = 50;
        c.y = this.consoleH;
        this.consoleH += 40
    };
    a.prototype.isInitiliazed = function () {
        return this.initiliazed
    };
    a.prototype.onMouseDown = function (c, e) {
        for (var d = 0; d < this.gui.length; d++) {
            this.gui[d].onMouseDown(c, e)
        }
    };
    a.prototype.onMouseMove = function (c, e) {
        for (var d = 0; d < this.gui.length; d++) {
            this.gui[d].onMouseMove(c, e)
        }
    };
    a.prototype.onMouseUp = function (c, e) {
        for (var d = 0; d < this.gui.length; d++) {
            this.gui[d].onMouseUp(c, e)
        }
    };
    a.prototype.addGuiObject = function (c) {
        this.gui.push(c);
        this.addGameObject(c)
    };
    a.prototype.update = function (d) {
        this.liveTime += d;
        this.newGameObjects = new Array();
        for (var c = 0; c < this.gameObjects.length; c++) {
            var e = this.gameObjects[c];
            e.update(d);
            if (e.isDead()) {
                e.onDead()
            } else {
                this.newGameObjects.push(e)
            }
        }
        this.gameObjects = this.newGameObjects
    };
    a.prototype.addGameObject = function (c) {
        this.gameObjects.push(c)
    };
    a.prototype.addGameObjectAt = function (d, c) {
        this.gameObjects.push(d);
        if (c) {
            c.addChild(d)
        }
    };
    a.prototype.addGameObjectAtPos = function (e, d, c, f) {
        this.gameObjects.push(e);
        if (d) {
            d.addChild(e);
            e.x = c;
            e.y = f
        }
    };
    a.prototype.cleanup = function () {};
    a.prototype.resume = function () {};
    a.prototype.init = function () {
        this.initiliazed = true
    };
    a.prototype.onOrientationChanged = function (c) {
        if (c) {
            StateManager.g_instance.pushState(new PortraitLockState())
        }
    };
    return a
})(createjs.Container);
var Constants = (function () {
    function a() {}
    a.LOAD_COMPLETE = "LOAD_COMPLETE";
    a.MOUSE_DOWN = "stagemousedown";
    a.MOUSE_UP = "stagemouseup";
    a.MOUSE_MOVE = "stagemousemove";
    a.CELL_SIZE = 95;
    a.FIELD_OFFSET_X = 17;
    a.FIELD_OFFSET_Y = 272;
    a.EXCHANGE_TIME = 0.22;
    a.MATCH_TIME = 0.25;
    a.GRAVITY_ACC = 2500;
    a.ASSETS_WIDTH = 700;
    a.ASSETS_HEIGHT = 900;
    a.PIXEL_RATIO = 1;
    a.SCREEN_HEIGHT = 900;
    a.SCREEN_SCALE = 1;
    a.DPI = -1;
    a.g_isPC = true;
    a.DEBUG_MODE = false;
    a.IMAGE_BUTTON_CLOSE = "button_close";
    a.IMAGE_BUTTON_SOUND_ON = "button_sound_on";
    a.IMAGE_BUTTON_SOUND_OFF = "button_sound_off";
    a.IMAGE_BUTTON_PLAY = "button_play";
    a.IMAGE_BUTTON_EXIT = "button_exit";
    a.IMAGE_BUTTON_RESTART = "button_restart";
    a.IMAGE_BUTTON_CREDITS = "button_credits";
    a.IMAGE_AWESOME = "awesome";
    a.IMAGE_SUPERB = "superb";
    a.IMAGE_ROUND_COMPLETED = "round_completed";
    a.IMAGE_TIME_IS_UP = "time_is_up";
    a.IMAGE_DROP = "drop";
    a.IMAGE_BACK = "back";
    a.IMAGE_DONUT = "donut";
    a.IMAGE_LOLIPOP = "lolipop";
    a.IMAGE_CLOCK = "clock_cake";
    a.IMAGE_MESSAGE_WINDOW = "message_window";
    a.IMAGE_HINT_ARROW = "hint_arrow";
    a.IMAGE_BUTTON_PAUSE = "button_pause";
    a.IMAGE_GAMEOVER_CAPTION = "gameover_caption";
    a.IMAGE_TITLE_MAIN_MENU_BACK = "main_menu_back";
    a.IMAGE_PROGRESS_BAR = "progress_bar";
    a.IMAGE_SICKLE = "sickle";
    a.IMAGE_ROTATE = "rotate";
    a.IMAGE_GUI_CLOCK = "gui_clock";
    a.IMAGE_CAPTION_ROUND = "caption_round";
    a.IMAGE_GUI_SCORE = "gui_score";
    a.IMAGE_PROGRESS_BAR_DOWN = "progress_bar_down";
    a.IMAGE_BUTTON_MORE_GAMES = "button_more_games";
    return a
})();
var AssetsManager = (function (b) {
    __extends(a, b);

    function a(c) {
        b.call(this);
        this.loadingShape = new createjs.Shape();
        this.loadingShapeBack1 = new createjs.Shape();
        this.loadingShapeBack2 = new createjs.Shape();
        this.shader = null;
        this.maxWidth = 100;
        this.deltaY = 50;
        this.gameplaySprites = null;
        this.mainMenuSprites = null;
        a.g_instance = this;
        this.maxWidth = 300;
        document.getElementById("loader").className = "loader";
        createjs.EventDispatcher.initialize(a.prototype);
        this.manifest = c;
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#4aa4c2");
        this.shader.graphics.drawRect(0, 0, this.maxWidth * 1.2, 130);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.labelPercentDownload = new createjs.Text("100%", "bold 45px Arial", "#ffffff");
        this.labelPercentDownload.textAlign = "center";
        this.addChild(this.labelPercentDownload);
        this.deltaY = this.labelPercentDownload.getBounds().height;
        this.loadingShapeBack1.graphics.beginFill("#4a7dc2");
        this.loadingShapeBack1.graphics.drawRect(0 - 4, 0 - 4, this.maxWidth + 8, this.deltaY + 8);
        this.loadingShapeBack1.graphics.endFill();
        this.addChild(this.loadingShapeBack1);
        this.loadingShape.graphics.beginFill("#ffffff");
        this.loadingShape.graphics.drawRect(0, 0, this.maxWidth, this.deltaY);
        this.loadingShape.graphics.endFill();
        this.addChild(this.loadingShape);
        this.loadingShape.scaleX = 0;
        this.onOrientationChanged(StateManager.g_instance.isLandscape())
    }
    a.prototype.startDownLoad = function () {
        var c = this;
        this.loader = new createjs.LoadQueue();
        this.loader.addEventListener("progress", function (d) {
            return c.handleProgress(d)
        });
        this.loader.addEventListener("complete", function (d) {
            return c.handleComplete(d)
        });
        createjs.Sound.registerManifest(this.manifest, "assets/sound/");
        this.loader.installPlugin(createjs.SoundJS);
        this.loader.loadManifest(this.manifest)
    };
    a.prototype.handleProgress = function (c) {
        this.labelPercentDownload.text = (c.loaded * 100).toFixed(1) + "%";
        this.loadingShape.scaleX = c.loaded
    };
    a.prototype.handleComplete = function (c) {
        this.removeChild(this.labelPercentDownload);
        this.dispatchEvent(Constants.LOAD_COMPLETE, this);
        document.getElementById("loader").className = ""
    };
    a.prototype.getResult = function (c) {
        return this.loader.getResult(c)
    };
    a.prototype.getBitmap = function (c) {
        return new createjs.Bitmap(this.loader.getResult(c))
    };
    a.prototype.getCenteredBitmap = function (c) {
        var d = new createjs.Bitmap(this.loader.getResult(c));
        if (!d.image) {
            console.log("ERROR HERE", c)
        }
        d.x = -d.image.width / 2;
        d.y = -d.image.height / 2;
        return d
    };
    a.prototype.getImage = function (c) {
        var e = this.getBitmap(c);
        if (e.getBounds()) {
            return e
        }
        var d = this.getSprite(c);
        if (d.getBounds()) {
            return d
        }
        return null
    };
    a.prototype.getCenteredImage = function (c) {
        var d = this.getImage(c);
        d.x = -d.getBounds().width / 2;
        d.y = -d.getBounds().height / 2;
        return d
    };
    a.prototype.getCenteredImageWithProxy = function (c) {
        var d = new createjs.Container();
        d.addChild(this.getCenteredImage(c));
        return d
    };
    a.prototype.getCenteredBitmapWithProxy = function (c) {
        var d = new createjs.Container();
        d.addChild(this.getCenteredBitmap(c));
        return d
    };
    a.prototype.getSprite = function (c) {
        var d = new createjs.Sprite(this.gameplaySprites, c);
        d.stop();
        return d
    };
    a.prototype.getCenteredSprite = function (c) {
        var d = this.getSprite(c);
        d.x = -d.getBounds().width / 2;
        d.y = -d.getBounds().height / 2;
        return d
    };
    a.prototype.onOrientationChanged = function (c) {
        if (Constants.g_isPC) {
            this.labelPercentDownload.x = Constants.ASSETS_WIDTH / 2;
            this.labelPercentDownload.y = Constants.ASSETS_HEIGHT / 2
        } else {
            this.labelPercentDownload.x = window.innerWidth / 2 * Constants.PIXEL_RATIO;
            this.labelPercentDownload.y = window.innerHeight / 2 * Constants.PIXEL_RATIO
        }
        this.loadingShape.x = this.labelPercentDownload.x - this.maxWidth / 2;
        this.loadingShape.y = this.labelPercentDownload.y + this.deltaY * 1.5;
        this.loadingShapeBack1.x = this.loadingShape.x;
        this.loadingShapeBack1.y = this.loadingShape.y;
        this.shader.x = this.labelPercentDownload.x - this.maxWidth * 0.6;
        this.shader.y = this.labelPercentDownload.y
    };
    return a
})(createjs.Container);
var GameObject = (function (a) {
    __extends(b, a);

    function b() {
        a.call(this);
        this.liveTime = 0;
        this.killed = false
    }
    b.prototype.update = function (c) {
        this.liveTime += c
    };
    b.prototype.kill = function () {
        this.killed = true
    };
    b.prototype.isDead = function () {
        return this.killed
    };
    b.prototype.onDead = function () {
        if (this.parent) {
            this.parent.removeChild(this)
        }
    };
    return b
})(createjs.Container);
var Chip = (function (a) {
    __extends(b, a);

    function b(g, d, f, e, c) {
        a.call(this);
        this.STATE_NORMAL = "STATE_NORMAL";
        this.STATE_EXCHANGE = "STATE_EXCHANGE";
        this.STATE_SHIFT_DOWN = "STATE_SHIFT_DOWN";
        this.STATE_MATCH = "STATE_MATCH";
        this.wasClear = false;
        this.state = null;
        this.rotationSpeed = 0;
        this.selected = false;
        this.stateTime = 0;
        this.rotationTimeOffset = Utils.RandomRange(0, 20);
        this.fallDownDelay = Utils.RandomRange(0, 0.75);
        this.bonusType = null;
        this.jellyAnim = false;
        this.doubleMatched = false;
        this.canBeMatched = true;
        this.matchReason = null;
        this.acid = false;
        this.wasSplash = false;
        this.spawnYPos = e;
        this.setIncexes(d, f);
        this.chipPicture = AssetsManager.g_instance.getImage("cake_" + g);
        this.addChild(this.chipPicture);
        this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
        this.chipPicture.y = -this.chipPicture.getBounds().height;
        this.colorID = g;
        if (this.colorID == 7) {
            this.colorID = -1;
            this.acid = true;
            console.log("here111!!!")
        }
        this.setState(b.STATE_SPAWN_NEW);
        this.spawnDelay = c
    }
    b.prototype.isAcid = function () {
        return this.acid
    };
    b.prototype.getBonusType = function () {
        return this.bonusType
    };
    b.prototype.getColorID = function () {
        return this.colorID
    };
    b.prototype.getIndeces = function () {
        return new createjs.Point(this.indexX, this.indexY)
    };
    b.prototype.getIndexX = function () {
        return this.indexX
    };
    b.prototype.getIndexY = function () {
        return this.indexY
    };
    b.prototype.setIncexes = function (c, d) {
        this.indexX = c;
        this.indexY = d
    };
    b.prototype.update = function (d) {
        this.stateTime += d;
        switch (this.state) {
        case this.STATE_NORMAL:
            var c = this.stateTime * 9;
            var e = Math.sin(c) * 0.13;
            this.scaleX = 1 + e;
            this.scaleY = 1 - e;
            if (c >= Math.PI * 1) {
                this.scaleX = this.scaleY = 1
            }
            this.canBeMatched = true;
            break;
        case this.STATE_EXCHANGE:
            if (this.stateTime >= Constants.EXCHANGE_TIME) {
                this.setState(this.STATE_NORMAL)
            }
            break;
        case b.STATE_SPAWN_NEW:
            this.spawnDelay -= d;
            if (this.spawnDelay < 0) {
                this.speed.y += this.acceleration.y * d;
                this.x += d * this.speed.x;
                this.y += d * this.speed.y;
                if (this.y >= this.spawnYPos) {
                    this.y = this.spawnYPos;
                    this.setState(this.STATE_NORMAL);
                    PlayState.g_instance.onShiftEnded()
                }
            }
            break;
        case this.STATE_SHIFT_DOWN:
            this.speed.y += this.acceleration.y * d;
            this.x += d * this.speed.x;
            this.y += d * this.speed.y;
            if (this.y >= this.spawnYPos) {
                this.y = this.spawnYPos;
                this.setState(this.STATE_NORMAL);
                PlayState.g_instance.onShiftEnded()
            }
            break;
        case b.STATE_FALL_DOWN:
            this.fallDownDelay -= d;
            if (this.fallDownDelay <= 0) {
                this.speed.y += this.acceleration.y * d;
                this.x += d * this.speed.x;
                this.y += d * this.speed.y;
                this.rotation += this.rotationSpeed * d;
                if (this.y >= 1300) {
                    this.kill()
                }
            }
            break;
        case this.STATE_MATCH:
            if (this.acid) {
                this.matchAcid();
                break
            }
            this.alpha = 1 - this.stateTime / Constants.MATCH_TIME;
            this.scaleX = 1 + this.stateTime * 1.5;
            this.scaleY = 1 - this.stateTime * 1.5;
            if (this.stateTime >= Constants.MATCH_TIME / 2 && !this.wasClear) {
                PlayState.g_instance.addPointsAt(this, this.matchReason);
                PlayState.g_instance.clearCell(this);
                this.wasClear = true
            }
            if (this.stateTime >= Constants.MATCH_TIME) {
                this.kill()
            }
            break
        }
        if (this.shiningCircle) {
            this.shiningCircle.rotation += d * 20
        }
    };
    b.prototype.setState = function (c) {
        if (c == this.state) {
            return
        }
        this.stateTime = 0;
        this.state = c;
        switch (c) {
        case this.STATE_NORMAL:
            this.jellyAnim = true;
            break;
        case this.STATE_EXCHANGE:
            break;
        case this.STATE_SHIFT_DOWN:
            createjs.Tween.get(this, {
                loop: false
            }).to({
                scaleX: 1,
                scaleY: 1
            }, 170, createjs.Ease.linear);
            break;
        case b.STATE_SPAWN_NEW:
            this.speed = new createjs.Point(0, 500);
            this.acceleration = new createjs.Point(0, Constants.GRAVITY_ACC);
            break
        }
    };
    b.prototype.exchange = function (d, c) {
        this.deselect();
        this.setState(this.STATE_EXCHANGE);
        this.indexX = d;
        this.indexY = c
    };
    b.prototype.shiftDown = function (d, c) {
        this.speed = new createjs.Point(0, -250);
        this.deselect();
        this.indexY = d;
        this.spawnYPos = c;
        this.setState(this.STATE_SHIFT_DOWN)
    };
    b.prototype.match = function (c) {
        if (this.state == this.STATE_MATCH) {
            this.doubleMatched = true
        }
        if (!this.canBeMatched) {
            return
        }
        this.matchReason = c;
        this.setState(this.STATE_MATCH);
        if (!this.wasSplash) {
            this.wasSplash = true;
            PlayState.g_instance.splashAt(this)
        }
    };
    b.prototype.isDoubleMatched = function () {
        return this.doubleMatched
    };
    b.prototype.select = function () {
        this.stateTime = 0;
        this.jellyAnim = true;
        this.selected = true
    };
    b.prototype.deselect = function () {
        if (this.selected) {
            this.scaleX = this.scaleY = 1;
            this.selected = false
        }
    };
    b.prototype.isOutOfField = function () {
        return false
    };
    b.prototype.isNormal = function () {
        return this.state == this.STATE_NORMAL
    };
    b.prototype.getState = function () {
        return this.state
    };
    b.prototype.isBonus = function () {
        return this.bonusType != null
    };
    b.prototype.convertToBonus = function (c) {
        this.bonusType = c;
        this.removeAllChildren();
        if (c == b.BONUS_5) {
            var d = AssetsManager.g_instance.getImage("donut");
            this.addChild(d);
            d.x = -d.getBounds().width / 2;
            d.y = -d.getBounds().height
        }
        if (c == b.BONUS_4) {
            var d = AssetsManager.g_instance.getImage("lolipop");
            this.addChild(d);
            d.x = -d.getBounds().width / 2;
            d.y = -d.getBounds().height
        }
        if (c == b.BONUS_CLOCK) {
            var d = AssetsManager.g_instance.getImage("clock_cake");
            this.addChild(d);
            d.x = -d.getBounds().width / 2;
            d.y = -d.getBounds().height
        }
        this.canBeMatched = false;
        this.colorID = -1;
        this.setState(this.STATE_NORMAL)
    };
    b.prototype.fallDown = function () {
        this.setState(b.STATE_FALL_DOWN);
        this.speed = new createjs.Point(0, 0);
        createjs.Tween.get(this, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 170, createjs.Ease.linear);
        if (!this.wasClear) {
            PlayState.g_instance.clearCell(this);
            this.wasClear = true
        }
    };
    b.prototype.matchAcid = function () {
        this.fallDownDelay = 0.1;
        this.setState(b.STATE_FALL_DOWN);
        this.chipPicture.y = -this.chipPicture.getBounds().height / 2;
        this.y -= this.chipPicture.getBounds().height / 2;
        this.speed = new createjs.Point(Utils.RandomRange(-100, +100), -600);
        this.rotationSpeed = Utils.RandomRange(-800, 800);
        createjs.Tween.get(this, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 170, createjs.Ease.linear);
        if (!this.wasClear) {
            PlayState.g_instance.addPointsAt(this, this.matchReason);
            PlayState.g_instance.clearCell(this);
            this.wasClear = true;
            SoundManager.g_instance.play(SoundManager.SOUND_POISON)
        }
        PlayState.g_instance.addChild(this)
    };
    b.BONUS_4 = "BONUS_4";
    b.BONUS_5 = "BONUS_5";
    b.BONUS_CLOCK = "BONUS_CLOCK";
    b.STATE_SPAWN_NEW = "STATE_SPAWN_NEW";
    b.STATE_FALL_DOWN = "STATE_FALL_DOWN";
    b.MATCH_REASON_SIMPLE = "MATCH_REASON_SIMPLE";
    b.MATCH_REASON_EXCHANGE_WIHT_BONUS = "MATCH_REASON_EXCHANGE_WIHT_BONUS";
    b.MATCH_REASON_BONUS_EFFECT_5 = "MATCH_REASON_BONUS_EFFECT_5";
    b.MATCH_REASON_BONUS_EFFECT_4_HOR = "MATCH_REASON_BONUS_EFFECT_4_HOR";
    b.MATCH_REASON_BONUS_EFFECT_4_VERT = "MATCH_REASON_BONUS_EFFECT_4_VERT";
    b.MATCH_REASON_I_AM_BONUS = "MATCH_REASON_I_AM_BONUS";
    return b
})(GameObject);
var Utils = (function () {
    function a() {}
    a.RandomRange = function (c, b) {
        return c + (b - c) * Math.random()
    };
    a.RandomRangeInt = function (c, b) {
        return Math.floor(Math.random() * (b - c + 1)) + c
    };
    a.IntToTimeString = function (d) {
        var b = Math.floor(d / 60);
        var f = b.toString();
        var e = d % 60;
        var c;
        if (e < 10) {
            c = "0" + e
        } else {
            c = e.toString()
        }
        return f + "d" + c
    };
    a.RadToGrad = function (b) {
        return b * 180 / Math.PI
    };
    a.GradToRad = function (b) {
        return b * Math.PI / 180
    };
    a.IsMobileBrowser = function () {
        if (window.orientation != undefined) {
            return true
        }
        var b = false;
        (function (c) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(c) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(c.substr(0, 4))) {
                b = true
            }
        })(navigator.userAgent || navigator.vendor || window.opera);
        return b;
        return false
    };
    a.ScaledOffset = function (b) {
        return (window.devicePixelRatio ? window.devicePixelRatio : 1) * b / Constants.SCREEN_SCALE
    };
    return a
})();
var GameOverState = (function (b) {
    __extends(a, b);

    function a(k, d, i) {
        var f = this;
        b.call(this);
        this.panel = new createjs.Container();
        this.hiddingNow = false;
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#000000");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        this.shaderTween = createjs.Tween.get(this.shader, {
            loop: false
        }).wait(400).to({
            alpha: 0.4
        }, 800, createjs.Ease.linear);
        this.addChild(this.panel);
        this.panel.x = Constants.ASSETS_WIDTH / 2 - 5;
        this.panel.y = Constants.SCREEN_HEIGHT / 2;
        var c = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_MESSAGE_WINDOW);
        this.panel.addChild(c);
        var j = new DNButton(Constants.IMAGE_BUTTON_RESTART, function () {
            return f.onRestartTouch()
        });
        this.panel.addChild(j);
        this.addGuiObject(j);
        j.x = -110;
        j.y = 130;
        var h = new DNButton(Constants.IMAGE_BUTTON_EXIT, function () {
            return f.onExitTouch()
        });
        this.panel.addChild(h);
        this.addGuiObject(h);
        h.x = +110;
        h.y = 130;
        var l = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_GAMEOVER_CAPTION);
        this.panel.addChild(l);
        l.y = -245;
        this.roundCaption = AssetsManager.g_instance.getCenteredImageWithProxy(Constants.IMAGE_CAPTION_ROUND);
        this.panel.addChild(this.roundCaption);
        this.roundCaption.x = 0;
        this.roundCaption.y = -90;
        this.scoreCaption = AssetsManager.g_instance.getImage(Constants.IMAGE_GUI_SCORE);
        this.panel.addChild(this.scoreCaption);
        this.scoreCaption.x = -70;
        this.scoreCaption.y = -20;
        this.roundLabel = new DNTextField(k.toString());
        this.panel.addChild(this.roundLabel);
        this.roundLabel.x = this.roundCaption.x - 18;
        this.roundLabel.y = this.roundCaption.y - 20;
        this.scoreLabel = new DNTextField(d.toString());
        this.panel.addChild(this.scoreLabel);
        this.scoreLabel.x = this.scoreCaption.x + 55;
        this.scoreLabel.y = this.scoreCaption.y + 8;
        this.panel.alpha = 0;
        createjs.Tween.get(this.panel, {
            loop: false
        }).to({
            alpha: 1
        }, 200, createjs.Ease.linear);
        this.panel.scaleX = 0.7;
        this.panel.scaleY = 0.7;
        createjs.Tween.get(this.panel, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 400, createjs.Ease.backOut);
        try {
            SG_Hooks.gameOver(k, d)
        } catch (g) {
            console.log("error SG_Hooks.gameOver(PlayState.g_curLevel, score);")
        }
    }
    a.prototype.hide = function () {
        if (!this.hiddingNow) {
            createjs.Tween.get(this.shader, {
                loop: false
            }).to({
                alpha: 0
            }, 400, createjs.Ease.linear).call(function () {
                StateManager.g_instance.popState()
            });
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                y: -300
            }, 300, createjs.Ease.backIn);
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                alpha: 0
            }, 300, createjs.Ease.linear);
            this.hiddingNow = true
        }
    };
    a.prototype.onRestartTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new PlayState()))
    };
    a.prototype.onExitTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new MainMenuState()))
    };
    return a
})(GameState);
var MainMenuState = (function (b) {
    __extends(a, b);

    function a() {
        var e = this;
        b.call(this);
        this.someThing = true;
        this.buttonsH = 750;
        this.addChild(AssetsManager.g_instance.getImage(Constants.IMAGE_TITLE_MAIN_MENU_BACK));
        var d = new DNButton(Constants.IMAGE_BUTTON_PLAY, function () {
            return e.onPlayTouch()
        });
        this.addChild(d);
        this.addGuiObject(d);
        d.x = Constants.ASSETS_WIDTH / 2;
        d.y = this.buttonsH;
        createjs.Tween.get(d, {
            loop: true
        }).to({
            rotation: +8
        }, 150, createjs.Ease.linear).to({
            rotation: -8
        }, 300, createjs.Ease.linear).to({
            rotation: 0
        }, 150, createjs.Ease.linear).wait(4000);
        var c = new DNButton(Constants.IMAGE_BUTTON_MORE_GAMES, function () {
            return e.onCreditsTouch()
        });
        this.addChild(c);
        this.addGuiObject(c);
        c.x = 590;
        c.y = this.buttonsH;
        this.setSoundButton();
        this.configureYAlign()
    }
    a.prototype.configureYAlign = function () {
        if (Constants.g_isPC) {
            return
        }
        if (Constants.SCREEN_HEIGHT < Constants.ASSETS_HEIGHT) {
            this.y = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT)
        } else {
            if (Constants.SCREEN_HEIGHT > Constants.ASSETS_HEIGHT) {
                this.y = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
                var d = new createjs.Shape();
                d.graphics.beginFill("#ffffff");
                d.graphics.drawRect(0, Constants.ASSETS_HEIGHT, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT);
                d.graphics.endFill();
                this.addChildAt(d, 0);
                var c = new createjs.Shape();
                c.graphics.beginFill("#ffffff");
                c.graphics.drawRect(0, Constants.ASSETS_HEIGHT - Constants.SCREEN_HEIGHT, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT);
                c.graphics.endFill();
                this.addChildAt(c, 0)
            }
        }
    };
    a.prototype.init = function () {
        b.prototype.init.call(this)
    };
    a.prototype.runJelly = function () {
        this.liveTime = 0
    };
    a.prototype.update = function (c) {
        b.prototype.update.call(this, c)
    };
    a.prototype.onSoundTouch = function () {
        SoundManager.g_instance.setSoundEnabled(!SoundManager.g_instance.isSoundEnabled());
        this.setSoundButton()
    };
    a.prototype.setSoundButton = function () {
        var d = this;
        if (this.soundButton && this.soundButton.parent) {
            this.soundButton.parent.removeChild(this.soundButton)
        }
        var c = SoundManager.g_instance.isSoundEnabled();
        this.soundButton = new DNButton(c ? Constants.IMAGE_BUTTON_SOUND_ON : Constants.IMAGE_BUTTON_SOUND_OFF, function () {
            return d.onSoundTouch()
        });
        this.addChild(this.soundButton);
        this.addGuiObject(this.soundButton);
        this.soundButton.x = +110;
        this.soundButton.y = +this.buttonsH
    };
    a.prototype.onMouseDown = function (c, d) {
        b.prototype.onMouseDown.call(this, c, d)
    };
    a.prototype.onCreditsTouch = function () {
        //window.open("http://m.softgames.de", "_blank")
        SG.redirectToPortal();
    };
    a.prototype.onPlayTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new PlayState()))
    };
    a.prototype.resume = function () {
        this.configureYAlign()
    };
    return a
})(GameState);
var ShadeInState = (function (b) {
    __extends(a, b);

    function a(c) {
        var d = this;
        b.call(this);
        this.nextState = null;
        this.nextState = c;
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ffffff");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader, {
            loop: false
        }).to({
            alpha: 1
        }, 400, createjs.Ease.linear).call(function () {
            return d.onFinishShade()
        })
    }
    a.prototype.onFinishShade = function () {
        StateManager.g_instance.changeState(this.nextState);
        StateManager.g_instance.pushState(new ShadeOutState())
    };
    a.prototype.setNextState = function (c) {
        this.nextState = c
    };
    return a
})(GameState);
var ShadeOutState = (function (b) {
    __extends(a, b);

    function a() {
        var c = this;
        b.call(this);
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ffffff");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        createjs.Tween.get(this.shader, {
            loop: false
        }).to({
            alpha: 0
        }, 400, createjs.Ease.linear).call(function () {
            return c.onFinishShade()
        })
    }
    a.prototype.onFinishShade = function () {
        StateManager.g_instance.popState()
    };
    return a
})(GameState);
var CreditsState = (function (a) {
    __extends(b, a);

    function b() {
        a.call(this);
        this.hiddingNow = false;
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ffffff");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader, {
            loop: false
        }).to({
            alpha: 0.75
        }, 500, createjs.Ease.linear);
        this.container = new createjs.Container();
        this.addChild(this.container);
        this.container.alpha = 0;
        createjs.Tween.get(this.container, {
            loop: false
        }).to({
            alpha: 1
        }, 500, createjs.Ease.linear);
        var e = ["PROGRAMMING / GAME DESIGN:", "Konstantin Boronenkov", "", "", "ART:", "Vladimir Makarov", "Anna Turkova", "", "", "MUSIC:", "Alexander Ahuro", "", "", "Hypnocat Studio 2014", "gibbetsfeedback@gmail.com"];
        for (var d = 0; d < e.length; d++) {
            var c = new createjs.Text(e[d], "bold 35px Times New Roman", "#222222");
            c.textAlign = "center";
            this.container.addChild(c);
            c.x = Constants.ASSETS_WIDTH / 2;
            c.y = 100 + d * 40
        }
    }
    b.prototype.onMouseDown = function (c, d) {
        this.hide()
    };
    b.prototype.hide = function () {
        if (!this.hiddingNow) {
            createjs.Tween.removeTweens(this.container);
            createjs.Tween.removeTweens(this.shader);
            createjs.Tween.get(this.shader, {
                loop: false
            }).to({
                alpha: 0
            }, 400, createjs.Ease.linear).call(function () {
                StateManager.g_instance.popState()
            });
            createjs.Tween.get(this.container, {
                loop: false
            }).to({
                alpha: 0
            }, 400, createjs.Ease.linear);
            this.hiddingNow = true
        }
    };
    return b
})(GameState);

function init() {
    var c = [];
    var b = [Constants.IMAGE_TITLE_MAIN_MENU_BACK, Constants.IMAGE_BACK];
    var e = [Constants.IMAGE_BUTTON_MORE_GAMES, "cake_1", "cake_2", "cake_3", "cake_4", "cake_5", "cake_6", "cake_7", "effect_1_0", "effect_1_1", "effect_1_2", "effect_1_3", "effect_1_4", "effect_1_5", "effect_1_6", "effect_1_7", "effect_1_8", "effect_2_0", "effect_2_1", "effect_2_2", "effect_2_3", "effect_2_4", "effect_2_5", "effect_2_6", "effect_2_7", "effect_2_8", "effect_3_0", "effect_3_1", "effect_3_2", "effect_3_3", "effect_3_4", "effect_3_5", "effect_3_6", "effect_3_7", "effect_3_8", "effect_3_0", "effect_3_1", "effect_3_2", "effect_3_3", "effect_3_4", "effect_3_5", "effect_3_6", "effect_3_7", "effect_3_8", "effect_4_0", "effect_4_1", "effect_4_2", "effect_4_3", "effect_4_4", "effect_4_5", "effect_4_6", "effect_4_7", "effect_4_8", "effect_5_0", "effect_5_1", "effect_5_2", "effect_5_3", "effect_5_4", "effect_5_5", "effect_5_6", "effect_5_7", "effect_5_8", "effect_6_0", "effect_6_1", "effect_6_2", "effect_6_3", "effect_6_4", "effect_6_5", "effect_6_6", "effect_6_7", "effect_6_8", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "p", "d", Constants.IMAGE_BUTTON_CLOSE, Constants.IMAGE_BUTTON_SOUND_ON, Constants.IMAGE_BUTTON_SOUND_OFF, Constants.IMAGE_BUTTON_PLAY, Constants.IMAGE_BUTTON_EXIT, Constants.IMAGE_BUTTON_RESTART, Constants.IMAGE_BUTTON_CREDITS, Constants.IMAGE_AWESOME, Constants.IMAGE_SUPERB, Constants.IMAGE_ROUND_COMPLETED, Constants.IMAGE_TIME_IS_UP, Constants.IMAGE_DROP, Constants.IMAGE_BACK, Constants.IMAGE_DONUT, Constants.IMAGE_LOLIPOP, Constants.IMAGE_CLOCK, Constants.IMAGE_MESSAGE_WINDOW, Constants.IMAGE_HINT_ARROW, Constants.IMAGE_BUTTON_PAUSE, Constants.IMAGE_GAMEOVER_CAPTION, Constants.IMAGE_TITLE_MAIN_MENU_BACK, Constants.IMAGE_PROGRESS_BAR, Constants.IMAGE_SICKLE, Constants.IMAGE_ROTATE, Constants.IMAGE_GUI_CLOCK, Constants.IMAGE_CAPTION_ROUND, Constants.IMAGE_PROGRESS_BAR_DOWN, Constants.IMAGE_GUI_SCORE];
    var d = [SoundManager.SOUND_MUSIC, SoundManager.SOUND_CLICK, SoundManager.SOUND_MATCH_1, SoundManager.SOUND_MATCH_2, SoundManager.SOUND_MATCH_3, SoundManager.SOUND_DROP_1, SoundManager.SOUND_DROP_2, SoundManager.SOUND_DROP_3, SoundManager.SOUND_LINE, SoundManager.SOUND_KILL_COLOR, SoundManager.SOUND_EXCHANGE, SoundManager.SOUND_WIN];
    for (var a = 0; a < e.length; a++) {
        if (b.indexOf(e[a]) == -1) {
            c.push({
                src: "assets/art/" + e[a] + ".png",
                id: e[a]
            })
        } else {
            c.push({
                src: "assets/art/" + e[a] + ".jpg",
                id: e[a]
            })
        }
    }
    for (var a = 0; a < d.length; a++) {
        c.push({
            src: d[a] + ".ogg|" + d[a] + ".mp3",
            id: d[a]
        })
    }
    Constants.g_isPC = !Utils.IsMobileBrowser();
    new StateManager(c)
}
var DNButton = (function (a) {
    __extends(b, a);

    function b(c, d) {
        a.call(this);
        this.selected = false;
        this.func = null;
        this.picture = AssetsManager.g_instance.getCenteredImage(c);
        this.addChild(this.picture);
        this.func = d;
        this.picWidth = this.picture.getBounds().width * 1.15;
        this.picHeight = this.picture.getBounds().height * 1.15
    }
    b.prototype.select = function () {
        if (!this.selected) {
            createjs.Tween.removeTweens(this);
            createjs.Tween.get(this, {
                loop: false
            }).to({
                scaleX: 1.15,
                scaleY: 1.15
            }, 150, createjs.Ease.linear);
            this.selected = true
        }
    };
    b.prototype.deselect = function () {
        if (this.selected) {
            createjs.Tween.removeTweens(this);
            createjs.Tween.get(this, {
                loop: false
            }).to({
                scaleX: 1,
                scaleY: 1
            }, 150, createjs.Ease.linear);
            this.selected = false
        }
    };
    b.prototype.onMouseDown = function (c, d) {
        if (this.hitTestSmart(c, d)) {
            this.liveTime = 0;
            this.select()
        }
    };
    b.prototype.onMouseUp = function (c, d) {
        if (this.hitTestSmart(c, d) && this.selected) {
            this.func();
            SoundManager.g_instance.play(SoundManager.SOUND_CLICK)
        }
        this.deselect()
    };
    b.prototype.onMouseMove = function (c, d) {
        if (!this.hitTestSmart(c, d)) {
            this.deselect()
        }
    };
    b.prototype.hitTestSmart = function (c, e) {
        if (!this.parent || !this.visible) {
            return false
        }
        var d = this.picture.localToGlobal(0, 0);
        d.x /= Constants.SCREEN_SCALE;
        d.y /= Constants.SCREEN_SCALE;
        return d.x < c && d.x + this.picWidth > c && d.y < e && d.y + this.picHeight > e
    };
    return b
})(GameObject);
var DNTextField = (function (b) {
    __extends(a, b);

    function a(c) {
        b.call(this);
        this.textWidth = 0;
        this.setText(c)
    }
    a.prototype.setText = function (g) {
        this.removeAllChildren();
        var c = 0;
        for (var e = 0; e < g.length; e++) {
            var d = g.charAt(e);
            var f = AssetsManager.g_instance.getImage(d);
            this.addChild(f);
            f.x = c;
            c += f.getBounds().width - 6
        }
        this.textWidth = c
    };
    a.prototype.getWidth = function () {
        return this.textWidth
    };
    return a
})(createjs.Container);
var FlyingPoints = (function (b) {
    __extends(a, b);

    function a(c) {
        b.call(this);
        this.timeOffset = Math.random() * 10;
        this.label = new DNTextField("p" + c.toString());
        this.addChild(this.label);
        this.label.scaleX = this.label.scaleY = 0.85
    }
    a.prototype.update = function (c) {
        b.prototype.update.call(this, c);
        this.y -= c * 200;
        this.label.x = Math.sin(this.liveTime * 4 + this.timeOffset) * 12;
        if (this.liveTime > 0.5) {
            this.alpha -= c * 2
        }
        if (this.liveTime >= 1.5) {
            this.kill()
        }
    };
    return a
})(GameObject);
var KillLineEffect = (function (a) {
    __extends(b, a);

    function b(c) {
        a.call(this);
        this.speed = c;
        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_SICKLE));
        if (c.x < 0) {
            this.rotation = 180
        }
        if (c.x > 0) {
            this.rotation = 0
        }
        if (c.y < 0) {
            this.rotation = -90
        }
        if (c.y > 0) {
            this.rotation = +90
        }
    }
    b.prototype.update = function (c) {
        a.prototype.update.call(this, c);
        this.x += c * this.speed.x;
        this.y += c * this.speed.y;
        if (this.x > Constants.ASSETS_WIDTH + 172 / 2) {
            this.kill()
        }
        if (this.x < -172 / 2) {
            this.kill()
        }
        if (this.y < 300 && this.speed.y < 0) {
            this.alpha -= c * 6
        }
        if (this.y < -106 / 2) {
            this.kill()
        }
        if (this.y > Constants.SCREEN_HEIGHT + 106 / 2) {
            this.kill()
        }
    };
    return b
})(GameObject);
var KillColorEffect = (function (b) {
    __extends(a, b);

    function a(g, f) {
        b.call(this);
        var e = 2000;
        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_DROP));
        var c = new createjs.Point(f.x - g.x, f.y - g.y);
        this.distance = Math.sqrt(c.x * c.x + c.y * c.y);
        this.maxTime = this.distance / e;
        var d = c.x / this.distance;
        this.speed = new createjs.Point(c.x / this.distance * e, c.y / this.distance * e);
        this.rotation = Utils.RadToGrad(Math.atan2(c.y, c.x))
    }
    a.prototype.update = function (c) {
        b.prototype.update.call(this, c);
        if (this.liveTime < this.maxTime) {
            this.x += c * this.speed.x;
            this.y += c * this.speed.y
        } else {
            this.alpha -= c * 3.5;
            if (this.alpha <= 0) {
                this.kill()
            }
        }
    };
    return a
})(GameObject);
var AddTimeEffect = (function (a) {
    __extends(b, a);

    function b() {
        var e = this;
        a.call(this);
        this.container = new createjs.Container();
        this.addChild(this.container);
        var c = new DNTextField("p15");
        this.container.addChild(c);
        c.scaleX = c.scaleY = 0.9;
        var d = AssetsManager.g_instance.getImage(Constants.IMAGE_GUI_CLOCK);
        this.container.addChild(d);
        d.x = -52;
        d.y = -10;
        createjs.Tween.get(this.container, {
            loop: false
        }).to({
            y: -100
        }, 700, createjs.Ease.backOut).to({
            alpha: 0
        }, 400, createjs.Ease.linear).call(function () {
            return e.kill()
        })
    }
    return b
})(GameObject);
var EndRoundEffect = (function (a) {
    __extends(b, a);

    function b() {
        a.call(this);
        this.stage = 0;
        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_ROUND_COMPLETED));
        this.x = 350;
        this.y = 400;
        this.setScale(0);
        this.alpha = -1
    }
    b.prototype.update = function (c) {
        a.prototype.update.call(this, c);
        switch (this.stage) {
        case 0:
            this.alpha += c * 4;
            this.setScale(this.scaleX + c * 2);
            if (this.scaleX > 1) {
                this.setScale(1);
                this.alpha = 1;
                this.liveTime = 0;
                this.stage = 1;
                createjs.Tween.get(this, {
                    loop: false
                }).wait(1400).to({
                    alpha: 0
                }, 500, createjs.Ease.linear)
            }
            break;
        case 1:
            this.setScale(1 + Math.sin(this.liveTime * 5) * 0.07);
            break
        }
    };
    b.prototype.setScale = function (c) {
        this.scaleX = this.scaleY = c
    };
    return b
})(GameObject);
var TimeIsUpEffect = (function (b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.stage = 0;
        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_TIME_IS_UP));
        this.x = 350;
        this.y = 400;
        this.setScale(0);
        this.alpha = -1
    }
    a.prototype.update = function (c) {
        b.prototype.update.call(this, c);
        switch (this.stage) {
        case 0:
            this.alpha += c * 4;
            this.setScale(this.scaleX + c * 2);
            if (this.scaleX > 1) {
                this.setScale(1);
                this.alpha = 1;
                this.liveTime = 0;
                this.stage = 1;
                createjs.Tween.get(this, {
                    loop: false
                }).wait(1400).to({
                    alpha: 0
                }, 500, createjs.Ease.linear)
            }
            break;
        case 1:
            this.setScale(1 + Math.sin(this.liveTime * 5) * 0.07);
            break
        }
    };
    a.prototype.setScale = function (c) {
        this.scaleX = this.scaleY = c
    };
    return a
})(GameObject);
var MoveHint = (function (a) {
    __extends(b, a);

    function b(e) {
        a.call(this);
        this.arrow1 = new createjs.Container();
        this.arrow2 = new createjs.Container();
        this.hidding = false;
        var d = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_HINT_ARROW);
        this.arrow1.addChild(d);
        this.addChild(this.arrow1);
        this.arrow1.y -= 19;
        var c = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_HINT_ARROW);
        this.arrow2.addChild(c);
        this.addChild(this.arrow2);
        this.arrow2.y += 19;
        this.arrow2.rotation = 180;
        if (e) {
            this.rotation = 90
        }
        this.alpha = 0
    }
    b.prototype.update = function (c) {
        if (this.liveTime <= 0.5) {
            this.alpha = this.liveTime * 2
        }
        a.prototype.update.call(this, c);
        this.arrow1.x = Math.sin(this.liveTime * 7) * 5;
        this.arrow2.x = -this.arrow1.x;
        if (this.liveTime > 20) {
            this.hide()
        }
        if (this.hidding) {
            this.alpha -= c * 3;
            if (this.alpha <= 0) {
                this.kill()
            }
        }
    };
    b.prototype.hide = function () {
        this.hidding = true
    };
    return b
})(GameObject);
var ShowAwesomeEffect = (function (b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_AWESOME));
        this.alpha = 0;
        createjs.Tween.get(this, {
            loop: false
        }).to({
            alpha: 1
        }, 300, createjs.Ease.linear);
        this.scaleX = this.scaleY = 0.5;
        createjs.Tween.get(this, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 500, createjs.Ease.backOut)
    }
    a.prototype.update = function (c) {
        b.prototype.update.call(this, c);
        if (this.liveTime > 0.7) {
            this.alpha -= c * 3;
            this.scaleX += c;
            this.scaleY += c;
            if (this.alpha <= 0) {
                this.kill()
            }
        }
    };
    return a
})(GameObject);
var SuperbEffect = (function (b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.addChild(AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_SUPERB));
        this.alpha = 0;
        createjs.Tween.get(this, {
            loop: false
        }).to({
            alpha: 1
        }, 300, createjs.Ease.linear);
        this.scaleX = this.scaleY = 0.5;
        createjs.Tween.get(this, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 500, createjs.Ease.backOut)
    }
    a.prototype.update = function (c) {
        b.prototype.update.call(this, c);
        if (this.liveTime > 0.7) {
            this.alpha -= c * 3;
            this.scaleX += c;
            this.scaleY += c;
            if (this.alpha <= 0) {
                this.kill()
            }
        }
    };
    return a
})(GameObject);
var TutorialHighlighter = (function (b) {
    __extends(a, b);

    function a(h, g, f, d, i, c) {
        b.call(this);
        this.topShape = new createjs.Shape();
        this.bottomShape = new createjs.Shape();
        this.leftShape = new createjs.Shape();
        this.rightShape = new createjs.Shape();
        g -= 40;
        var e = 15;
        this.leftShape.graphics.beginFill("#000000");
        this.leftShape.graphics.drawRect(e, i, h - e, c - i);
        this.leftShape.graphics.endFill();
        this.addChild(this.leftShape);
        this.rightShape.graphics.beginFill("#000000");
        this.rightShape.graphics.drawRect(f, i, Constants.ASSETS_WIDTH - f - e, c - i);
        this.rightShape.graphics.endFill();
        this.addChild(this.rightShape);
        this.topShape.graphics.beginFill("#000000");
        this.topShape.graphics.drawRect(h, i, f - h, g - i);
        this.topShape.graphics.endFill();
        this.addChild(this.topShape);
        this.bottomShape.graphics.beginFill("#000000");
        this.bottomShape.graphics.drawRect(h, d, f - h, c - d);
        this.bottomShape.graphics.endFill();
        this.addChild(this.bottomShape);
        this.leftShape.snapToPixel = true;
        this.rightShape.snapToPixel = true;
        this.bottomShape.snapToPixel = true;
        this.topShape.snapToPixel = true;
        this.alpha = 0;
        createjs.Tween.get(this, {
            loop: false
        }).wait(1000).to({
            alpha: 0.6
        }, 600, createjs.Ease.linear)
    }
    a.prototype.magic = function (c) {
        return 0
    };
    a.prototype.hide = function () {
        var c = this;
        createjs.Tween.get(this, {
            loop: false
        }).to({
            alpha: 0
        }, 400, createjs.Ease.linear).call(function () {
            return c.kill()
        })
    };
    return a
})(GameObject);
var Tutorial = (function (a) {
    __extends(b, a);

    function b() {
        a.call(this);
        this.stage = 0;
        this.text = null;
        this.stage1Layout = [
            [1, 2, 3, 4, 5, 1, 2],
            [2, 3, 4, 5, 1, 2, 3],
            [5, 1, 5, 3, 4, 3, 4],
            [2, 3, 2, 1, 1, 5, 5],
            [4, 5, 1, 2, 3, 2, 1],
            [1, 2, 3, 4, 2, 1, 2],
            [3, 4, 5, 1, 5, 3, 4]
        ];
        this.stage1LayoutAccessible = [
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0]
        ];
        this.stage2LayoutAccessible = [
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0]
        ];
        this.stage3LayoutAccessible = [
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0]
        ]
    }
    b.prototype.onStartRound = function () {
        PlayState.g_instance.spawnDefinedChips(this.stage1Layout);
        this.onMatch()
    };
    b.prototype.onMatch = function () {
        this.stage++;
        if (this.highlighter) {
            this.highlighter.hide();
            this.highlighter = null
        }
        if (this.text) {
            this.text.parent.removeChild(this.text);
            this.text = null
        }
        if (this.stage == 1) {
            this.highlighter = PlayState.g_instance.highlightArea(2, 3, 5, 5);
            this.text = new createjs.Text(StringManager.getInstance().getString(StringManager.STRING_TUTORIAL_1), "bold 35px Times New Roman", "#ffffff");
            this.text.textAlign = "center";
            this.text.lineWidth = 600;
            this.text.x = Constants.ASSETS_WIDTH / 2;
            this.text.y = 300;
            this.text.alpha = 0;
            PlayState.g_instance.addChild(this.text);
            createjs.Tween.get(this.text, {
                loop: false
            }).wait(1000).to({
                alpha: 1
            }, 600, createjs.Ease.linear)
        }
        if (this.stage == 2) {
            this.highlighter = PlayState.g_instance.highlightArea(4, 4, 5, 6);
            this.text = new createjs.Text(StringManager.getInstance().getString(StringManager.STRING_TUTORIAL_2), "bold 35px Times New Roman", "#ffffff");
            this.text.textAlign = "center";
            this.text.lineWidth = 400;
            this.text.x = 450;
            this.text.y = 300;
            this.text.alpha = 0;
            PlayState.g_instance.addChild(this.text);
            createjs.Tween.get(this.text, {
                loop: false
            }).wait(1000).to({
                alpha: 1
            }, 600, createjs.Ease.linear)
        }
        if (this.stage == 3) {
            this.highlighter = PlayState.g_instance.highlightArea(3, 4, 5, 5);
            this.text = new createjs.Text(StringManager.getInstance().getString(StringManager.STRING_TUTORIAL_3), "bold 35px Times New Roman", "#ffffff");
            this.text.textAlign = "center";
            this.text.lineWidth = 600;
            this.text.x = Constants.ASSETS_WIDTH / 2;
            this.text.y = 300;
            this.text.alpha = 0;
            PlayState.g_instance.addChild(this.text);
            createjs.Tween.get(this.text, {
                loop: false
            }).wait(1000).to({
                alpha: 1
            }, 600, createjs.Ease.linear)
        }
        if (this.stage == 4) {
            PlayState.g_instance.stopTutorial()
        }
    };
    b.prototype.setHintIndeces = function () {
        switch (this.stage) {
        case 1:
            PlayState.g_instance.setHintIndeces(2, 3, 2, 4);
            break;
        case 2:
            PlayState.g_instance.setHintIndeces(4, 4, 4, 5);
            break;
        case 3:
            PlayState.g_instance.setHintIndeces(3, 4, 4, 4);
            break
        }
    };
    b.prototype.isAccessibleChip = function (c) {
        if (!this.highlighter) {
            return true
        }
        if (this.stage == 1) {
            return this.stage1LayoutAccessible[c.getIndexY()][c.getIndexX()] != 0
        }
        if (this.stage == 2) {
            return this.stage2LayoutAccessible[c.getIndexY()][c.getIndexX()] != 0
        }
        if (this.stage == 3) {
            return this.stage3LayoutAccessible[c.getIndexY()][c.getIndexX()] != 0
        }
        return true
    };
    b.prototype.onDead = function () {
        a.prototype.onDead.call(this);
        this.highlighter.hide();
        if (this.text) {
            this.text.parent.removeChild(this.text);
            this.text = null
        }
    };
    return b
})(GameObject);
var PortraitLockState = (function (b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.scaleX = this.scaleY = 1 / Constants.SCREEN_SCALE;
        var c = window.innerWidth * Constants.PIXEL_RATIO;
        var e = window.innerHeight * Constants.PIXEL_RATIO;
        var f = new createjs.Shape();
        f.graphics.beginFill("#4aa4c2");
        f.graphics.drawRect(0, 0, c, e);
        f.graphics.endFill();
        this.addChild(f);
        var g = AssetsManager.g_instance.getCenteredImage(Constants.IMAGE_ROTATE);
        var d = new createjs.Container();
        this.addChild(d);
        d.addChild(g);
        d.x = c / 2;
        d.y = e / 2
    }
    a.prototype.onOrientationChanged = function (c) {
        if (!c) {
            StateManager.g_instance.popState()
        }
    };
    return a
})(GameState);
var SplashEffect = (function (b) {
    __extends(a, b);

    function a(d) {
        b.call(this);
        this.frames = new Array();
        this.frame = -1;
        for (var c = 0; c <= 8; c++) {
            this.frames.push(AssetsManager.g_instance.getCenteredImageWithProxy("effect_" + d + "_" + c))
        }
        this.update(10);
        this.rotation = Utils.RandomRange(0, 360);
        this.scaleX = this.scaleY = Utils.RandomRange(0.8, 1.2)
    }
    a.prototype.update = function (d) {
        b.prototype.update.call(this, d);
        if (this.liveTime > 0.045) {
            this.liveTime = 0;
            this.frame++;
            if (this.frame >= this.frames.length) {
                this.frame = this.frames.length - 1;
                this.kill()
            }
            this.removeAllChildren();
            var c = this.frames[this.frame];
            this.addChild(c)
        }
    };
    return a
})(GameObject);
var AcidTutorialState = (function (b) {
    __extends(a, b);

    function a() {
        var h = this;
        b.call(this);
        this.panel = new createjs.Container();
        this.hiddingNow = false;
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ead468");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader, {
            loop: false
        }).wait(300).to({
            alpha: 0.4
        }, 800, createjs.Ease.linear);
        this.addChild(this.panel);
        this.panel.x = Constants.ASSETS_WIDTH / 2;
        this.panel.y = Constants.SCREEN_HEIGHT * 0.5;
        var c = AssetsManager.g_instance.getImage(Constants.IMAGE_MESSAGE_WINDOW);
        this.panel.addChild(c);
        c.x = -575 / 2;
        c.y = -493 / 2;
        var d = AssetsManager.g_instance.getCenteredImage("cake_7");
        this.panel.addChild(d);
        d.y = -160;
        var f = new createjs.Text("Nut item cant be matched. \nDestroy it using bonus or \n move nut into the bottom part \nof field.", "bold 35px Times New Roman", "#000000");
        this.panel.addChild(f);
        f.textAlign = "center";
        f.y = -30 + 1;
        f.x = 1;
        var g = new createjs.Text("Nut item cant be matched. \nDestroy it using bonus or \n move nut into the bottom part \nof field.", "bold 35px Times New Roman", "#a5533b");
        this.panel.addChild(g);
        g.textAlign = "center";
        g.y = -30;
        var e = new DNButton(Constants.IMAGE_BUTTON_CLOSE, function () {
            return h.hide()
        });
        this.panel.addChild(e);
        this.addGuiObject(e);
        e.x = 270;
        e.y = -210;
        this.panel.alpha = 0;
        createjs.Tween.get(this.panel, {
            loop: false
        }).to({
            alpha: 1
        }, 200, createjs.Ease.linear);
        this.panel.scaleX = 0.7;
        this.panel.scaleY = 0.7;
        createjs.Tween.get(this.panel, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 400, createjs.Ease.backOut)
    }
    a.prototype.hide = function () {
        if (!this.hiddingNow) {
            createjs.Tween.get(this.shader, {
                loop: false
            }).to({
                alpha: 0
            }, 400, createjs.Ease.linear).call(function () {
                StateManager.g_instance.popState()
            });
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                y: -300
            }, 300, createjs.Ease.backIn);
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                alpha: 0
            }, 300, createjs.Ease.linear);
            this.hiddingNow = true
        }
    };
    return a
})(GameState);
var PauseState = (function (b) {
    __extends(a, b);

    function a() {
        var h = this;
        b.call(this);
        this.panel = new createjs.Container();
        this.hiddingNow = false;
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#000000");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader, {
            loop: false
        }).wait(300).to({
            alpha: 0.4
        }, 800, createjs.Ease.linear);
        this.addChild(this.panel);
        this.panel.x = Constants.ASSETS_WIDTH / 2 - 20;
        this.panel.y = Constants.SCREEN_HEIGHT * 0.5;
        var d = AssetsManager.g_instance.getImage(Constants.IMAGE_MESSAGE_WINDOW);
        this.panel.addChild(d);
        d.x = -575 / 2;
        d.y = -493 / 2;
        var g = new DNButton(Constants.IMAGE_BUTTON_CLOSE, function () {
            return h.hide()
        });
        this.panel.addChild(g);
        this.addGuiObject(g);
        g.x = 255;
        g.y = -210;
        var f = new DNButton(Constants.IMAGE_BUTTON_PLAY, function () {
            return h.hide()
        });
        this.panel.addChild(f);
        this.addGuiObject(f);
        f.x = 0;
        f.y = -85;
        var e = new DNButton(Constants.IMAGE_BUTTON_RESTART, function () {
            return h.onRestartTouch()
        });
        this.panel.addChild(e);
        this.addGuiObject(e);
        e.x = -160;
        e.y = 130;
        var c = new DNButton(Constants.IMAGE_BUTTON_EXIT, function () {
            return h.onExitTouch()
        });
        this.panel.addChild(c);
        this.addGuiObject(c);
        c.x = 0;
        c.y = 130;
        this.setSoundButton();
        this.panel.alpha = 0;
        createjs.Tween.get(this.panel, {
            loop: false
        }).to({
            alpha: 1
        }, 200, createjs.Ease.linear);
        this.panel.scaleX = 0.7;
        this.panel.scaleY = 0.7;
        createjs.Tween.get(this.panel, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 400, createjs.Ease.backOut)
    }
    a.prototype.setSoundButton = function () {
        var d = this;
        if (this.soundButton && this.soundButton.parent) {
            this.soundButton.parent.removeChild(this.soundButton)
        }
        var c = SoundManager.g_instance.isSoundEnabled();
        this.soundButton = new DNButton(c ? Constants.IMAGE_BUTTON_SOUND_ON : Constants.IMAGE_BUTTON_SOUND_OFF, function () {
            return d.onSoundTouch()
        });
        this.panel.addChild(this.soundButton);
        this.addGuiObject(this.soundButton);
        this.soundButton.x = +160;
        this.soundButton.y = 130
    };
    a.prototype.hide = function () {
        if (!this.hiddingNow) {
            createjs.Tween.get(this.shader, {
                loop: false
            }).to({
                alpha: 0
            }, 400, createjs.Ease.linear).call(function () {
                StateManager.g_instance.popState()
            });
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                y: -300
            }, 300, createjs.Ease.backIn);
            createjs.Tween.get(this.panel, {
                loop: false
            }).to({
                alpha: 0
            }, 300, createjs.Ease.linear);
            this.hiddingNow = true
        }
    };
    a.prototype.update = function (c) {
        b.prototype.update.call(this, c)
    };
    a.prototype.onRestartTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new PlayState()))
    };
    a.prototype.onExitTouch = function () {
        StateManager.g_instance.pushState(new ShadeInState(new MainMenuState()))
    };
    a.prototype.onSoundTouch = function () {
        SoundManager.g_instance.setSoundEnabled(!SoundManager.g_instance.isSoundEnabled());
        this.setSoundButton()
    };
    return a
})(GameState);
var PlayState = (function (a) {
    __extends(b, a);

    function b() {
        var g = this;
        a.call(this);
        this.INPUT_STATE_WAIT_LOSE = "INPUT_STATE_WAIT_LOSE";
        this.INPUT_STATE_WAIT_SELECTION = "INPUT_STATE_WAIT_SELECTION";
        this.INPUT_STATE_LOCK = "INPUT_STATE_LOCK";
        this.INPUT_STATE_WAIT_SPAWN = "INPUT_STATE_WAIT_SPAWN";
        this.INPUT_STATE_SHIFT = "INPUT_STATE_SHIFT";
        this.INPUT_STATE_MATCHING = "INPUT_STATE_MATCHING";
        this.INPUT_STATE_SCISSORS = "INPUT_STATE_SCISSORS";
        this.INPUT_STATE_WAIT_NEXT_ROUND = "INPUT_STATE_WAIT_NEXT_ROUND";
        this.matchInARow = 0;
        this.inputState = null;
        this.fieldWidth = 7;
        this.fieldHeight = 7;
        this.selectedChip = null;
        this.swapChip1 = null;
        this.swapChip2 = null;
        this.lastMovedChip = null;
        this.underChipsLayer = new createjs.Container();
        this.backChipsLayer = new createjs.Container();
        this.frontChipsLayer = new createjs.Container();
        this.inputStateTime = 0;
        this.spawnClockProb = 0.05;
        this.tutorial = null;
        this.timeLeftTotal = 0;
        this.timeLeft = 0;
        this.timerPaused = false;
        this.acidProbs = [0, 0, 0, 0, 0, 0, 0.1, 0.1, 0.15, 0.2, 0.23, 0.25];
        this.score = 0;
        this.tmpScore = 0;
        this.scoreLabel = new DNTextField("000000");
        this.scoreGoalBefore = 0;
        this.scoreGoal = 0;
        this.scoreGoalLabel = new DNTextField("");
        this.roundLabel = new DNTextField("");
        this.round = -1;
        this.chipTypesCount = 5;
        this.acidProb = 1;
        this.firstAcidRound = 7;
        this.awesomeEffectTime = 0;
        this.superbEffectTime = 0;
        this.wasFirstAcid = false;
        this.lastDropSoundTime = -10;
        this.lastDropID = -1;
        this.lastSound = null;
        this.spawnCounter = 0;
        this.spawnIDS = [3, 2, 1, 1, 5, 1, 5, 2, 4, 3, 2, 3, 4, 4];
        var d = AssetsManager.g_instance.getImage(Constants.IMAGE_BACK);
        this.addChild(d);
        var f = new createjs.Container();
        this.addChild(f);
        var c = new DNButton(Constants.IMAGE_BUTTON_PAUSE, function () {
            return g.onPauseClick()
        });
        f.addChild(c);
        f.x = 65;
        f.y = 140;
        this.addGuiObject(c);
        f.scaleX = f.scaleY = 0.8;
        this.addChild(this.roundLabel);
        this.roundLabel.x = 160;
        this.roundLabel.y = 125;
        this.scoreProgressBar = AssetsManager.g_instance.getImage(Constants.IMAGE_PROGRESS_BAR);
        this.addChild(this.scoreProgressBar);
        this.scoreProgressBar.x = 289;
        this.scoreProgressBar.y = 97;
        this.scoreLeftShape = new createjs.Shape();
        this.scoreLeftShape.graphics.beginFill("#000000");
        this.scoreLeftShape.graphics.drawRect(0, 0, this.scoreProgressBar.getBounds().width, this.scoreProgressBar.getBounds().height);
        this.scoreLeftShape.graphics.endFill();
        this.scoreLeftShape.x = this.scoreProgressBar.x;
        this.scoreLeftShape.y = this.scoreProgressBar.y;
        this.scoreProgressBar.mask = this.scoreLeftShape;
        this.addChild(this.scoreLabel);
        this.scoreLabel.x = 300;
        this.scoreLabel.y = 99;
        this.scoreLabel.scaleX = this.scoreLabel.scaleY = 0.8;
        this.addChild(this.scoreGoalLabel);
        this.scoreGoalLabel.x = 550;
        this.scoreGoalLabel.y = 99;
        this.scoreGoalLabel.scaleX = this.scoreGoalLabel.scaleY = 0.8;
        this.timeProgressBar = AssetsManager.g_instance.getImage(Constants.IMAGE_PROGRESS_BAR_DOWN);
        this.addChild(this.timeProgressBar);
        this.timeProgressBar.x = 289;
        this.timeProgressBar.y = 163;
        this.timeLeftShape = new createjs.Shape();
        this.timeLeftShape.graphics.beginFill("#000000");
        this.timeLeftShape.graphics.drawRect(0, 0, this.timeProgressBar.getBounds().width, this.timeProgressBar.getBounds().height);
        this.timeLeftShape.graphics.endFill();
        this.timeLeftShape.x = this.timeProgressBar.x;
        this.timeLeftShape.y = this.timeProgressBar.y;
        this.timeProgressBar.mask = this.timeLeftShape;
        this.timeLeftLabel = new DNTextField("");
        this.addChild(this.timeLeftLabel);
        this.timeLeftLabel.x = 425;
        this.timeLeftLabel.y = 165;
        this.timeLeftLabel.scaleX = this.timeLeftLabel.scaleY = 0.8;
        b.g_instance = this;
        this.field = new Array(this.fieldWidth);
        for (var e = 0; e < this.fieldWidth; e++) {
            this.field[e] = new Array(this.fieldHeight)
        }
        this.addChild(this.underChipsLayer);
        this.addChild(this.backChipsLayer);
        this.addChild(this.frontChipsLayer);
        this.configureYAlign();
        this.startNextRound()
    }
    b.prototype.onPauseClick = function () {
        StateManager.g_instance.pushState(new PauseState())
    };
    b.prototype.createChip = function (d, g, e) {
        var f = Utils.RandomRangeInt(1, this.chipTypesCount);
        if (this.chipTypesCount == 7) {
            if (Math.random() < this.acidProb) {
                f = Utils.RandomRangeInt(1, this.chipTypesCount)
            } else {
                f = Utils.RandomRangeInt(1, this.chipTypesCount - 1)
            }
        }
        if (!this.wasFirstAcid && this.round == this.firstAcidRound) {
            this.wasFirstAcid = true;
            f = 7
        }
        var c = new Chip(f, d, g, this.getYPosByYIndex(g), e);
        c.setIncexes(d, g);
        this.addGameObjectAtPos(c, this.backChipsLayer, this.getXPosByXIndex(d), -Constants.CELL_SIZE);
        this.backChipsLayer.addChildAt(c, 0);
        this.field[d][g] = c
    };
    b.prototype.createChipWithColorID = function (d, g, e, f) {
        var c = new Chip(f, d, g, this.getYPosByYIndex(g), e);
        c.setIncexes(d, g);
        this.addGameObjectAtPos(c, this.backChipsLayer, this.getXPosByXIndex(d), -Constants.CELL_SIZE);
        this.backChipsLayer.addChildAt(c, 0);
        this.field[d][g] = c
    };
    b.prototype.getXPosByXIndex = function (c) {
        return c * Constants.CELL_SIZE + Constants.CELL_SIZE / 2 + Constants.FIELD_OFFSET_X
    };
    b.prototype.getYPosByYIndex = function (c) {
        return c * Constants.CELL_SIZE + Constants.CELL_SIZE / 2 + Constants.FIELD_OFFSET_Y
    };
    b.prototype.update = function (f) {
        a.prototype.update.call(this, f);
        this.inputStateTime += f;
        if (this.inputState != this.INPUT_STATE_WAIT_SELECTION) {
            if (this.moveHint) {
                if (this.moveHint.isDead()) {
                    this.moveHint = null
                } else {
                    this.moveHint.hide()
                }
            }
        }
        switch (this.inputState) {
        case this.INPUT_STATE_WAIT_SELECTION:
            var c = (this.tutorial != null ? 0.3 : 3);
            if (this.inputStateTime > c && !this.moveHint.parent) {
                this.addGameObjectAt(this.moveHint, this)
            }
            if (this.timeLeft <= 0) {
                this.lose()
            }
            break;
        case this.INPUT_STATE_WAIT_SPAWN:
            if (this.allChipsNormal()) {
                this.matchMatches(this.findMatches())
            }
            break;
        case this.INPUT_STATE_SHIFT:
            if (this.allChipsNormal()) {
                this.matchMatches(this.findMatches())
            }
            break;
        case this.INPUT_STATE_MATCHING:
            if (this.inputStateTime > Constants.MATCH_TIME / 2) {
                this.checkEmptyCells();
                this.shiftChips()
            }
            break;
        case this.INPUT_STATE_WAIT_NEXT_ROUND:
            if (this.inputStateTime > 3) {
                this.startNextRound()
            }
            break;
        case this.INPUT_STATE_WAIT_LOSE:
            if (this.inputStateTime > 2.4) {
                StateManager.g_instance.pushState(new GameOverState(this.round + 1, this.score, this.scoreGoal))
            }
            break
        }
        if (this.tmpScore < this.score) {
            this.tmpScore += 17;
            if (this.tmpScore > this.score) {
                this.tmpScore = this.score
            }
            var d = this.tmpScore.toString();
            switch (d.length) {
            case 1:
                d = "00000" + d;
                break;
            case 2:
                d = "0000" + d;
                break;
            case 3:
                d = "000" + d;
                break;
            case 4:
                d = "00" + d;
                break;
            case 5:
                d = "0" + d;
                break;
            case 6:
                break
            }
            this.scoreLabel.setText(d)
        }
        if (!this.timerPaused && !this.tutorial) {
            this.timeLeft -= f;
            if (this.timeLeft < 4) {
                this.timeLeftLabel.visible = ((this.timeLeft % 0.5) < 0.25)
            } else {
                this.timeLeftLabel.visible = true
            } if (this.timeLeft <= 0) {
                this.timeLeft = 0
            }
            var e = this.timeLeft / this.timeLeftTotal;
            if (e > 1) {
                e = 1
            }
            this.timeLeftShape.x = this.timeProgressBar.x - (1 - e) * this.timeProgressBar.getBounds().width;
            this.timeLeftLabel.setText(Utils.IntToTimeString(Math.floor(this.timeLeft)))
        }
    };
    b.prototype.allChipsNormal = function () {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var d = 0; d < this.fieldHeight; d++) {
                if (this.field[c][d] != null && !this.field[c][d].isNormal()) {
                    return false
                }
            }
        }
        return true
    };
    b.prototype.needSpawn = function () {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var d = 0; d < this.fieldHeight; d++) {
                if (this.field[c][d] == null) {
                    return true
                }
            }
        }
        return false
    };
    b.prototype.canExchange = function (d, c) {
        if (d == c) {
            return false
        }
        var f = (d.getIndeces().x - c.getIndeces().x);
        var e = (d.getIndeces().y - c.getIndeces().y);
        return (Math.abs(f) == 1 && e == 0) || (Math.abs(e) == 1 && f == 0)
    };
    b.prototype.exchangeChips = function (d, c) {
        var g = this;
        SoundManager.g_instance.play(SoundManager.SOUND_EXCHANGE);
        var i = d.x;
        var h = d.y;
        var l = d.getIndexX();
        var j = d.getIndexY();
        var m = c.x;
        var k = c.y;
        var f = c.getIndexX();
        var e = c.getIndexY();
        this.field[l][j] = c;
        this.field[f][e] = d;
        d.exchange(f, e);
        c.exchange(l, j);
        this.swapChip1 = d;
        this.swapChip2 = c;
        createjs.Tween.get(d, {
            loop: false
        }).to({
            x: m,
            y: k
        }, Constants.EXCHANGE_TIME * 1000, createjs.Ease.linear).call(function () {
            return g.onExchangeEnded()
        });
        createjs.Tween.get(c, {
            loop: false
        }).to({
            x: i,
            y: h
        }, Constants.EXCHANGE_TIME * 1000, createjs.Ease.linear);
        this.selectedChip = null;
        this.setInpunState(this.INPUT_STATE_LOCK)
    };
    b.prototype.matchMatches = function (e) {
        if (e.length != 0) {
            if (this.tutorial) {
                this.tutorial.onMatch()
            }
            if (e[0][0].isAcid()) {} else {
                switch (Utils.RandomRangeInt(0, 2)) {
                case 0:
                    SoundManager.g_instance.play(SoundManager.SOUND_MATCH_1);
                    break;
                case 1:
                    SoundManager.g_instance.play(SoundManager.SOUND_MATCH_2);
                    break;
                case 2:
                    SoundManager.g_instance.play(SoundManager.SOUND_MATCH_3);
                    break
                }
            }
            var d = false;
            for (var c = 0; c < e.length; c++) {
                for (var f = 0; f < e[c].length; f++) {
                    e[c][f].match(Chip.MATCH_REASON_SIMPLE)
                }
                if (e[c].length == 4) {
                    var h = false;
                    for (var g = 0; g < e[c].length; g++) {
                        if (e[c][g] == this.lastMovedChip) {
                            h = true;
                            d = true;
                            this.lastMovedChip.convertToBonus(Chip.BONUS_4);
                            this.lastMovedChip = null;
                            break
                        }
                    }
                    if (!h) {
                        d = true;
                        e[c][Utils.RandomRangeInt(1, 2)].convertToBonus(Chip.BONUS_4)
                    }
                }
                if (e[c].length >= 5) {
                    var h = false;
                    for (var g = 0; g < e[c].length; g++) {
                        if (e[c][g] == this.lastMovedChip) {
                            d = true;
                            h = true;
                            this.lastMovedChip.convertToBonus(Chip.BONUS_5);
                            this.lastMovedChip = null;
                            break
                        }
                    }
                    if (!h) {
                        d = true;
                        e[c][Utils.RandomRangeInt(1, e[c].length - 2)].convertToBonus(Chip.BONUS_5)
                    }
                }
            }
            if (!d) {
                for (var c = 0; c < e.length; c++) {
                    for (var f = 0; f < e[c].length; f++) {
                        if (e[c][f].isDoubleMatched()) {
                            e[c][f].convertToBonus(Chip.BONUS_CLOCK);
                            c = 100;
                            break
                        }
                    }
                }
            }
            this.setInpunState(this.INPUT_STATE_MATCHING)
        } else {
            this.shiftChips()
        }
    };
    b.prototype.matchBonus = function (n, m) {
        if (this.tutorial) {
            this.stopTutorial()
        }
        if (n.getBonusType() == Chip.BONUS_4) {
            SoundManager.g_instance.play(SoundManager.SOUND_LINE);
            var h = (n.getIndexY() == m.getIndexY());
            if (h) {
                var d = n.getIndexY();
                for (var g = 0; g < this.fieldWidth; g++) {
                    if (this.field[g][d] != null) {
                        this.field[g][d].match(Chip.MATCH_REASON_BONUS_EFFECT_4_HOR)
                    }
                }
                this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(+1200, 0)), this, n.x, n.y - Constants.CELL_SIZE / 2);
                this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(-1200, 0)), this, n.x, n.y - Constants.CELL_SIZE / 2)
            } else {
                var f = n.getIndexX();
                for (var g = 0; g < this.fieldHeight; g++) {
                    if (this.field[f][g] != null) {
                        this.field[f][g].match(Chip.MATCH_REASON_BONUS_EFFECT_4_VERT)
                    }
                }
                this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(0, -1200)), this, n.x, n.y - Constants.CELL_SIZE / 2);
                this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(0, +1200)), this, n.x, n.y - Constants.CELL_SIZE / 2)
            }
        }
        if (n.getBonusType() == Chip.BONUS_5) {
            SoundManager.g_instance.play(SoundManager.SOUND_KILL_COLOR);
            n.match(Chip.MATCH_REASON_I_AM_BONUS);
            var c = new createjs.Point(n.x, n.y);
            var l = m.getColorID();
            for (var k = 0; k < this.fieldWidth; k++) {
                for (var j = 0; j < this.fieldHeight; j++) {
                    if (this.field[k][j] != null) {
                        if (this.field[k][j].getColorID() == l) {
                            var e = new createjs.Point(this.field[k][j].x, this.field[k][j].y - Constants.CELL_SIZE / 2);
                            this.addGameObjectAtPos(new KillColorEffect(c, e), this, c.x, c.y);
                            this.field[k][j].match(Chip.MATCH_REASON_BONUS_EFFECT_5)
                        }
                    }
                }
            }
        }
        if (n.getBonusType() == Chip.BONUS_CLOCK) {
            n.match(Chip.MATCH_REASON_I_AM_BONUS);
            m.match(Chip.MATCH_REASON_EXCHANGE_WIHT_BONUS)
        }
        this.setInpunState(this.INPUT_STATE_MATCHING)
    };
    b.prototype.onExchangeEnded = function () {
        if (this.inputState == this.INPUT_STATE_WAIT_LOSE) {
            return
        }
        var e = (this.swapChip1 != null || this.swapChip2 != null);
        var d = false;
        if (e) {
            if (this.swapChip1.isBonus()) {
                d = true
            }
            if (this.swapChip2.isBonus()) {
                d = true
            }
        }
        var c = this.findMatches();
        if (c.length == 0) {
            if (!d) {
                if (e) {
                    this.exchangeChips(this.swapChip1, this.swapChip2);
                    this.swapChip1 = null;
                    this.swapChip2 = null
                } else {
                    this.setInpunState(this.INPUT_STATE_WAIT_SELECTION)
                }
            }
        } else {
            this.matchMatches(c)
        } if (e && d) {
            if (this.swapChip1.isBonus()) {
                this.matchBonus(this.swapChip1, this.swapChip2)
            }
            if (this.swapChip2.isBonus()) {
                this.matchBonus(this.swapChip2, this.swapChip1)
            }
        }
        this.sortChipColumns()
    };
    b.prototype.sortChipColumns = function () {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var d = 0; d < this.fieldHeight; d++) {
                if (this.field[c][d] != null) {
                    this.backChipsLayer.addChild(this.field[c][d])
                }
            }
        }
    };
    b.prototype.findMatches = function () {
        var d = Array();
        for (var h = 0; h < this.fieldHeight; h++) {
            for (var k = 0; k < this.fieldWidth;) {
                var l = -1;
                var g = 0;
                var j = new Array();
                for (var f = k; f < this.fieldWidth; f++) {
                    if (this.field[f][h] == null || this.field[f][h].isBonus() || this.field[f][h].getColorID() == -1) {
                        break
                    } else {
                        if (l == -1) {
                            l = this.field[f][h].getColorID()
                        }
                    } if (this.field[f][h].getColorID() == l) {
                        j.push(this.field[f][h]);
                        g++
                    } else {
                        break
                    }
                }
                if (g >= 3) {
                    d.push(j)
                }
                if (g != 0) {
                    k += g
                } else {
                    k++
                }
            }
        }
        for (var k = 0; k < this.fieldWidth; k++) {
            for (var h = 0; h < this.fieldHeight; h) {
                var l = -1;
                var g = 0;
                var j = new Array();
                for (var f = h; f < this.fieldHeight; f++) {
                    if (this.field[k][f] == null || this.field[k][f].isBonus() || this.field[k][f].getColorID() == -1) {
                        break
                    } else {
                        if (l == -1) {
                            l = this.field[k][f].getColorID()
                        }
                    } if (this.field[k][f].getColorID() == l) {
                        j.push(this.field[k][f]);
                        g++
                    } else {
                        break
                    }
                }
                if (g >= 3) {
                    d.push(j)
                }
                if (g != 0) {
                    h += g
                } else {
                    h++
                }
            }
        }
        var e = new Array();
        var c = this.fieldHeight - 1;
        for (var k = 0; k < this.fieldWidth; k++) {
            if (this.field[k][c] != null && this.field[k][c].isAcid()) {
                e.push(this.field[k][c])
            }
        }
        if (e.length != 0) {
            d.push(e)
        }
        return d
    };
    b.prototype.onMouseUp = function (c, d) {
        a.prototype.onMouseUp.call(this, c, d);
        this.selectedChip = null
    };
    b.prototype.onMouseDown = function (d, e) {
        a.prototype.onMouseDown.call(this, d, e);
        e -= this.y;
        if (this.inputState != this.INPUT_STATE_WAIT_SELECTION) {
            return
        }
        var c = this.checkChipSelection(d, e);
        if (c) {
            if (this.tutorial && !this.tutorial.isAccessibleChip(c)) {
                return
            }
            if (c == this.selectedChip) {
                return
            }
            if (!this.selectedChip) {
                this.selectedChip = c;
                this.selectedChip.select()
            } else {
                if (this.canExchange(this.selectedChip, c)) {
                    this.lastMovedChip = this.selectedChip;
                    this.exchangeChips(this.selectedChip, c)
                } else {
                    this.selectedChip.deselect();
                    this.selectedChip = c;
                    this.selectedChip.select()
                }
            }
        }
        this.checkEmptyCells()
    };
    b.prototype.onMouseMove = function (c, d) {
        a.prototype.onMouseMove.call(this, c, d);
        if (this.inputState != this.INPUT_STATE_WAIT_SELECTION) {
            return
        }
        this.onMouseDown(c, d)
    };
    b.prototype.checkEmptyCells = function () {
        for (var d = 0; d < this.fieldWidth; d++) {
            for (var e = 0; e < this.fieldHeight; e++) {
                var c = this.field[d][e];
                if (c) {
                    if (c.isOutOfField()) {
                        this.frontChipsLayer.addChild(c);
                        this.field[d][e] = null
                    }
                }
            }
        }
    };
    b.prototype.shiftChips = function () {
        this.matchInARow++;
        var d = false;
        for (var e = 0; e < this.fieldWidth; e++) {
            var c = 0;
            for (var g = this.fieldHeight - 1; g >= 0; g--) {
                if (this.field[e][g] == null) {
                    c++
                } else {
                    if (c != 0) {
                        d = true;
                        var f = g + c;
                        this.field[e][g].shiftDown(f, this.getYPosByYIndex(f));
                        this.field[e][f] = this.field[e][g];
                        this.field[e][g] = null
                    }
                }
            }
        }
        if (d) {
            this.setInpunState(this.INPUT_STATE_SHIFT)
        } else {
            this.spawnNewChips()
        }
    };
    b.prototype.spawnDefinedChips = function (d) {
        var f = 0;
        for (var c = 0; c < this.fieldWidth; c++) {
            var e = -1;
            for (var g = this.fieldHeight - 1; g >= 0; g--) {
                if (this.field[c][g] == null) {
                    if (e == -1) {
                        e = g
                    }
                    f++;
                    this.createChipWithColorID(c, g, (e - g) * 0.13, d[g][c])
                }
            }
        }
        if (f > 0) {
            this.setInpunState(this.INPUT_STATE_WAIT_SPAWN)
        } else {
            this.setInpunState(this.INPUT_STATE_WAIT_SELECTION)
        }
    };
    b.prototype.spawnNewChips = function () {
        var e = 0;
        for (var c = 0; c < this.fieldWidth; c++) {
            var d = -1;
            for (var f = this.fieldHeight - 1; f >= 0; f--) {
                if (this.field[c][f] == null) {
                    if (d == -1) {
                        d = f
                    }
                    e++;
                    if (this.tutorial) {
                        this.createChipWithColorID(c, f, (d - f) * 0.13, this.getTutorialSpawnNewID())
                    } else {
                        this.createChip(c, f, (d - f) * 0.13)
                    }
                }
            }
        }
        if (e > 0) {
            this.setInpunState(this.INPUT_STATE_WAIT_SPAWN)
        } else {
            this.setInpunState(this.INPUT_STATE_WAIT_SELECTION)
        }
    };
    b.prototype.checkChipSelection = function (d, g) {
        for (var e = 0; e < this.fieldWidth; e++) {
            for (var f = 0; f < this.fieldHeight; f++) {
                var c = this.field[e][f];
                if (c) {
                    if ((Math.abs(c.x - d) < Constants.CELL_SIZE / 2) && (c.y > g && c.y < g + Constants.CELL_SIZE)) {
                        return c
                    }
                }
            }
        }
        return null
    };
    b.prototype.setInpunState = function (h) {
        this.inputState = h;
        this.inputStateTime = 0;
        var g = (window.devicePixelRatio ? window.devicePixelRatio : 1);
        var f = window.innerWidth * g;
        var c = window.innerHeight * g;
        if (this.inputState == this.INPUT_STATE_WAIT_SELECTION) {
            this.matchInARow = 0;
            if (this.findMoves()) {
                var e = this.field[this.findedMatchPos1.x][this.findedMatchPos1.y];
                var d = this.field[this.findedMatchPos2.x][this.findedMatchPos2.y];
                this.moveHint = new MoveHint(this.findedMatchPos1.y != this.findedMatchPos2.y);
                this.moveHint.x = (e.x + d.x) / 2;
                this.moveHint.y = (e.y + d.y) / 2 - Constants.CELL_SIZE / 2 - 15
            } else {
                this.field[Utils.RandomRangeInt(0, this.fieldWidth - 1)][Utils.RandomRangeInt(0, this.fieldHeight - 1)].convertToBonus([Chip.BONUS_CLOCK, Chip.BONUS_4, Chip.BONUS_5][Utils.RandomRangeInt(0, 2)])
            }
            this.sortChipColumns()
        }
    };
    b.prototype.clearCell = function (d) {
        var c = d.getIndexX();
        var e = d.getIndexY();
        if (this.field[c][e] == d) {
            this.field[c][e] = null
        }
    };
    b.prototype.splashAt = function (c) {
        if (c.getColorID() > 6 || c.getColorID() < 0) {
            return
        }
        this.addGameObjectAtPos(new SplashEffect(c.getColorID()), this.frontChipsLayer, c.x, c.y - Constants.CELL_SIZE / 2 - 19)
    };
    b.prototype.startNextRound = function () {
        this.round++;
        this.scoreGoalBefore = this.scoreGoal;
        if (this.round < b.scoreGoalsByRound.length) {
            this.scoreGoal = b.scoreGoalsByRound[this.round]
        } else {
            var c = b.scoreGoalsByRound[b.scoreGoalsByRound.length - 1];
            this.scoreGoal = c + (this.round - b.scoreGoalsByRound.length + 1) * 7000
        }
        this.updateScoreProgressBar();
        if (this.round < b.timeLeftByRound.length) {
            this.timeLeft = b.timeLeftByRound[this.round]
        } else {
            this.timeLeft = 70
        }
        this.timeLeftTotal = this.timeLeft;
        this.timeLeftLabel.setText(Utils.IntToTimeString(Math.floor(this.timeLeft)));
        if (this.round >= 4) {
            this.chipTypesCount = 6
        }
        if (this.round >= this.firstAcidRound) {
            this.chipTypesCount = 7
        }
        if (this.round < this.acidProbs.length) {
            this.acidProb = this.acidProbs[this.round]
        } else {
            this.acidProb = 0.25
        }
        this.timerPaused = false;
        this.matchInARow = 0;
        this.scoreGoalLabel.setText(this.scoreGoal.toString());
        this.roundLabel.setText((this.round + 1).toString());
        if (this.round >= 9) {
            this.roundLabel.x = 149
        }
        if (b.needShowTutorial) {
            this.tutorial = new Tutorial();
            this.addGameObjectAt(this.tutorial, this);
            this.tutorial.onStartRound()
        } else {
            this.spawnNewChips()
        }
    };
    b.prototype.highlightArea = function (e, j, d, i) {
        var f = this.getXPosByXIndex(e) - Constants.CELL_SIZE / 2;
        var h = this.getYPosByYIndex(j) - Constants.CELL_SIZE;
        var k = this.getXPosByXIndex(d) - Constants.CELL_SIZE / 2;
        var c = this.getYPosByYIndex(i) - Constants.CELL_SIZE;
        var g = new TutorialHighlighter(f, h, k, c, this.getYPosByYIndex(0) - Constants.CELL_SIZE, this.getYPosByYIndex(7) - Constants.CELL_SIZE);
        this.addGameObjectAt(g, this);
        return g
    };
    b.prototype.finishRound = function () {
        SoundManager.g_instance.play(SoundManager.SOUND_WIN);
        this.addGameObjectAt(new EndRoundEffect(), this);
        this.timerPaused = true;
        this.setInpunState(this.INPUT_STATE_WAIT_NEXT_ROUND);
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var f = 0; f < this.fieldHeight; f++) {
                if (this.field[c][f] != null && this.field[c][f].isNormal()) {
                    this.field[c][f].fallDown()
                }
            }
        }
        try {
            if( !bannershown ){
                SG_Hooks.levelUp(this.round, this.score, function() {bannershown = false;});
                bannershown = true;
            }
        } catch (d) {
            console.log("error, SG_Hooks.levelUp(this.round, this.score)")
        }
    };
    b.prototype.lose = function () {
        this.addGameObjectAt(new TimeIsUpEffect(), this);
        SoundManager.g_instance.play(SoundManager.SOUND_ALARM);
        this.setInpunState(this.INPUT_STATE_WAIT_LOSE);
        this.timerPaused = true
    };
    b.prototype.haveMoves = function () {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var d = 0; d < this.fieldHeight; d++) {
                if (this.field[c][d] != null && this.field[c][d].isBonus()) {
                    return true
                }
            }
        }
        return true
    };
    b.prototype.updateScoreProgressBar = function () {
        var c = (this.score - this.scoreGoalBefore) / (this.scoreGoal - this.scoreGoalBefore);
        if (c > 1) {
            c = 1
        }
        this.scoreLeftShape.x = this.scoreProgressBar.x - (1 - c) * this.scoreProgressBar.getBounds().width
    };
    b.prototype.addPointsAt = function (c, e) {
        console.log("----CALLING addPointsAt----");
        if (c.getBonusType() == null) {
            var h = 40;
            switch (e) {
            case Chip.MATCH_REASON_EXCHANGE_WIHT_BONUS:
                h = 40;
                break;
            case Chip.MATCH_REASON_BONUS_EFFECT_5:
                h = 100;
                break;
            case Chip.MATCH_REASON_BONUS_EFFECT_4_HOR:
                h = 90;
                break;
            case Chip.MATCH_REASON_BONUS_EFFECT_4_VERT:
                h = 120;
                break;
            case Chip.MATCH_REASON_I_AM_BONUS:
                h = 150;
                break;
            default:
                h = 40 + this.matchInARow * 20;
                break
            }
            if (c.isAcid()) {
                h = 200
            }
            var g = new FlyingPoints(h);
            this.score += h;
            var f = c.x - Constants.CELL_SIZE / 2;
            var d = c.y - Constants.CELL_SIZE / 2;
            this.tryShowAwesome(f, d);
            this.tryShowSuperb(f, d);
            this.addGameObjectAtPos(g, this, f, d);
            this.updateScoreProgressBar()
        } else {
            if (c.getBonusType() == Chip.BONUS_CLOCK) {
                this.timeLeft += 15;
                SoundManager.g_instance.play(SoundManager.SOUND_ADD_TIME);
                this.addGameObjectAtPos(new AddTimeEffect(), this, c.x - Constants.CELL_SIZE / 2, c.y - Constants.CELL_SIZE / 2)
            }
        } if (this.score >= this.scoreGoal) {
            this.finishRound();
        }
    };
    b.prototype.tryShowSuperb = function (d, e) {
        if (this.matchInARow >= 3 && this.superbEffectTime != this.liveTime) {
            this.superbEffectTime = this.liveTime;
            var c = new SuperbEffect();
            this.addGameObjectAtPos(c, this, d, e);
            if (c.x < 120) {
                c.x = 120
            }
            if (c.x > Constants.ASSETS_WIDTH - 120) {
                c.x = Constants.ASSETS_WIDTH - 120
            }
            this.score += 500;
            return true
        }
        return false
    };
    b.prototype.tryShowAwesome = function (c, e) {
        if (this.matchInARow == 2 && this.awesomeEffectTime != this.liveTime) {
            this.awesomeEffectTime = this.liveTime;
            var d = new ShowAwesomeEffect();
            this.addGameObjectAtPos(d, this, c, e);
            if (d.x < 120) {
                d.x = 120
            }
            if (d.x > Constants.ASSETS_WIDTH - 120) {
                d.x = Constants.ASSETS_WIDTH - 120
            }
            this.score += 200;
            return true
        }
        return false
    };
    b.prototype.findMoves = function () {
        if (this.tutorial) {
            this.tutorial.setHintIndeces();
            return true
        }
        var e = [
            [2, -1],
            [3, 0],
            [2, 1]
        ];
        var g = [
            [-1, -1],
            [-2, 0],
            [-1, 1]
        ];
        var j = [
            [1, -1],
            [1, 1]
        ];
        for (var i = 0; i < this.fieldHeight; i++) {
            for (var c = 0; c < this.fieldWidth - 1; c++) {
                if (this.field[c][i].getColorID() == this.field[c + 1][i].getColorID()) {
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), e, c + 2, i)) {
                        return true
                    }
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), g, c - 1, i)) {
                        return true
                    }
                }
            }
        }
        for (var i = 0; i < this.fieldHeight; i++) {
            for (var c = 0; c < this.fieldWidth - 2; c++) {
                if (this.field[c][i].getColorID() == this.field[c + 2][i].getColorID()) {
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), j, c + 1, i)) {
                        return true
                    }
                }
            }
        }
        var d = [
            [-1, 2],
            [0, 3],
            [1, 2]
        ];
        var h = [
            [-1, -1],
            [0, -2],
            [1, -1]
        ];
        var f = [
            [-1, 1],
            [1, 1]
        ];
        for (var i = 0; i < this.fieldHeight - 1; i++) {
            for (var c = 0; c < this.fieldWidth; c++) {
                if (this.field[c][i].getColorID() == this.field[c][i + 1].getColorID()) {
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), d, c, i + 2)) {
                        return true
                    }
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), h, c, i - 1)) {
                        return true
                    }
                }
            }
        }
        for (var i = 0; i < this.fieldHeight - 2; i++) {
            for (var c = 0; c < this.fieldWidth; c++) {
                if (this.field[c][i].getColorID() == this.field[c][i + 2].getColorID()) {
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), f, c, i + 1)) {
                        return true
                    }
                }
            }
        }
        return false
    };
    b.prototype.findPattern = function (c, j, d, h, g, f) {
        if (d < 0) {
            return false
        }
        for (var e = 0; e < h.length; e++) {
            if (this.getColorAt(c + h[e][0], j + h[e][1]) == d) {
                this.findedMatchPos1 = new createjs.Point(g, f);
                this.findedMatchPos2 = new createjs.Point(c + h[e][0], j + h[e][1]);
                return true
            }
        }
        return false
    };
    b.prototype.setHintIndeces = function (d, f, c, e) {
        this.findedMatchPos1 = new createjs.Point(d, f);
        this.findedMatchPos2 = new createjs.Point(c, e)
    };
    b.prototype.getColorAt = function (c, d) {
        if (c < 0 || d < 0 || c >= this.fieldWidth || d >= this.fieldHeight || !this.field[c][d]) {
            return -1
        }
        return this.field[c][d].getColorID()
    };
    b.prototype.onShiftEnded = function () {
        if (this.liveTime != this.lastDropSoundTime) {
            this.lastDropSoundTime = this.liveTime;
            var c = Utils.RandomRangeInt(0, 2);
            while (c == this.lastDropID) {
                c = Utils.RandomRangeInt(0, 2)
            }
            this.lastDropID = c;
            switch (c) {
            case 0:
                this.lastSound = SoundManager.g_instance.play(SoundManager.SOUND_DROP_1);
                break;
            case 1:
                this.lastSound = SoundManager.g_instance.play(SoundManager.SOUND_DROP_2);
                break;
            case 2:
                this.lastSound = SoundManager.g_instance.play(SoundManager.SOUND_DROP_3);
                break
            }
            if (!this.lastSound) {
                //console.log("bug here " + c, this.lastSound)
            }
        }
    };
    b.prototype.configureYAlign = function () {
        if (Constants.g_isPC) {
            return
        }
        if (StateManager.g_instance.isLandscape()) {
            this.y = 100
        } else {
            if (Constants.SCREEN_HEIGHT < Constants.ASSETS_HEIGHT) {
                this.y = Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT
            } else {
                if (Constants.SCREEN_HEIGHT > Constants.ASSETS_HEIGHT) {
                    this.y = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
                    var d = new createjs.Shape();
                    d.graphics.beginFill("#438018");
                    d.graphics.drawRect(0, Constants.ASSETS_HEIGHT, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT);
                    d.graphics.endFill();
                    this.addChildAt(d, 0);
                    var c = new createjs.Shape();
                    c.graphics.beginFill("#438018");
                    c.graphics.drawRect(0, Constants.ASSETS_HEIGHT - Constants.SCREEN_HEIGHT, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT);
                    c.graphics.endFill();
                    this.addChild(c)
                }
            }
        }
    };
    b.prototype.getTutorialSpawnNewID = function () {
        if (this.spawnCounter >= this.spawnIDS.length) {
            return Utils.RandomRangeInt(1, this.chipTypesCount)
        }
        return this.spawnIDS[this.spawnCounter++]
    };
    b.prototype.stopTutorial = function () {
        b.needShowTutorial = false;
        if (this.tutorial) {
            this.tutorial.kill();
            this.tutorial = null
        }
    };
    b.needShowTutorial = true;
    b.timeLeftByRound = [180, 160, 130, 120, 110, 105, 105, 100, 95, 90, 85, 80];
    b.scoreGoalsByRound = [3000, 6000, 10000, 15000, 21000, 28000];
    return b
})(GameState);