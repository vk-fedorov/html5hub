(function(ea) {
    function h(a) {
        a = a || {};
        this.left = a.left || 0;
        this.top = a.top || 0;
        this.right = a.right || 0;
        this.bottom = a.bottom || 0;
        a.hasOwnProperty("x") && (this.left = a.x);
        a.hasOwnProperty("y") && (this.top = a.y);
        a.hasOwnProperty("width") && (this.right = this.left + a.width);
        a.hasOwnProperty("height") && (this.bottom = this.top + a.height);
        this.checkDimensions()
    }

    function Y() {
        this.map = {}
    }

    function A() {
        this.eventMap = {}
    }

    function F(a) {
        this.keyMap = {};
        g.addEventListener("keydown", c.bindFnc(this, this.keyDown), !1);
        g.addEventListener("keyup",
            c.bindFnc(this, this.keyUp), !1);
        g.addEventListener("keypress", c.bindFnc(this, this.keyPress), !1)
    }

    function t(a) {
        this.element = (a || {}).element;
        this.element.addEventListener("mousedown", c.bindFnc(this, this.mouseDown), !1);
        this.element.addEventListener("mousemove", c.bindFnc(this, this.mouseMove), !1);
        this.element.addEventListener("mouseup", c.bindFnc(this, this.mouseUp), !1);
        this.element.addEventListener("click", c.bindFnc(this, this.mouseClick), !1);
        this.element.addEventListener("touchstart", c.bindFnc(this, this.touchStart), !1);
        this.element.addEventListener("touchmove", c.bindFnc(this, this.touchMove), !1);
        this.element.addEventListener("touchend", c.bindFnc(this, this.touchEnd), !1);
        this.scaledMouseY = this.scaledMouseX = this.mouseY = this.mouseX = this.skipMouseUp = this.skipMouseDown = this.numTouch = 0;
        this.scaleY = this.scaleX = 1
    }

    function Z(a) {
        this.cookieMap = this.parseCookies()
    }

    function z(a) {
        a = a || {};
        this.appCache = a.appCache;
        this.reloadOnNewUpdate = a.reloadOnNewUpdate;
        this.finished = !1
    }

    function H(a) {
        var b = a || {}, e, f, m, L, d, s, P, h;
        a = c.paramStringToObject(g.location.search);
        var k = "1" === a["abtd-reset"] || "true" === a["abtd-reset"];
        this.tests = b.tests || {};
        this.testsMap = {};
        for (b = 0; b < this.tests.length; b += 1)
            if (m = this.tests[b], !m.shouldRun || m.shouldRun())
                if (s = m.testName, P = H.COOKIE_PREFIX + s, f = m.valueMap, h = m.expire, this.testsMap[s] = a[P] || C.getCookie(P, null), k || !this.testsMap[s] || !f.hasOwnProperty(this.testsMap[s])) {
                    d = 0;
                    m = [];
                    L = [];
                    for (e in f) f.hasOwnProperty(e) && (m.push(e), L.push({
                        min: d,
                        max: d + f[e]
                    }), d += f[e]);
                    f = Math.random();
                    for (e = 0; e < L.length; e += 1)
                        if (f >= L[e].min && f < L[e].max) {
                            this.testsMap[s] =
                                m[e];
                            C.setCookie(P, m[e], h || H.COOKIE_TTL);
                            break
                        }
                }
    }

    function k(a) {
        a = a || {};
        this.id = a.id || "anim-" + k.IDPOOL++;
        this.manager = a.manager;
        this.startValue = a.startValue || 0;
        this.endValue = a.endValue || 0;
        this.timeFunction = a.timeFunction || k.easingFunctions.linear;
        this.startCallback = a.startCallback || null;
        this.stepCallback = a.stepCallback || null;
        this.endCallback = a.endCallback || null;
        this.duration = a.hasOwnProperty("duration") ? a.duration : 0;
        this.prepared = !1;
        this.endTime = this.startTime = -1
    }

    function W(a) {
        var b = a || {}, e = 0;
        k.call(this,
            a);
        this.anims = b.anims || [];
        for (a = 0; a < this.anims.length; a += 1) e += this.anims[a].duration;
        this.duration = e;
        this.currentIndex = this.anims.length
    }

    function Q(a) {
        var b = a || {}, e = 0;
        k.call(this, a);
        this.anims = b.anims || [];
        if (b.hasOwnProperty("applyDuration"))
            for (this.duration = b.applyDuration, a = 0; a < this.anims.length; a += 1) this.anims[a].duration = this.duration;
        else {
            for (a = 0; a < this.anims.length; a += 1) b = this.anims[a], b.duration > e && (e = b.duration);
            this.duration = e
        }
    }

    function $(a) {
        a = a || {};
        var b;
        this.anims = {};
        if (a.anims)
            for (b in a.anims) a.anims.hasOwnProperty(b) &&
                (this.anims[b] = a.anims[b], this.anims[b].manager = this);
        this.activeAnims = []
    }

    function R() {}

    function B(a) {
        a = a || {};
        this.x = a.x || 0;
        this.y = a.y || 0;
        this.anchorX = a.anchorX || 0;
        this.anchorY = a.anchorY || 0;
        this.parent = null
    }

    function S(a) {
        var b = a || {};
        B.call(this, a);
        h.call(this, a);
        this.fillStyle = b.fillStyle || "#000000";
        this.opacity = b.hasOwnProperty("opacity") ? b.opacity : 1;
        this.visible = !0
    }

    function y(a) {
        var b = a || {};
        B.call(this, a);
        this.visible = b.hasOwnProperty("visible") ? b.visible : !0;
        this.children = [];
        this.scaleX = b.hasOwnProperty("scaleX") ?
            b.scaleX : 1;
        this.scaleY = b.hasOwnProperty("scaleY") ? b.scaleY : 1;
        this.opacity = b.hasOwnProperty("opacity") ? b.opacity : 1;
        b.hasOwnProperty("scale") && (this.scaleX = this.scaleY = b.scale)
    }

    function I(a) {
        var b = a || {};
        B.call(this, a);
        this.width = b.width || 0;
        this.height = b.height || 0;
        this.image = b.img || b.image || new Image;
        this.sourceRect = b.sourceRect || new h({
            x: b.sourceX || 0,
            y: b.sourceY || 0,
            width: b.sourceWidth || this.image.width,
            height: b.sourceHeight || this.image.height
        });
        this.angle = b.angle || 0;
        this.scaleX = b.scaleX || 1;
        this.scaleY =
            b.scaleY || 1;
        b.hasOwnProperty("scale") && (this.scaleX = this.scaleY = b.scale);
        this.opacity = b.opacity || 1;
        this.visible = b.hasOwnProperty("visible") ? b.visible || !1 : !0
    }

    function aa(a) {
        var b = a || {};
        B.call(this, a);
        this.width = b.width || 0;
        this.height = b.height || 0;
        this.scaleX = b.scaleX || 1;
        this.scaleY = b.scaleY || 1;
        this.angle = b.angle || 0;
        this.pattern = b.pattern || null;
        this.offsetX = b.offsetX || 0;
        this.offsetY = b.offsetY || 0;
        this.imageWidth = b.imageWidth || 0;
        this.imageHeight = b.imageHeight || 0;
        this.imageScaleX = b.imageScaleX || 1;
        this.imageScaleY =
            b.imageScaleY || 1;
        this.imageOffsetX = b.imageOffsetX || 0;
        this.imageOffsetY = b.imageOffsetY || 0;
        b.hasOwnProperty("imageScale") && (this.imageScaleX = this.imageScaleY = b.imageScale)
    }

    function T(a) {
        this.applyFromOptions(a)
    }

    function p(a) {
        var b = a || {};
        this.applyFromOptions(a);
        this.eventMap = {};
        this.id = b.id || "button-" + p.IDPOOL++;
        this.state = p.states.UP;
        this.enabled = !0;
        b.clickFunction && this.addEventListener(p.events.CLICK, b.clickFunction)
    }

    function M(a) {
        var b = a || {};
        B.call(this, a);
        this.textAlign = b.textAlign || "left";
        this.textBaseline =
            b.textBaseline || "top";
        this.fillStyle = b.fillStyle || "#000000";
        this.text = b.text || "";
        this.angle = b.angle || 0;
        this.scaleX = b.hasOwnProperty("scaleX") ? b.scaleX : 1;
        this.scaleY = b.hasOwnProperty("scaleY") ? b.scaleY : 1;
        this.opacity = b.hasOwnProperty("opacity") ? b.opacity : 1;
        this.visible = b.hasOwnProperty("visible") ? b.visible : !0;
        b.hasOwnProperty("scale") && (this.scaleX = this.scaleY = b.scale)
    }

    function q(a) {
        this.game = (a || {}).game || null;
        this.pageObj = {
            page: N.pathname,
            title: u.title
        };
        this.init()
    }

    function U(a) {
        a = a || {};
        this.context =
            a.context || null;
        this.image = a.image || null;
        this.spriteMap = a.spriteMap || {};
        this.sprites = {};
        this.canvases = {}
    }

    function O(a) {
        var b = new Image;
        b.preSrc = a;
        b.onload = O.imgOnLoad;
        b.onerror = O.imgOnError;
        b.alreadyLoaded = !1;
        b.load = function(a, b) {
            this.onLoadFunction = a;
            this.onErrorFunction = b;
            this.src = this.preSrc;
            this.complete && !this.alreadyLoaded && (this.alreadyLoaded = !0, this.onLoadFunction(this))
        };
        return b
    }

    function V(a) {
        var b = a || {};
        y.call(this, a);
        this.horizontalAlign = b.horizontalAlign || "center";
        this.verticalAlign =
            b.verticalAlign || "middle";
        this.width = b.width || 0;
        this.height = b.height || 0;
        this.number = Math.floor(b.number) || 0;
        this.scaleX = b.scaleX || 1;
        this.scaleY = b.scaleY || 1;
        this.numberSpacing = b.numberSpacing || 0;
        b.hasOwnProperty("scale") && (this.scaleX = this.scaleY = b.scale);
        this.baseSprite = b.numberSprite;
        this.updateNumber()
    }

    function ba(a) {
        var b = a || {};
        y.call(this, a);
        this.width = b.width || 0;
        this.height = b.height || 0;
        this.bestScore = b.bestScore || 0;
        this.score = b.score || 0;
        this.isBestScoreNew = !1;
        this.board = b.boardSprite;
        this.board.width =
            this.width;
        this.board.height = this.height;
        this.addChild(this.board);
        this.newLabel = b.newLabelSprite;
        this.newLabel.x = 360;
        this.newLabel.y = 150;
        this.newLabel.width = 60;
        this.newLabel.height = 30;
        this.newLabel.visible = !1;
        this.addChild(this.newLabel);
        this.medalsSprite = b.medalsSprite || null;
        this.medalsSprite.x = 67;
        this.medalsSprite.y = 111;
        this.medalsSprite.width = 110;
        this.medalsSprite.height = 110;
        this.addChild(this.medalsSprite);
        this.flappyNumbersScore = new V({
            x: 520,
            y: 105,
            horizontalAlign: "right",
            verticalAlign: "top",
            number: this.score,
            numberSprite: b.numberSprite
        });
        this.addChild(this.flappyNumbersScore);
        this.flappyNumbersBestScore = new V({
            x: 520,
            y: 210,
            horizontalAlign: "right",
            verticalAlign: "top",
            number: this.bestScore,
            numberSprite: b.numberSprite
        });
        this.addChild(this.flappyNumbersBestScore)
    }

    function D(a) {
        a = a || {};
        this.imgs = {};
        this.imgCount = this.imgLoaded = 0;
        this.imgListObj = a.images
    }

    function J(a) {
        var b = a || {};
        this.sounds = {};
        this.soundMap = a.sounds;
        this.enabled = createjs.WebAudioPlugin.isSupported() ? createjs.Sound.initializeDefaultPlugins() : !1;
        g.cordova && (this.enabled = !0, this.cordovaSounds = {});
        this.mute = b.hasOwnProperty("mute") ? b.mute : !1;
        this.soundsError = this.soundsCount = this.soundsLoaded = 0
    }

    function E(a) {
        var b = (a || {}).buttons || [];
        this.buttons = [];
        this.hoveredButton = this.downedButton = null;
        for (a = 0; a < b.length; a += 1) this.addButton(b[a])
    }

    function l(a) {
        a = a || {};
        this.game = a.game || null;
        this.shouldShowFunction = a.shouldShowFunction || function() {
            return !1
        };
        this.enabled = a.hasOwnProperty("enabled") ? a.enabled : !0;
        this.platforms = a.platforms || l.platforms.DESKTOP |
            l.platforms.MOBILE | l.platforms.TABLET;
        this.started = this.initted = !1
    }

    function w(a) {
        var b = a || {};
        l.call(this, a);
        this.adSlot = null;
        this.unitName = b.unitName || null;
        this.size = b.size || null;
        this.divId = b.divId || null;
        this.containerDivId = b.containerDivId || null;
        this.started = this.hasGoogleTag = !1;
        g.googletag ? this.hasGoogleTag = !0 : this.enabled = !1;
        w.slotsToDefine.push(this)
    }

    function v(a) {
        a = a || {};
        this.interstitialScreen = a.interstitialScreen;
        this.interstitialClose = a.interstitialClose;
        this.gameOverAdScreen = a.gameOverAdScreen;
        this.interstitialAds = a.interstitialAds || [];
        this.currentInterstitialAd = null;
        this.gameOverAds = a.gameOverAds || [];
        this.currentGameOverAd = null;
        this.lastGameOverAdRotate = 0;
        this.enabled = !0;
        this.gameOverHideCallback = this.interestitialHideCallback = null;
        this.game = a.game || null;
        this.events = v.events;
        this.desktopPage = !1;
        this.init()
    }

    function n(a) {
        var b = a || {};
        I.call(this, a);
        this.startY = this.y;
        this.rectWidth = b.rectWidth || this.width;
        this.rectHeight = b.rectHeight || this.height;
        this.rect = new h({
            x: this.x - this.rectWidth / 2,
            y: this.y - this.rectHeight / 2,
            width: this.rectWidth,
            height: this.rectHeight
        });
        this.speedY = this.speedX = 0;
        this.stallingIndex = b.stallingIndex || 0;
        this.started = !1;
        this.imgs = b.birdImages || [];
        this.spriteSpeed = b.spriteSpeed || 150;
        this.state = n.states.cruising;
        this.previousIndex = 0
    }

    function ca(a) {
        var b = a || {};
        y.call(this, a);
        this.gapRect = b.gapRect || new h;
        this.pipesticleHeight = b.pipesticleHeight || 0;
        this.needsToBeDestroyed = this.passed = !1;
        this.rect = new h({
            left: this.x,
            top: this.y,
            right: this.x + this.gapRect.getWidth(),
            bottom: this.y + this.gapRect.getHeight()
        });
        this.pipeTiteRect = new h({
            left: 0,
            top: 0,
            right: this.gapRect.getWidth(),
            bottom: this.gapRect.top
        });
        this.pipeMiteRect = new h({
            left: 0,
            top: this.gapRect.bottom,
            right: this.gapRect.getWidth(),
            bottom: this.pipesticleHeight
        });
        this.pipeFullTopSprite = b.pipeFullTopSprite.copy();
        this.pipeFullTopSprite.x = this.pipeTiteRect.left;
        this.pipeFullTopSprite.y = this.pipeTiteRect.top;
        this.pipeFullTopSprite.width = this.pipeTiteRect.getWidth();
        this.pipeFullTopSprite.height = this.pipeTiteRect.getHeight();
        this.pipeFullTopSprite.sourceRect.setY(this.pipeFullTopSprite.sourceRect.getHeight() - this.pipeTiteRect.getHeight());
        this.pipeFullTopSprite.sourceRect.setHeight(this.pipeTiteRect.getHeight());
        this.addChild(this.pipeFullTopSprite);
        this.pipeFullBottomSprite = b.pipeFullBottomSprite.copy();
        this.pipeFullBottomSprite.x = this.pipeMiteRect.left;
        this.pipeFullBottomSprite.y = this.pipeMiteRect.top;
        this.pipeFullBottomSprite.width = this.pipeMiteRect.getWidth();
        this.pipeFullBottomSprite.height = this.pipeMiteRect.getHeight();
        this.pipeFullBottomSprite.sourceRect.setHeight(this.pipeMiteRect.getHeight());
        this.addChild(this.pipeFullBottomSprite)
    }

    function d() {
        this.canvas = r.get("gameCanvas");
        this.context = this.canvas.getContext("2d");
        this.startingWidth = this.canvas.width;
        this.startingHeight = this.canvas.height;
        this.aspectRatio = this.canvas.width / this.canvas.height;
        this.scaleY = this.scaleX = this.canvas.width / d.BASEWIDTH;
        this.animationFrameId = -1;
        this.fixedAccumulator = this.frameCount = this.lastMainLoopTime = 0;
        this.initialUrlQuery = c.paramStringToObject(g.location.search);
        this.customAdFrequency = this.initialUrlQuery.hasOwnProperty("adfreq") ? parseInt(this.initialUrlQuery.adfreq, 10) : 5;
        isNaN(this.customAdFrequency) ? this.customAdFrequency = 5 : 0 >= this.customAdFrequency && (this.customAdFrequency = 5);
        this.numPlays = 0;
        this.logicLooping = this.looping = this.started = !1;
        this.state = d.states.none;
        this.changingState = !1;
        this.score = 0;
        this.bestScore = parseInt(C.getCookie(d.BESTSCORECOOKIE, "0"), 10);
        isNaN(this.bestScore) && (this.bestScore = 0);
        this.kikShareIdCreated = this.kikEnabled = this.allLoaded =
            this.ignoreMouseDown = !1;
        this.kikShareId = null;
        this.crazygames = this.initialUrlQuery.hasOwnProperty("crazygames") ? "1" === this.initialUrlQuery.crazygames || "true" === this.initialUrlQuery.crazygames : !1;
        this.debug = !1;
        this.debugStuff = {
            lastFrameCapture: 0,
            lastFrameCaptureTime: 0,
            output: null,
            frameCounter: null
        };
        this.patterns = {};
        this.debug && this.setupDebug();
        g.trace = c.bindFnc(this, this.trace);
        this.firstTap = !0;
        this.pipeDistance = 0;
        this.keyboardManager = new F;
        this.mouseManager = new t({
            element: r.get("touchOverlay")
        });
        this.buttonManager = new E;
        this.imgManager = new D({
            images: d.IMGS
        });
        this.soundManager = new J({
            sounds: d.SOUNDS,
            mute: "1" !== C.getCookie(d.SOUNDSETTINGCOOKIE, "1")
        });
        this.animManager = new $;
        this.loadingStage = new y({
            x: 0,
            y: 0,
            scaleX: this.scaleX,
            scaleY: this.scaleY
        });
        this.progressBg = new S({
            x: 0,
            y: d.BASEHEIGHT / 2 - 25,
            width: d.BASEWIDTH,
            height: 50,
            fillStyle: "#000000"
        });
        this.loadingStage.addChild(this.progressBg);
        this.progressText = new M({
            x: d.BASEWIDTH / 2,
            y: d.BASEHEIGHT / 2 - 50,
            textAlign: "center",
            textBaseline: "middle",
            text: "0%"
        });
        this.loadingStage.addChild(this.progressText);
        this.progressBar = new S({
            x: 0,
            y: d.BASEHEIGHT / 2 - 25,
            width: 0,
            height: 50,
            fillStyle: "#00bb00"
        });
        this.loadingStage.addChild(this.progressBar);
        this.progressVersion = new M({
            x: d.BASEWIDTH,
            y: 0,
            textAlign: "right",
            textBaseline: "top",
            text: "v" + g.FLAPPYLIVESVERSION
        });
        this.loadingStage.addChild(this.progressVersion);
        this.stage = new y({
            x: 0,
            y: 0,
            scaleX: this.scaleX,
            scaleY: this.scaleY,
            visible: !1
        });
        this.transitionOverlay = new S({
            x: 0,
            y: 0,
            width: d.BASEWIDTH,
            height: d.BASEHEIGHT,
            opacity: 0,
            fillStyle: "#000000"
        });
        this.abTestManager = new H({
            tests: [{
                testName: "desktopredirect20140321",
                valueMap: {
                    redirect: 0.01,
                    stay: 0.99
                },
                shouldRun: function() {
                    if (!c.isMobile.any() && "/game.html" !== g.location.pathname && !C.hasCookie(d.BESTSCORECOOKIE)) try {
                        return g.top === g
                    } catch (a) {}
                    return !1
                },
                expire: 5184E3
            }]
        });
        if (this.abTestManager.isTestValue("desktopredirect20140321", "redirect")) {
            var a = "/desktop.html";
            0 < c.countProps(this.initialUrlQuery) && (a += "?" + c.objectToParamString(this.initialUrlQuery));
            g.location.href = a
        }
        this.appCacheManager =
            new z({
                appCache: g.applicationCache,
                reloadOnNewUpdate: !0
            });
        a = new v({
            interstitialScreen: r.get("adInterstitialScreen"),
            interstitialClose: r.get("adInterstitialClose"),
            gameOverAdScreen: r.get("adGameOverScreen"),
            game: this,
            interstitialAds: [new w({
                    game: this,
                    shouldShowFunction: c.bindFnc(this, function() {
                        return false;
                    }),
                    platforms: l.platforms.MOBILE,
                    unitName: "/20973361/flappylives_mobile_300x250",
                    size: [300, 250],
                    divId: "div-gpt-ad-1393968910515-0",
                    enabled: !1
                }), new w({
                    game: this,
                    shouldShowFunction: c.bindFnc(this, function() {
                        return false;
                    }),
                    platforms: l.platforms.MOBILE,
                    unitName: "20973361/flappylives_mobile_300x250_v2",
                    size: [300, 250],
                    divId: "div-gpt-ad-1396544776922-1",
                    enabled: !0
                }), new w({
                    game: this,
                    shouldShowFunction: c.bindFnc(this, function() {
                        return false;
                    }),
                    platforms: l.platforms.MOBILE,
                    unitName: "/20973361/flappylives_mobile_320x50",
                    size: [320, 50],
                    divId: "div-gpt-ad-1394482035150-0",
                    enabled: !1
                }),
                new w({
                    game: this,
                    shouldShowFunction: c.bindFnc(this, function() {
                        return false;
                    }),
                    platforms: l.platforms.TABLET,
                    unitName: "/20973361/iPad_Interstitial_Portrait_768x1024",
                    size: [728, 90],
                    divId: "div-gpt-ad-1394485156180-0",
                    enabled: !1
                }), new w({
                    game: this,
                    shouldShowFunction: c.bindFnc(this, function() {
                        return false;
                    }),
                    platforms: l.platforms.TABLET,
                    unitName: "/20973361/flappylives_gameover_web_iPad_300x600",
                    size: [300, 600],
                    divId: "div-gpt-ad-1395705405426-0",
                    enabled: !0
                }), new w({
                    game: this,
                    shouldShowFunction: c.bindFnc(this, function() {
                        return false;
                    }),
                    platforms: l.platforms.DESKTOP,
                    unitName: "/20973361/flappylives_gameover_web_300x600",
                    size: [300, 600],
                    divId: "div-gpt-ad-1393896859127-0",
                    enabled: !1
                }), new w({
                    game: this,
                    shouldShowFunction: c.bindFnc(this, function() {
                        return false;
                    }),
                    platforms: l.platforms.DESKTOP,
                    unitName: "/20973361/flappylives_gameover_web_300x600_v2",
                    size: [300,
                        600
                    ],
                    divId: "div-gpt-ad-1396544776922-0",
                    enabled: 3 !== this.customAdFrequency && 4 !== this.customAdFrequency
                }), new w({
                    game: this,
                    shouldShowFunction: c.bindFnc(this, function() {
                        return false;
                    }),
                    platforms: l.platforms.DESKTOP,
                    unitName: "/20973361/flappylives_every3end_web_300x600",
                    size: [300, 600],
                    divId: "div-gpt-ad-1396054232491-0",
                    enabled: 3 === this.customAdFrequency
                }), new w({
                    game: this,
                    shouldShowFunction: c.bindFnc(this, function() {
                        return false;
                    }),
                    platforms: l.platforms.DESKTOP,
                    unitName: "/20973361/flappylives_every4end_web_300x600",
                    size: [300, 600],
                    divId: "div-gpt-ad-1396054328730-0",
                    enabled: 4 === this.customAdFrequency
                })
            ],
            gameOverAds: [new w({
                game: this,
                shouldShowFunction: c.bindFnc(this, function() {
                    return false;
                }),
                platforms: l.platforms.MOBILE,
                unitName: "/20973361/Banner_Portrait_top_320x50",
                size: [320, 50],
                divId: "div-gpt-ad-1394432499237-0",
                enabled: !1
            }), new w({
                game: this,
                shouldShowFunction: c.bindFnc(this, function() {
                    return false;
                }),
                platforms: l.platforms.TABLET,
                unitName: "/20973361/Banner_Portrait_top_728x90",
                size: [728, 90],
                divId: "div-gpt-ad-1394437615413-0",
                enabled: !1
            })]
        });
        try {
            g.top !== g && "/desktop.html" === g.top.location.pathname ? g.top.hasOwnProperty("adManager") ? (this.adManager = g.top.adManager, this.adManager.setGame(this)) : g.top.addEventListener("load", c.bindFnc(this, function(a) {
                a.currentTarget.hasOwnProperty("adManager") && (this.adManager = a.currentTarget.adManager, this.adManager.setGame(this), this.scouter.initAdManagerListeners())
            }), !1) : this.adManager = a
        } catch (b) {
            this.adManager =
                a
        }
        this.updateContext = {
            scrollSpeed: 0
        };
        this.bindedMainLoop = c.bindFnc(this, this.mainLoop);
        this.bindedRequestAnimationFrame = c.bindFnc(this, function() {
            g.requestAnimationFrame(this.bindedMainLoop)
        });
        this.scouter = new q({
            game: this
        });
        (function() {
            for (var a = 0, b = ["webkit", "moz"], m = 0; m < b.length && !g.requestAnimationFrame; ++m) g.requestAnimationFrame = g[b[m] + "RequestAnimationFrame"], g.cancelAnimationFrame = g[b[m] + "CancelAnimationFrame"] || g[b[m] + "CancelRequestAnimationFrame"];
            g.requestAnimationFrame || (g.requestAnimationFrame =
                function(b, m) {
                    var f = (new Date).getTime(),
                        c = Math.max(0, 16 - (f - a)),
                        d = g.setTimeout(function() {
                            b(f + c)
                        }, c);
                    a = f + c;
                    return d
                });
            g.cancelAnimationFrame || (g.cancelAnimationFrame = function(a) {
                G(a)
            })
        })();
        this.init()
    }
    var g = ea,
        x = g.navigator,
        u = g.document,
        N = g.location,
        K = g.setTimeout,
        G = g.clearTimeout,
        da = g.open,
        X = g.console || {
            log: function() {},
            warn: function() {},
            error: function() {}
        };
    this.createjs = this.createjs || {};
    (function() {
        var a = createjs.SoundJS = createjs.SoundJS || {};
        a.version = "0.5.2";
        a.buildDate = "Thu, 12 Dec 2013 23:33:37 GMT"
    })();
    this.createjs = this.createjs || {};
    (function() {
        var a = function() {}, b = a.prototype;
        a.initialize = function(a) {
            a.addEventListener = b.addEventListener;
            a.on = b.on;
            a.removeEventListener = a.off = b.removeEventListener;
            a.removeAllEventListeners = b.removeAllEventListeners;
            a.hasEventListener = b.hasEventListener;
            a.dispatchEvent = b.dispatchEvent;
            a._dispatchEvent = b._dispatchEvent;
            a.willTrigger = b.willTrigger
        };
        b._listeners = null;
        b._captureListeners = null;
        b.initialize = function() {};
        b.addEventListener = function(a, b, m) {
            var c;
            c = m ? this._captureListeners =
                this._captureListeners || {} : this._listeners = this._listeners || {};
            var d = c[a];
            return d && this.removeEventListener(a, b, m), d = c[a], d ? d.push(b) : c[a] = [b], b
        };
        b.on = function(a, b, m, c, d, s) {
            return b.handleEvent && (m = m || b, b = b.handleEvent), m = m || this, this.addEventListener(a, function(a) {
                b.call(m, a, d);
                c && a.remove()
            }, s)
        };
        b.removeEventListener = function(a, b, m) {
            if (m = m ? this._captureListeners : this._listeners) {
                var c = m[a];
                if (c)
                    for (var d = 0, s = c.length; s > d; d++)
                        if (c[d] == b) {
                            1 == s ? delete m[a] : c.splice(d, 1);
                            break
                        }
            }
        };
        b.off = b.removeEventListener;
        b.removeAllEventListeners = function(a) {
            a ? (this._listeners && delete this._listeners[a], this._captureListeners && delete this._captureListeners[a]) : this._listeners = this._captureListeners = null
        };
        b.dispatchEvent = function(a, b) {
            if ("string" == typeof a) {
                var m = this._listeners;
                if (!m || !m[a]) return !1;
                a = new createjs.Event(a)
            }
            if (a.target = b || this, a.bubbles && this.parent) {
                for (var c = this, m = [c]; c.parent;) m.push(c = c.parent);
                for (var d = m.length, c = d - 1; 0 <= c && !a.propagationStopped; c--) m[c]._dispatchEvent(a, 1 + (0 == c));
                for (c = 1; d >
                    c && !a.propagationStopped; c++) m[c]._dispatchEvent(a, 3)
            } else this._dispatchEvent(a, 2);
            return a.defaultPrevented
        };
        b.hasEventListener = function(a) {
            var b = this._listeners,
                m = this._captureListeners;
            return !!(b && b[a] || m && m[a])
        };
        b.willTrigger = function(a) {
            for (var b = this; b;) {
                if (b.hasEventListener(a)) return !0;
                b = b.parent
            }
            return !1
        };
        b.toString = function() {
            return "[EventDispatcher]"
        };
        b._dispatchEvent = function(a, b) {
            var m, c = 1 == b ? this._captureListeners : this._listeners;
            if (a && c && (c = c[a.type]) && (m = c.length)) {
                a.currentTarget =
                    this;
                a.eventPhase = b;
                a.removed = !1;
                for (var c = c.slice(), d = 0; m > d && !a.immediatePropagationStopped; d++) {
                    var s = c[d];
                    s.handleEvent ? s.handleEvent(a) : s(a);
                    a.removed && (this.off(a.type, s, 1 == b), a.removed = !1)
                }
            }
        };
        createjs.EventDispatcher = a
    })();
    this.createjs = this.createjs || {};
    (function() {
        var a = function(a, b, m) {
            this.initialize(a, b, m)
        }, b = a.prototype;
        b.type = null;
        b.target = null;
        b.currentTarget = null;
        b.eventPhase = 0;
        b.bubbles = !1;
        b.cancelable = !1;
        b.timeStamp = 0;
        b.defaultPrevented = !1;
        b.propagationStopped = !1;
        b.immediatePropagationStopped = !1;
        b.removed = !1;
        b.initialize = function(a, b, m) {
            this.type = a;
            this.bubbles = b;
            this.cancelable = m;
            this.timeStamp = (new Date).getTime()
        };
        b.preventDefault = function() {
            this.defaultPrevented = !0
        };
        b.stopPropagation = function() {
            this.propagationStopped = !0
        };
        b.stopImmediatePropagation = function() {
            this.immediatePropagationStopped = this.propagationStopped = !0
        };
        b.remove = function() {
            this.removed = !0
        };
        b.clone = function() {
            return new a(this.type, this.bubbles, this.cancelable)
        };
        b.toString = function() {
            return "[Event (type=" + this.type +
                ")]"
        };
        createjs.Event = a
    })();
    this.createjs = this.createjs || {};
    (function() {
        createjs.indexOf = function(a, b) {
            for (var e = 0, f = a.length; f > e; e++)
                if (b === a[e]) return e;
            return -1
        }
    })();
    this.createjs = this.createjs || {};
    (function() {
        createjs.proxy = function(a, b) {
            var e = Array.prototype.slice.call(arguments, 2);
            return function() {
                return a.apply(b, Array.prototype.slice.call(arguments, 0).concat(e))
            }
        }
    })();
    this.createjs = this.createjs || {};
    (function() {
        function a() {
            throw "Sound cannot be instantiated";
        }

        function b(a, b) {
            this.init(a,
                b)
        }

        function e() {}
        a.DELIMITER = "|";
        a.INTERRUPT_ANY = "any";
        a.INTERRUPT_EARLY = "early";
        a.INTERRUPT_LATE = "late";
        a.INTERRUPT_NONE = "none";
        a.PLAY_INITED = "playInited";
        a.PLAY_SUCCEEDED = "playSucceeded";
        a.PLAY_INTERRUPTED = "playInterrupted";
        a.PLAY_FINISHED = "playFinished";
        a.PLAY_FAILED = "playFailed";
        a.SUPPORTED_EXTENSIONS = "mp3 ogg mpeg wav m4a mp4 aiff wma mid".split(" ");
        a.EXTENSION_MAP = {
            m4a: "mp4"
        };
        a.FILE_PATTERN = /^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?))?([/.]*?(?:[^?]+)?\/)?((?:[^/?]+)\.(\w+))(?:\?(\S+)?)?$/;
        a.defaultInterruptBehavior =
            a.INTERRUPT_NONE;
        a.alternateExtensions = [];
        a._lastID = 0;
        a.activePlugin = null;
        a._pluginsRegistered = !1;
        a._masterVolume = 1;
        a._masterMute = !1;
        a._instances = [];
        a._idHash = {};
        a._preloadHash = {};
        a._defaultSoundInstance = null;
        a.addEventListener = null;
        a.removeEventListener = null;
        a.removeAllEventListeners = null;
        a.dispatchEvent = null;
        a.hasEventListener = null;
        a._listeners = null;
        createjs.EventDispatcher.initialize(a);
        a._sendFileLoadEvent = function(b) {
            if (a._preloadHash[b])
                for (var e = 0, f = a._preloadHash[b].length; f > e; e++) {
                    var c =
                        a._preloadHash[b][e];
                    if (a._preloadHash[b][e] = !0, a.hasEventListener("fileload")) {
                        var d = new createjs.Event("fileload");
                        d.src = c.src;
                        d.id = c.id;
                        d.data = c.data;
                        a.dispatchEvent(d)
                    }
                }
        };
        a.getPreloadHandlers = function() {
            return {
                callback: createjs.proxy(a.initLoad, a),
                types: ["sound"],
                extensions: a.SUPPORTED_EXTENSIONS
            }
        };
        a.registerPlugin = function(b) {
            try {
                X.log("createjs.Sound.registerPlugin has been deprecated. Please use registerPlugins.")
            } catch (e) {}
            return a._registerPlugin(b)
        };
        a._registerPlugin = function(b) {
            return a._pluginsRegistered = !0, null == b ? !1 : b.isSupported() ? (a.activePlugin = new b, !0) : !1
        };
        a.registerPlugins = function(b) {
            for (var e = 0, f = b.length; f > e; e++)
                if (a._registerPlugin(b[e])) return !0;
            return !1
        };
        a.initializeDefaultPlugins = function() {
            return null != a.activePlugin ? !0 : a._pluginsRegistered ? !1 : a.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin]) ? !0 : !1
        };
        a.isReady = function() {
            return null != a.activePlugin
        };
        a.getCapabilities = function() {
            return null == a.activePlugin ? null : a.activePlugin._capabilities
        };
        a.getCapability = function(b) {
            return null ==
                a.activePlugin ? null : a.activePlugin._capabilities[b]
        };
        a.initLoad = function(b, e, f, c, d) {
            b = b.replace(d, "");
            b = a.registerSound(b, f, c, !1, d);
            return null == b ? !1 : b
        };
        a.registerSound = function(e, f, c, d, g) {
            if (!a.initializeDefaultPlugins()) return !1;
            var h = (e instanceof Object && (g = f, f = e.id, c = e.data, e = e.src), a.alternateExtensions.length) ? a._parsePath2(e, "sound", f, c) : a._parsePath(e, "sound", f, c);
            if (null == h) return !1;
            null != g && (e = g + e, h.src = g + h.src);
            null != f && (a._idHash[f] = h.src);
            g = null;
            null != c && (isNaN(c.channels) ? isNaN(c) ||
                (g = parseInt(c)) : g = parseInt(c.channels));
            var k = a.activePlugin.register(h.src, g);
            if (null != k && (null != k.numChannels && (g = k.numChannels), b.create(h.src, g), null != c && isNaN(c) ? c.channels = h.data.channels = g || b.maxPerChannel() : c = h.data = g || b.maxPerChannel(), null != k.tag ? h.tag = k.tag : k.src && (h.src = k.src), null != k.completeHandler && (h.completeHandler = k.completeHandler), k.type && (h.type = k.type)), 0 != d)
                if (a._preloadHash[h.src] || (a._preloadHash[h.src] = []), a._preloadHash[h.src].push({
                    src: e,
                    id: f,
                    data: c
                }), 1 == a._preloadHash[h.src].length) a.activePlugin.preload(h.src,
                    k);
                else if (1 == a._preloadHash[h.src][0]) return !0;
            return h
        };
        a.registerManifest = function(a, b) {
            for (var e = [], f = 0, c = a.length; c > f; f++) e[f] = createjs.Sound.registerSound(a[f].src, a[f].id, a[f].data, a[f].preload, b);
            return e
        };
        a.removeSound = function(e, f) {
            if (null == a.activePlugin) return !1;
            var c = (e instanceof Object && (e = e.src), e = a._getSrcById(e), a.alternateExtensions.length) ? a._parsePath2(e) : a._parsePath(e);
            if (null == c) return !1;
            null != f && (c.src = f + c.src);
            e = c.src;
            for (var d in a._idHash) a._idHash[d] == e && delete a._idHash[d];
            return b.removeSrc(e), delete a._preloadHash[e], a.activePlugin.removeSound(e), !0
        };
        a.removeManifest = function(a, b) {
            for (var e = [], f = 0, c = a.length; c > f; f++) e[f] = createjs.Sound.removeSound(a[f].src, b);
            return e
        };
        a.removeAllSounds = function() {
            a._idHash = {};
            a._preloadHash = {};
            b.removeAll();
            a.activePlugin.removeAllSounds()
        };
        a.loadComplete = function(b) {
            var e = a.alternateExtensions.length ? a._parsePath2(b, "sound") : a._parsePath(b, "sound");
            return b = e ? a._getSrcById(e.src) : a._getSrcById(b), 1 == a._preloadHash[b][0]
        };
        a._parsePath =
            function(b, e, f, c) {
                "string" != typeof b && (b = b.toString());
                b = b.split(a.DELIMITER);
                if (1 < b.length) try {
                    X.log('createjs.Sound.DELIMITER "|" loading approach has been deprecated. Please use the new alternateExtensions property.')
                } catch (d) {}
                e = {
                    type: e || "sound",
                    id: f,
                    data: c
                };
                f = a.getCapabilities();
                c = 0;
                for (var g = b.length; g > c; c++) {
                    var h = b[c],
                        k = h.match(a.FILE_PATTERN);
                    if (null == k) return !1;
                    var l = k[4],
                        k = k[5];
                    if (f[k] && -1 < createjs.indexOf(a.SUPPORTED_EXTENSIONS, k)) return e.name = l, e.src = h, e.extension = k, e
                }
                return null
        };
        a._parsePath2 =
            function(b, e, f, c) {
                "string" != typeof b && (b = b.toString());
                var d = b.match(a.FILE_PATTERN);
                if (null == d) return !1;
                for (var g = d[4], h = d[5], k = a.getCapabilities(), l = 0; !k[h];)
                    if (h = a.alternateExtensions[l++], l > a.alternateExtensions.length) return null;
                b = b.replace("." + d[5], "." + h);
                e = {
                    type: e || "sound",
                    id: f,
                    data: c
                };
                return e.name = g, e.src = b, e.extension = h, e
        };
        a.play = function(b, e, f, c, d, g, h) {
            b = a.createInstance(b);
            return a._playInstance(b, e, f, c, d, g, h) || b.playFailed(), b
        };
        a.createInstance = function(e) {
            if (!a.initializeDefaultPlugins()) return a._defaultSoundInstance;
            var f = (e = a._getSrcById(e), a.alternateExtensions.length) ? a._parsePath2(e, "sound") : a._parsePath(e, "sound");
            e = null;
            return null != f && null != f.src ? (b.create(f.src), e = a.activePlugin.create(f.src)) : e = a._defaultSoundInstance, e.uniqueId = a._lastID++, e
        };
        a.setVolume = function(b) {
            if (null == Number(b)) return !1;
            if (b = Math.max(0, Math.min(1, b)), a._masterVolume = b, !this.activePlugin || !this.activePlugin.setVolume || !this.activePlugin.setVolume(b))
                for (var e = this._instances, f = 0, c = e.length; c > f; f++) e[f].setMasterVolume(b)
        };
        a.getVolume =
            function() {
                return a._masterVolume
        };
        a.setMute = function(a) {
            if (null == a || void 0 == a) return !1;
            if (this._masterMute = a, !this.activePlugin || !this.activePlugin.setMute || !this.activePlugin.setMute(a))
                for (var b = this._instances, e = 0, f = b.length; f > e; e++) b[e].setMasterMute(a);
            return !0
        };
        a.getMute = function() {
            return this._masterMute
        };
        a.stop = function() {
            for (var a = this._instances, b = a.length; b--;) a[b].stop()
        };
        a._playInstance = function(b, e, f, c, d, g, h) {
            if (e instanceof Object && (f = e.delay, c = e.offset, d = e.loop, g = e.volume, h = e.pan,
                e = e.interrupt), e = e || a.defaultInterruptBehavior, null == f && (f = 0), null == c && (c = b.getPosition()), null == d && (d = 0), null == g && (g = b.volume), null == h && (h = b.pan), 0 == f) {
                if (!a._beginPlaying(b, e, c, d, g, h)) return !1
            } else f = K(function() {
                a._beginPlaying(b, e, c, d, g, h)
            }, f), b._delayTimeoutId = f;
            return this._instances.push(b), !0
        };
        a._beginPlaying = function(a, e, f, c, d, g) {
            return b.add(a, e) ? a._beginPlaying(f, c, d, g) ? !0 : (a = createjs.indexOf(this._instances, a), -1 < a && this._instances.splice(a, 1), !1) : !1
        };
        a._getSrcById = function(b) {
            return null ==
                a._idHash || null == a._idHash[b] ? b : a._idHash[b]
        };
        a._playFinished = function(a) {
            b.remove(a);
            a = createjs.indexOf(this._instances, a); - 1 < a && this._instances.splice(a, 1)
        };
        createjs.Sound = a;
        b.channels = {};
        b.create = function(a, e) {
            return null == b.get(a) ? (b.channels[a] = new b(a, e), !0) : !1
        };
        b.removeSrc = function(a) {
            var e = b.get(a);
            return null == e ? !1 : (e.removeAll(), delete b.channels[a], !0)
        };
        b.removeAll = function() {
            for (var a in b.channels) b.channels[a].removeAll();
            b.channels = {}
        };
        b.add = function(a, e) {
            var f = b.get(a.src);
            return null ==
                f ? !1 : f.add(a, e)
        };
        b.remove = function(a) {
            var e = b.get(a.src);
            return null == e ? !1 : (e.remove(a), !0)
        };
        b.maxPerChannel = function() {
            return f.maxDefault
        };
        b.get = function(a) {
            return b.channels[a]
        };
        var f = b.prototype;
        f.src = null;
        f.max = null;
        f.maxDefault = 100;
        f.length = 0;
        f.init = function(a, b) {
            this.src = a;
            this.max = b || this.maxDefault; - 1 == this.max && (this.max = this.maxDefault);
            this._instances = []
        };
        f.get = function(a) {
            return this._instances[a]
        };
        f.add = function(a, b) {
            return this.getSlot(b, a) ? (this._instances.push(a), this.length++, !0) : !1
        };
        f.remove = function(a) {
            a = createjs.indexOf(this._instances, a);
            return -1 == a ? !1 : (this._instances.splice(a, 1), this.length--, !0)
        };
        f.removeAll = function() {
            for (var a = this.length - 1; 0 <= a; a--) this._instances[a].stop()
        };
        f.getSlot = function(b) {
            for (var e, f, c = 0, d = this.max; d > c; c++) {
                if (e = this.get(c), null == e) return !0;
                (b != a.INTERRUPT_NONE || e.playState == a.PLAY_FINISHED) && (0 != c ? e.playState == a.PLAY_FINISHED || e.playState == a.PLAY_INTERRUPTED || e.playState == a.PLAY_FAILED ? f = e : (b == a.INTERRUPT_EARLY && e.getPosition() < f.getPosition() ||
                    b == a.INTERRUPT_LATE && e.getPosition() > f.getPosition()) && (f = e) : f = e)
            }
            return null != f ? (f._interrupt(), this.remove(f), !0) : !1
        };
        f.toString = function() {
            return "[Sound SoundChannel]"
        };
        a._defaultSoundInstance = new function() {
            this.isDefault = !0;
            this.addEventListener = this.removeEventListener = this.removeAllEventListeners = this.dispatchEvent = this.hasEventListener = this._listeners = this._interrupt = this._playFailed = this.pause = this.resume = this.play = this._beginPlaying = this._cleanUp = this.stop = this.setMasterVolume = this.setVolume =
                this.mute = this.setMute = this.getMute = this.setPan = this.getPosition = this.setPosition = this.playFailed = function() {
                    return !1
            };
            this.getVolume = this.getPan = this.getDuration = function() {
                return 0
            };
            this.playState = a.PLAY_FAILED;
            this.toString = function() {
                return "[Sound Default Sound Instance]"
            }
        };
        e.init = function() {
            var a = g.navigator.userAgent;
            e.isFirefox = -1 < a.indexOf("Firefox");
            e.isOpera = null != g.opera;
            e.isChrome = -1 < a.indexOf("Chrome");
            e.isIOS = -1 < a.indexOf("iPod") || -1 < a.indexOf("iPhone") || -1 < a.indexOf("iPad");
            e.isAndroid = -1 < a.indexOf("Android");
            e.isBlackberry = -1 < a.indexOf("Blackberry")
        };
        e.init();
        createjs.Sound.BrowserDetect = e
    })();
    this.createjs = this.createjs || {};
    (function() {
        function a() {
            this._init()
        }
        a._capabilities = null;
        a.isSupported = function() {
            var b = createjs.Sound.BrowserDetect.isIOS || createjs.Sound.BrowserDetect.isAndroid || createjs.Sound.BrowserDetect.isBlackberry;
            return "file:" != N.protocol || b || this._isFileXHRSupported() ? (a._generateCapabilities(), null == a.context ? !1 : !0) : !1
        };
        a._isFileXHRSupported = function() {
            var a = !0,
                b = new XMLHttpRequest;
            try {
                b.open("GET", "fail.fail", !1)
            } catch (c) {
                return a = !1
            }
            b.onerror = function() {
                a = !1
            };
            b.onload = function() {
                a = 404 == this.status || 200 == this.status || 0 == this.status && "" != this.response
            };
            try {
                b.send()
            } catch (d) {
                a = !1
            }
            return a
        };
        a._generateCapabilities = function() {
            if (null == a._capabilities) {
                var b = u.createElement("audio");
                if (null == b.canPlayType) return null;
                if (g.webkitAudioContext) a.context = new webkitAudioContext;
                else {
                    if (!g.AudioContext) return null;
                    a.context = new AudioContext
                }
                a._compatibilitySetUp();
                a.playEmptySound();
                a._capabilities = {
                    panning: !0,
                    volume: !0,
                    tracks: -1
                };
                for (var f = createjs.Sound.SUPPORTED_EXTENSIONS, c = createjs.Sound.EXTENSION_MAP, d = 0, h = f.length; h > d; d++) {
                    var s = f[d],
                        k = c[s] || s;
                    a._capabilities[s] = "no" != b.canPlayType("audio/" + s) && "" != b.canPlayType("audio/" + s) || "no" != b.canPlayType("audio/" + k) && "" != b.canPlayType("audio/" + k)
                }
                2 > a.context.destination.numberOfChannels && (a._capabilities.panning = !1);
                a.dynamicsCompressorNode = a.context.createDynamicsCompressor();
                a.dynamicsCompressorNode.connect(a.context.destination);
                a.gainNode = a.context.createGain();
                a.gainNode.connect(a.dynamicsCompressorNode)
            }
        };
        a._compatibilitySetUp = function() {
            if (!a.context.createGain) {
                a.context.createGain = a.context.createGainNode;
                var b = a.context.createBufferSource();
                b.__proto__.start = b.__proto__.noteGrainOn;
                b.__proto__.stop = b.__proto__.noteOff;
                this._panningModel = 0
            }
        };
        a.playEmptySound = function() {
            var a = this.context.createBuffer(1, 1, 22050),
                b = this.context.createBufferSource();
            b.buffer = a;
            b.connect(this.context.destination);
            b.start(0, 0, 0)
        };
        var b =
            a.prototype;
        b._capabilities = null;
        b._volume = 1;
        b.context = null;
        b._panningModel = "equalpower";
        b.dynamicsCompressorNode = null;
        b.gainNode = null;
        b._arrayBuffers = null;
        b._init = function() {
            this._capabilities = a._capabilities;
            this._arrayBuffers = {};
            this.context = a.context;
            this.gainNode = a.gainNode;
            this.dynamicsCompressorNode = a.dynamicsCompressorNode
        };
        b.register = function(a) {
            this._arrayBuffers[a] = !0;
            return {
                tag: new createjs.WebAudioPlugin.Loader(a, this)
            }
        };
        b.isPreloadStarted = function(a) {
            return null != this._arrayBuffers[a]
        };
        b.isPreloadComplete = function(a) {
            return !(null == this._arrayBuffers[a] || 1 == this._arrayBuffers[a])
        };
        b.removeSound = function(a) {
            delete this._arrayBuffers[a]
        };
        b.removeAllSounds = function() {
            this._arrayBuffers = {}
        };
        b.addPreloadResults = function(a, b) {
            this._arrayBuffers[a] = b
        };
        b._handlePreloadComplete = function() {
            createjs.Sound._sendFileLoadEvent(this.src)
        };
        b.preload = function(a) {
            this._arrayBuffers[a] = !0;
            a = new createjs.WebAudioPlugin.Loader(a, this);
            a.onload = this._handlePreloadComplete;
            a.load()
        };
        b.create = function(a) {
            return this.isPreloadStarted(a) ||
                this.preload(a), new createjs.WebAudioPlugin.SoundInstance(a, this)
        };
        b.setVolume = function(a) {
            return this._volume = a, this._updateVolume(), !0
        };
        b._updateVolume = function() {
            var a = createjs.Sound._masterMute ? 0 : this._volume;
            a != this.gainNode.gain.value && (this.gainNode.gain.value = a)
        };
        b.getVolume = function() {
            return this._volume
        };
        b.setMute = function() {
            return this._updateVolume(), !0
        };
        b.toString = function() {
            return "[WebAudioPlugin]"
        };
        createjs.WebAudioPlugin = a
    })();
    (function() {
        function a(a, b) {
            this._init(a, b)
        }
        var b = a.prototype =
            new createjs.EventDispatcher;
        b.src = null;
        b.uniqueId = -1;
        b.playState = null;
        b._owner = null;
        b._offset = 0;
        b._delay = 0;
        b._volume = 1;
        try {
            Object.defineProperty(b, "volume", {
                get: function() {
                    return this._volume
                },
                set: function(a) {
                    return null == Number(a) ? !1 : (a = Math.max(0, Math.min(1, a)), this._volume = a, this._updateVolume(), void 0)
                }
            })
        } catch (e) {}
        b._pan = 0;
        try {
            Object.defineProperty(b, "pan", {
                get: function() {
                    return this._pan
                },
                set: function(a) {
                    return this._owner._capabilities.panning && null != Number(a) ? (a = Math.max(-1, Math.min(1, a)),
                        this._pan = a, this.panNode.setPosition(a, 0, -0.5), void 0) : !1
                }
            })
        } catch (f) {}
        b._duration = 0;
        b._remainingLoops = 0;
        b._delayTimeoutId = null;
        b._soundCompleteTimeout = null;
        b.gainNode = null;
        b.panNode = null;
        b.sourceNode = null;
        b._sourceNodeNext = null;
        b._muted = !1;
        b._paused = !1;
        b._startTime = 0;
        b._endedHandler = null;
        b._sendEvent = function(a) {
            a = new createjs.Event(a);
            this.dispatchEvent(a)
        };
        b._init = function(a, b) {
            this._owner = b;
            this.src = a;
            this.gainNode = this._owner.context.createGain();
            this.panNode = this._owner.context.createPanner();
            this.panNode.panningModel = this._owner._panningModel;
            this.panNode.connect(this.gainNode);
            this._owner.isPreloadComplete(this.src) && (this._duration = 1E3 * this._owner._arrayBuffers[this.src].duration);
            this._endedHandler = createjs.proxy(this._handleSoundComplete, this)
        };
        b._cleanUp = function() {
            this.sourceNode && this.playState == createjs.Sound.PLAY_SUCCEEDED && (this.sourceNode = this._cleanUpAudioNode(this.sourceNode), this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext));
            0 != this.gainNode.numberOfOutputs &&
                this.gainNode.disconnect(0);
            G(this._delayTimeoutId);
            G(this._soundCompleteTimeout);
            this._startTime = 0;
            null != g.createjs && createjs.Sound._playFinished(this)
        };
        b._cleanUpAudioNode = function(a) {
            return a && (a.stop(0), a.disconnect(this.panNode), a = null), a
        };
        b._interrupt = function() {
            this._cleanUp();
            this.playState = createjs.Sound.PLAY_INTERRUPTED;
            this._paused = !1;
            this._sendEvent("interrupted")
        };
        b._handleSoundReady = function() {
            if (null != g.createjs) {
                if (1E3 * this._offset > this.getDuration()) return this.playFailed(), void 0;
                0 > this._offset && (this._offset = 0);
                this.playState = createjs.Sound.PLAY_SUCCEEDED;
                this._paused = !1;
                this.gainNode.connect(this._owner.gainNode);
                var a = this._owner._arrayBuffers[this.src].duration;
                this.sourceNode = this._createAndPlayAudioNode(this._owner.context.currentTime - a, this._offset);
                this._duration = 1E3 * a;
                this._startTime = this.sourceNode.startTime - this._offset;
                this._soundCompleteTimeout = K(this._endedHandler, 1E3 * (a - this._offset));
                0 != this._remainingLoops && (this._sourceNodeNext = this._createAndPlayAudioNode(this._startTime,
                    0))
            }
        };
        b._createAndPlayAudioNode = function(a, b) {
            var e = this._owner.context.createBufferSource();
            return e.buffer = this._owner._arrayBuffers[this.src], e.connect(this.panNode), this._owner.context.currentTime, e.startTime = a + e.buffer.duration, e.start(e.startTime, b, e.buffer.duration - b), e
        };
        b.play = function(a, b, e, f, c, d) {
            this._cleanUp();
            createjs.Sound._playInstance(this, a, b, e, f, c, d)
        };
        b._beginPlaying = function(a, b, e, f) {
            return null != g.createjs && this.src ? (this._offset = a / 1E3, this._remainingLoops = b, this.volume = e, this.pan =
                f, this._owner.isPreloadComplete(this.src) ? (this._handleSoundReady(null), this._sendEvent("succeeded"), 1) : (this.playFailed(), void 0)) : void 0
        };
        b.pause = function() {
            return this._paused || this.playState != createjs.Sound.PLAY_SUCCEEDED ? !1 : (this._paused = !0, this._offset = this._owner.context.currentTime - this._startTime, this._cleanUpAudioNode(this.sourceNode), this._cleanUpAudioNode(this._sourceNodeNext), 0 != this.gainNode.numberOfOutputs && this.gainNode.disconnect(), G(this._delayTimeoutId), G(this._soundCompleteTimeout), !0)
        };
        b.resume = function() {
            return this._paused ? (this._handleSoundReady(null), !0) : !1
        };
        b.stop = function() {
            return this._cleanUp(), this.playState = createjs.Sound.PLAY_FINISHED, this._offset = 0, !0
        };
        b.setVolume = function(a) {
            return this.volume = a, !0
        };
        b._updateVolume = function() {
            var a = this._muted ? 0 : this._volume;
            return a != this.gainNode.gain.value ? (this.gainNode.gain.value = a, !0) : !1
        };
        b.getVolume = function() {
            return this.volume
        };
        b.setMute = function(a) {
            return null == a || void 0 == a ? !1 : (this._muted = a, this._updateVolume(), !0)
        };
        b.getMute = function() {
            return this._muted
        };
        b.setPan = function(a) {
            return this.pan = a, this.pan != a ? !1 : void 0
        };
        b.getPan = function() {
            return this.pan
        };
        b.getPosition = function() {
            return 1E3 * (this._paused || null == this.sourceNode ? this._offset : this._owner.context.currentTime - this._startTime)
        };
        b.setPosition = function(a) {
            return this._offset = a / 1E3, this.sourceNode && this.playState == createjs.Sound.PLAY_SUCCEEDED && (this._cleanUpAudioNode(this.sourceNode), this._cleanUpAudioNode(this._sourceNodeNext), G(this._soundCompleteTimeout)),
            this._paused || this.playState != createjs.Sound.PLAY_SUCCEEDED || this._handleSoundReady(null), !0
        };
        b.getDuration = function() {
            return this._duration
        };
        b._handleSoundComplete = function() {
            return this._offset = 0, 0 != this._remainingLoops ? (this._remainingLoops--, this._sourceNodeNext ? (this._cleanUpAudioNode(this.sourceNode), this.sourceNode = this._sourceNodeNext, this._startTime = this.sourceNode.startTime, this._sourceNodeNext = this._createAndPlayAudioNode(this._startTime, 0), this._soundCompleteTimeout = K(this._endedHandler,
                this._duration)) : this._handleSoundReady(null), this._sendEvent("loop"), void 0) : (null != g.createjs && (this._cleanUp(), this.playState = createjs.Sound.PLAY_FINISHED, this._sendEvent("complete")), void 0)
        };
        b.playFailed = function() {
            null != g.createjs && (this._cleanUp(), this.playState = createjs.Sound.PLAY_FAILED, this._sendEvent("failed"))
        };
        b.toString = function() {
            return "[WebAudioPlugin SoundInstance]"
        };
        createjs.WebAudioPlugin.SoundInstance = a
    })();
    (function() {
        function a(a, b) {
            this._init(a, b)
        }
        var b = a.prototype;
        b.request =
            null;
        b.owner = null;
        b.progress = -1;
        b.src = null;
        b.originalSrc = null;
        b.result = null;
        b.onload = null;
        b.onprogress = null;
        b.onError = null;
        b._init = function(a, b) {
            this.originalSrc = this.src = a;
            this.owner = b
        };
        b.load = function(a) {
            null != a && (this.src = a);
            this.request = new XMLHttpRequest;
            this.request.open("GET", this.src, !0);
            this.request.responseType = "arraybuffer";
            this.request.onload = createjs.proxy(this.handleLoad, this);
            this.request.onError = createjs.proxy(this.handleError, this);
            this.request.onprogress = createjs.proxy(this.handleProgress,
                this);
            this.request.send()
        };
        b.handleProgress = function(a, b) {
            this.progress = a / b;
            null != this.onprogress && this.onprogress({
                loaded: a,
                total: b,
                progress: this.progress
            })
        };
        b.handleLoad = function() {
            this.owner.context.decodeAudioData(this.request.response, createjs.proxy(this.handleAudioDecoded, this), createjs.proxy(this.handleError, this))
        };
        b.handleAudioDecoded = function(a) {
            this.progress = 1;
            this.result = a;
            this.src = this.originalSrc;
            this.owner.addPreloadResults(this.src, this.result);
            this.onload && this.onload()
        };
        b.handleError =
            function(a) {
                this.owner.removeSound(this.src);
                this.onerror && this.onerror(a)
        };
        b.toString = function() {
            return "[WebAudioPlugin Loader]"
        };
        createjs.WebAudioPlugin.Loader = a
    })();
    this.createjs = this.createjs || {};
    (function() {
        function a() {
            this._init()
        }
        a.MAX_INSTANCES = 30;
        a._AUDIO_READY = "canplaythrough";
        a._AUDIO_ENDED = "ended";
        a._AUDIO_SEEKED = "seeked";
        a._AUDIO_STALLED = "stalled";
        a._capabilities = null;
        a.enableIOS = !1;
        a.isSupported = function() {
            if (createjs.Sound.BrowserDetect.isIOS && !a.enableIOS) return !1;
            a._generateCapabilities();
            return null == a.tag || null == a._capabilities ? !1 : !0
        };
        a._generateCapabilities = function() {
            if (null == a._capabilities) {
                var b = a.tag = u.createElement("audio");
                if (null == b.canPlayType) return null;
                a._capabilities = {
                    panning: !0,
                    volume: !0,
                    tracks: -1
                };
                for (var f = createjs.Sound.SUPPORTED_EXTENSIONS, c = createjs.Sound.EXTENSION_MAP, d = 0, g = f.length; g > d; d++) {
                    var h = f[d],
                        k = c[h] || h;
                    a._capabilities[h] = "no" != b.canPlayType("audio/" + h) && "" != b.canPlayType("audio/" + h) || "no" != b.canPlayType("audio/" + k) && "" != b.canPlayType("audio/" + k)
                }
            }
        };
        var b = a.prototype;
        b._capabilities = null;
        b._audioSources = null;
        b.defaultNumChannels = 2;
        b.loadedHandler = null;
        b._init = function() {
            this._capabilities = a._capabilities;
            this._audioSources = {}
        };
        b.register = function(a, b) {
            this._audioSources[a] = !0;
            for (var c = createjs.HTMLAudioPlugin.TagPool.get(a), d = null, g = b || this.defaultNumChannels, h = 0; g > h; h++) d = this._createTag(a), c.add(d);
            if (d.id = a, this.loadedHandler = createjs.proxy(this._handleTagLoad, this), d.addEventListener && d.addEventListener("canplaythrough", this.loadedHandler),
                null == d.onreadystatechange) d.onreadystatechange = this.loadedHandler;
            else {
                var k = d.onreadystatechange;
                d.onreadystatechange = function() {
                    k();
                    this.loadedHandler()
                }
            }
            return {
                tag: d,
                numChannels: g
            }
        };
        b._handleTagLoad = function(a) {
            a.target.removeEventListener && a.target.removeEventListener("canplaythrough", this.loadedHandler);
            a.target.onreadystatechange = null;
            a.target.src != a.target.id && createjs.HTMLAudioPlugin.TagPool.checkSrc(a.target.id)
        };
        b._createTag = function(a) {
            var b = u.createElement("audio");
            return b.autoplay = !1, b.preload = "none", b.src = a, b
        };
        b.removeSound = function(a) {
            delete this._audioSources[a];
            createjs.HTMLAudioPlugin.TagPool.remove(a)
        };
        b.removeAllSounds = function() {
            this._audioSources = {};
            createjs.HTMLAudioPlugin.TagPool.removeAll()
        };
        b.create = function(a) {
            if (!this.isPreloadStarted(a)) {
                var b = createjs.HTMLAudioPlugin.TagPool.get(a),
                    c = this._createTag(a);
                c.id = a;
                b.add(c);
                this.preload(a, {
                    tag: c
                })
            }
            return new createjs.HTMLAudioPlugin.SoundInstance(a, this)
        };
        b.isPreloadStarted = function(a) {
            return null != this._audioSources[a]
        };
        b.preload = function(a, b) {
            this._audioSources[a] = !0;
            new createjs.HTMLAudioPlugin.Loader(a, b.tag)
        };
        b.toString = function() {
            return "[HTMLAudioPlugin]"
        };
        createjs.HTMLAudioPlugin = a
    })();
    (function() {
        function a(a, b) {
            this._init(a, b)
        }
        var b = a.prototype = new createjs.EventDispatcher;
        b.src = null;
        b.uniqueId = -1;
        b.playState = null;
        b._owner = null;
        b.loaded = !1;
        b._offset = 0;
        b._delay = 0;
        b._volume = 1;
        try {
            Object.defineProperty(b, "volume", {
                get: function() {
                    return this._volume
                },
                set: function(a) {
                    null != Number(a) && (a = Math.max(0, Math.min(1,
                        a)), this._volume = a, this._updateVolume())
                }
            })
        } catch (e) {}
        b.pan = 0;
        b._duration = 0;
        b._remainingLoops = 0;
        b._delayTimeoutId = null;
        b.tag = null;
        b._muted = !1;
        b._paused = !1;
        b._endedHandler = null;
        b._readyHandler = null;
        b._stalledHandler = null;
        b.loopHandler = null;
        b._init = function(a, b) {
            this.src = a;
            this._owner = b;
            this._endedHandler = createjs.proxy(this._handleSoundComplete, this);
            this._readyHandler = createjs.proxy(this._handleSoundReady, this);
            this._stalledHandler = createjs.proxy(this._handleSoundStalled, this);
            this.loopHandler = createjs.proxy(this.handleSoundLoop,
                this)
        };
        b._sendEvent = function(a) {
            a = new createjs.Event(a);
            this.dispatchEvent(a)
        };
        b._cleanUp = function() {
            var a = this.tag;
            if (null != a) {
                a.pause();
                a.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, !1);
                a.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, !1);
                a.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this.loopHandler, !1);
                try {
                    a.currentTime = 0
                } catch (b) {}
                createjs.HTMLAudioPlugin.TagPool.setInstance(this.src, a);
                this.tag = null
            }
            G(this._delayTimeoutId);
            null != g.createjs && createjs.Sound._playFinished(this)
        };
        b._interrupt = function() {
            null != this.tag && (this.playState = createjs.Sound.PLAY_INTERRUPTED, this._cleanUp(), this._paused = !1, this._sendEvent("interrupted"))
        };
        b.play = function(a, b, e, c, d, g) {
            this._cleanUp();
            createjs.Sound._playInstance(this, a, b, e, c, d, g)
        };
        b._beginPlaying = function(a, b, e, c) {
            if (null == g.createjs) return -1;
            var d = this.tag = createjs.HTMLAudioPlugin.TagPool.getInstance(this.src);
            return null == d ? (this.playFailed(), -1) : (d.addEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED,
                this._endedHandler, !1), this._offset = a, this.volume = e, this.pan = c, this._updateVolume(), this._remainingLoops = b, 4 !== d.readyState ? (d.addEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, !1), d.addEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, !1), d.preload = "auto", d.load()) : this._handleSoundReady(null), this._sendEvent("succeeded"), 1)
        };
        b._handleSoundStalled = function() {
            this._cleanUp();
            this._sendEvent("failed")
        };
        b._handleSoundReady = function() {
            if (null != g.createjs) {
                if (this._duration =
                    1E3 * this.tag.duration, this.playState = createjs.Sound.PLAY_SUCCEEDED, this._paused = !1, this.tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, !1), this._offset >= this.getDuration()) return this.playFailed(), void 0;
                0 < this._offset && (this.tag.currentTime = 0.001 * this._offset); - 1 == this._remainingLoops && (this.tag.loop = !0);
                0 != this._remainingLoops && (this.tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this.loopHandler, !1), this.tag.loop = !0);
                this.tag.play()
            }
        };
        b.pause = function() {
            return this._paused ||
                this.playState != createjs.Sound.PLAY_SUCCEEDED || null == this.tag ? !1 : (this._paused = !0, this.tag.pause(), G(this._delayTimeoutId), !0)
        };
        b.resume = function() {
            return this._paused && null != this.tag ? (this._paused = !1, this.tag.play(), !0) : !1
        };
        b.stop = function() {
            return this._offset = 0, this.pause(), this.playState = createjs.Sound.PLAY_FINISHED, this._cleanUp(), !0
        };
        b.setMasterVolume = function() {
            return this._updateVolume(), !0
        };
        b.setVolume = function(a) {
            return this.volume = a, !0
        };
        b._updateVolume = function() {
            if (null != this.tag) {
                var a =
                    this._muted || createjs.Sound._masterMute ? 0 : this._volume * createjs.Sound._masterVolume;
                return a != this.tag.volume && (this.tag.volume = a), !0
            }
            return !1
        };
        b.getVolume = function() {
            return this.volume
        };
        b.setMasterMute = function() {
            return this._updateVolume(), !0
        };
        b.setMute = function(a) {
            return null == a || void 0 == a ? !1 : (this._muted = a, this._updateVolume(), !0)
        };
        b.getMute = function() {
            return this._muted
        };
        b.setPan = function() {
            return !1
        };
        b.getPan = function() {
            return 0
        };
        b.getPosition = function() {
            return null == this.tag ? this._offset : 1E3 *
                this.tag.currentTime
        };
        b.setPosition = function(a) {
            if (null == this.tag) this._offset = a;
            else {
                this.tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this.loopHandler, !1);
                try {
                    this.tag.currentTime = 0.001 * a
                } catch (b) {
                    return !1
                }
                this.tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this.loopHandler, !1)
            }
            return !0
        };
        b.getDuration = function() {
            return this._duration
        };
        b._handleSoundComplete = function() {
            this._offset = 0;
            null != g.createjs && (this.playState = createjs.Sound.PLAY_FINISHED, this._cleanUp(), this._sendEvent("complete"))
        };
        b.handleSoundLoop = function() {
            this._offset = 0;
            this._remainingLoops--;
            0 == this._remainingLoops && (this.tag.loop = !1, this.tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this.loopHandler, !1));
            this._sendEvent("loop")
        };
        b.playFailed = function() {
            null != g.createjs && (this.playState = createjs.Sound.PLAY_FAILED, this._cleanUp(), this._sendEvent("failed"))
        };
        b.toString = function() {
            return "[HTMLAudioPlugin SoundInstance]"
        };
        createjs.HTMLAudioPlugin.SoundInstance = a
    })();
    (function() {
        function a(a, b) {
            this._init(a,
                b)
        }
        var b = a.prototype;
        b.src = null;
        b.tag = null;
        b.preloadTimer = null;
        b.loadedHandler = null;
        b._init = function(a, b) {
            if (this.src = a, this.tag = b, this.preloadTimer = setInterval(createjs.proxy(this.preloadTick, this), 200), this.loadedHandler = createjs.proxy(this.sendLoadedEvent, this), this.tag.addEventListener && this.tag.addEventListener("canplaythrough", this.loadedHandler), null == this.tag.onreadystatechange) this.tag.onreadystatechange = createjs.proxy(this.sendLoadedEvent, this);
            else {
                var c = this.tag.onreadystatechange;
                this.tag.onreadystatechange =
                    function() {
                        c();
                        this.tag.onreadystatechange = createjs.proxy(this.sendLoadedEvent, this)
                }
            }
            this.tag.preload = "auto";
            this.tag.load()
        };
        b.preloadTick = function() {
            var a = this.tag.buffered,
                b = this.tag.duration;
            0 < a.length && a.end(0) >= b - 1 && this.handleTagLoaded()
        };
        b.handleTagLoaded = function() {
            clearInterval(this.preloadTimer)
        };
        b.sendLoadedEvent = function() {
            this.tag.removeEventListener && this.tag.removeEventListener("canplaythrough", this.loadedHandler);
            this.tag.onreadystatechange = null;
            createjs.Sound._sendFileLoadEvent(this.src)
        };
        b.toString = function() {
            return "[HTMLAudioPlugin Loader]"
        };
        createjs.HTMLAudioPlugin.Loader = a
    })();
    (function() {
        function a(a) {
            this._init(a)
        }
        a.tags = {};
        a.get = function(b) {
            var f = a.tags[b];
            return null == f && (f = a.tags[b] = new a(b)), f
        };
        a.remove = function(b) {
            var f = a.tags[b];
            return null == f ? !1 : (f.removeAll(), delete a.tags[b], !0)
        };
        a.removeAll = function() {
            for (var b in a.tags) a.tags[b].removeAll();
            a.tags = {}
        };
        a.getInstance = function(b) {
            b = a.tags[b];
            return null == b ? null : b.get()
        };
        a.setInstance = function(b, f) {
            var c = a.tags[b];
            return null ==
                c ? null : c.set(f)
        };
        a.checkSrc = function(b) {
            b = a.tags[b];
            return null == b ? null : (b.checkSrcChange(), void 0)
        };
        var b = a.prototype;
        b.src = null;
        b.length = 0;
        b.available = 0;
        b.tags = null;
        b._init = function(a) {
            this.src = a;
            this.tags = []
        };
        b.add = function(a) {
            this.tags.push(a);
            this.length++;
            this.available++
        };
        b.removeAll = function() {
            for (; this.length--;) delete this.tags[this.length];
            this.src = null;
            this.tags.length = 0
        };
        b.get = function() {
            if (0 == this.tags.length) return null;
            this.available = this.tags.length;
            var a = this.tags.pop();
            return null ==
                a.parentNode && u.body.appendChild(a), a
        };
        b.set = function(a) {
            -1 == createjs.indexOf(this.tags, a) && this.tags.push(a);
            this.available = this.tags.length
        };
        b.checkSrcChange = function() {
            for (var a = this.tags.length - 1, b = this.tags[a].src; a--;) this.tags[a].src = b
        };
        b.toString = function() {
            return "[HTMLAudioPlugin TagPool]"
        };
        createjs.HTMLAudioPlugin.TagPool = a
    })();
    h.doRectsIntersect = function(a, b) {
        return 2 * Math.abs(a.getCenterX() - b.getCenterX()) < a.getWidth() + b.getWidth() && 2 * Math.abs(a.getCenterY() - b.getCenterY()) < a.getHeight() +
            b.getHeight()
    };
    h.prototype = {
        getCenter: function() {
            return {
                x: this.getCenterX(),
                y: this.getCenterY()
            }
        },
        getCenterX: function() {
            return (this.left + this.right) / 2
        },
        getCenterY: function() {
            return (this.top + this.bottom) / 2
        },
        setX: function(a) {
            var b = this.getWidth();
            this.left = a;
            this.right = a + b
        },
        setY: function(a) {
            var b = this.getHeight();
            this.top = a;
            this.bottom = a + b
        },
        setPosition: function(a, b) {
            this.setX(a);
            this.setY(b)
        },
        checkDimensions: function() {
            var a;
            this.left > this.right && (a = this.left, this.left = this.right, this.right = a);
            this.top >
                this.bottom && (a = this.top, this.top = this.bottom, this.bottom = a)
        },
        translate: function(a, b) {
            this.translateX(a);
            this.translateY(b)
        },
        translateX: function(a) {
            this.left += a;
            this.right += a
        },
        translateY: function(a) {
            this.top += a;
            this.bottom += a
        },
        getWidth: function() {
            return this.right - this.left
        },
        getHeight: function() {
            return this.bottom - this.top
        },
        setWidth: function(a) {
            this.right = this.left + a
        },
        setHeight: function(a) {
            this.bottom = this.top + a
        },
        containsPoint: function(a, b) {
            return a >= this.left && a < this.right && b >= this.top && b < this.bottom
        },
        intersectsRect: function(a) {
            return h.doRectsIntersect(this, a)
        },
        copy: function() {
            return new h({
                left: this.left,
                top: this.top,
                right: this.right,
                bottom: this.bottom
            })
        }
    };
    var c;
    (function() {
        c = {
            nativeTypes: "Boolean Number String Function Array Date RegExp Object".split(" "),
            class2type: {}
        };
        (function() {
            var a;
            for (a = 0; a < c.nativeTypes.length; a += 1) c.class2type["[object " + c.nativeTypes[a] + "]"] = c.nativeTypes[a].toLowerCase()
        })();
        c.isNode = function(a) {
            return "object" === typeof Node ? a instanceof Node : a && "object" === typeof a &&
                "number" === typeof a.nodeType && "string" === typeof a.nodeName
        };
        c.isElement = function(a) {
            return "object" === typeof HTMLElement ? a instanceof HTMLElement : a && "object" === typeof a && null !== a && 1 === a.nodeType && "string" === typeof a.nodeName
        };
        c.isArray = Array.isArray || function(a) {
            return "array" === c.getType(a)
        };
        c.getType = function(a) {
            return null == a ? String(a) : c.class2type[toString.call(a)] || "object"
        };
        c.isNativeObject = function(a) {
            return "object" === c.getType(a)
        };
        c.getDigits = function(a) {
            var b = [];
            if (0 === a) b.push(0);
            else if (0 <
                a)
                for (; 0 < a;) b.unshift(a % 10), a = Math.floor(a / 10);
            return b
        };
        c.makeUnselectable = function(a, b) {
            if (a && (1 === a.nodeType && a.setAttribute("unselectable", "on"), b))
                for (var e = a.firstChild; e;) c.makeUnselectable(e, b), e = e.nextSibling
        };
        c.addClass = function(a, b) {
            var e = a.hasOwnProperty("className"),
                c = e ? a.className : a.getAttribute("class"),
                d = [],
                g = "object" === typeof b && "number" === typeof b.length ? b : [b],
                h;
            "string" === typeof c && 0 < c.length && (d = c.split(" "));
            for (h = 0; h < g.length; h += 1) c = g[h], -1 === d.indexOf(c) && d.push(c);
            e ? a.className =
                d.join(" ") : a.setAttribute("class", d.join(" "))
        };
        c.removeClass = function(a, b) {
            var e = a.hasOwnProperty("className"),
                c = e ? a.className : a.getAttribute("class"),
                d = [],
                g, h = "object" === typeof b && "number" === typeof b.length ? b : [b];
            "string" === typeof c && 0 < c.length && (d = c.split(" "));
            for (c = 0; c < h.length; c += 1) g = h[c], g = d.indexOf(g), -1 !== g && d.splice(g, 1);
            e ? a.className = d.join(" ") : a.setAttribute("class", d.join(" "))
        };
        c.hasClass = function(a, b) {
            var e, c = [];
            return a.getAttribute ? (e = a.getAttribute("class"), "string" === typeof e &&
                0 < e.length && (c = e.split(" ")), -1 !== c.indexOf(b)) : !1
        };
        c.countProps = function(a) {
            var b = 0,
                e;
            for (e in a) a.hasOwnProperty(e) && (b += 1);
            return b
        };
        c.cloneObject = function(a, b) {
            var e, f;
            if ("string" === typeof a) e = a;
            else
                for (f in e = {}, a) a.hasOwnProperty(f) && (e[f] = b && "object" === typeof a[f] ? c.cloneObject(a[f], b) : a[f]);
            return e
        };
        c.extendObj = function(a, b, e) {
            var f;
            b = c.cloneObject(b, e);
            for (f in a) a.hasOwnProperty(f) && (e && b.hasOwnProperty(f) && "object" === typeof b[f] && "object" === typeof a[f] && (b[f] = c.extendObj(a[f], b[f], e)),
                b.hasOwnProperty(f) || (c.isNativeObject(a[f]) ? b[f] = a[f] ? c.cloneObject(a[f], e) : null : b[f] = a[f]));
            return b
        };
        c.equalsObj = function(a, b, e) {
            if (a === b) return !0;
            var f, d = {};
            for (f in a)
                if (a.hasOwnProperty(f) && b.hasOwnProperty(f))
                    if (a[f] === b[f]) d[f] = !0;
                    else if (e)
                if (c.equalsObj(a[f], b[f], e)) d[f] = !0;
                else return !1;
                else {
                    if (a[f] !== b[f]) return !1
                } else return !1;
            for (f in b)
                if (b.hasOwnProperty(f) && a.hasOwnProperty(f)) {
                    if (!d[f])
                        if (e) {
                            if (!c.equalsObj(a[f], b[f], e)) return !1
                        } else if (b[f] !== a[f]) return !1
                } else return !1;
            return !0
        };
        c.inherit = function() {
            var a, b, e, c;
            for (b = 0; b < arguments.length; b += 1)
                if (c = null, "function" === typeof arguments[b] ? c = new arguments[b] : "object" === typeof arguments[b] && (c = arguments[b]), c)
                    if (a)
                        for (e in c) c.hasOwnProperty(e) && (a[e] = c[e]);
                    else a = c;
            return a
        };
        c.objectToParamString = function(a) {
            var b, e = [];
            for (b in a) a.hasOwnProperty(b) && e.push(b + "=" + a[b]);
            return e.join("&")
        };
        c.paramStringToObject = function(a) {
            var b = {}, e, c, d;
            if (a && "string" === typeof a && 1 < a.length)
                for ("?" === a[0] && (a = a.substr(1)), a = a.split("&"), e = 0; e <
                    a.length; e += 1) c = a[e].split("=", 2), 2 === c.length && (d = c[0], c = c[1], d && c && (b[d] = c));
            return b
        };
        c.ajaxBaseUrl = "";
        c.ajax = function(a) {
            if ("object" === typeof a && "string" === typeof a.url) {
                var b, e, f, d, g, h, k, l, n, p;
                f = a && a.params && "object" === typeof a.params ? a.params : null;
                g = a && a.headers && "object" === typeof a.headers ? a.headers : null;
                e = c.ajaxBaseUrl + a.url;
                if (JSON && JSON.parse) {
                    b = new XMLHttpRequest;
                    d = null;
                    h = "function" === typeof a.success ? a.success : null;
                    d = "function" === typeof a.fail ? a.fail : null;
                    k = "function" === typeof a.error ?
                        a.error : d;
                    l = "function" === typeof a.abort ? a.abort : d;
                    f && (d = c.objectToParamString(f), e += "?" + d);
                    b.open("GET", e);
                    if (g)
                        for (p in g) g.hasOwnProperty(p) && b.setRequestHeader(p, g[p]);
                    b.onload = function() {
                        if (h) {
                            var a = null;
                            try {
                                a = JSON.parse(this.responseText)
                            } catch (b) {
                                a = null
                            }
                            a ? h(a) : k && k({
                                status: "error",
                                statusCode: this.status,
                                message: "JSON parse error"
                            })
                        }
                    };
                    b.onerror = function() {
                        k && k({
                            status: "error",
                            statusCode: this.status
                        })
                    };
                    b.onabort = function() {
                        l && l({
                            status: "abort"
                        })
                    };
                    b.send()
                } else "string" === typeof a.jsonp && (f || (f = {}), f.callback = a.callback, d = c.objectToParamString(f), n = c.createScript(e + "?" + d), u.body.appendChild(n), K(function() {
                    n.parentNode && n.parentNode.removeChild(n)
                }, 10))
            }
        };
        c.createScript = function(a, b) {
            var e = u.createElement("script");
            e.type = "text/javascript";
            a && (e.src = a);
            b && (e.innerHTML = b);
            return e
        };
        c.isPropertySupported = function(a) {
            var b = ["Webkit", "Khtml", "Moz", "O", "ms"],
                e = (u.body || u.documentElement).style,
                c = a.charAt(0).toUpperCase() + a.substring(1);
            if ("string" === typeof e[a]) return !0;
            for (a = 0; a < b.length; a +=
                1)
                if ("undefined" !== typeof e[b[a] + c]) return !0;
            return !1
        };
        c.getPrefixedProperty = function(a, b) {
            var e = ["Webkit", "Khtml", "Moz", "O", "ms"],
                c = b.style,
                d = a.charAt(0).toUpperCase() + a.substring(1),
                g;
            if ("string" === typeof c[a]) return a;
            for (g = 0; g < e.length; g += 1)
                if ("undefined" !== typeof c[e[g] + d]) return e[g] + d;
            return a
        };
        c.addOnClick = function(a, b, e) {
            a.onclick = b;
            e && a.addEventListener("touchstart", function(a) {
                a.currentTarget.onclick(a);
                a.preventDefault();
                a.stopPropagation();
                return !1
            }, !1)
        };
        c.isMobile = {
            Android: function() {
                return x.userAgent.match(/Android/i)
            },
            FirefoxOS: function() {
                return -1 == x.userAgent.indexOf("Android") && 0 <= x.userAgent.indexOf("Firefox") && 0 <= x.userAgent.indexOf("Mobile")
            },
            BlackBerry: function() {
                return x.userAgent.match(/BlackBerry/i)
            },
            iOS: function() {
                return x.userAgent.match(/iPhone|iPad|iPod/i)
            },
            iPod: function() {
                return x.userAgent.match(/iPod/i)
            },
            iPhone: function() {
                return x.userAgent.match(/iPhone/i)
            },
            iPad: function() {
                return x.userAgent.match(/iPad/i)
            },
            Opera: function() {
                return x.userAgent.match(/Opera Mini/i)
            },
            Windows: function() {
                return x.userAgent.match(/IEMobile/i)
            },
            any: function() {
                return c.isMobile.Android() || c.isMobile.BlackBerry() || c.isMobile.iOS() || c.isMobile.Opera() || c.isMobile.Windows() || c.isMobile.FirefoxOS()
            },
            Safari: function() {
                return c.isMobile.iOS() && !c.isMobile.ChromeIOS() && x.userAgent.match(/AppleWebKit/i)
            },
            iPhoneSafari: function() {
                return (c.isMobile.iPhone() || c.isMobile.iPod()) && !c.isMobile.ChromeIOS() && x.userAgent.match(/AppleWebKit/i)
            },
            ChromeIOS: function() {
                return c.isMobile.iOS() && x.userAgent.match("CriOS")
            },
            ChromeAndroid: function() {
                return x.userAgent.match(/Android.+Chrome|CrMo/i)
            }
        };
        c.getIOSVersion = function() {
            var a = x.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),
                a = [parseInt(a[1], 10), parseInt(a[2], 10), parseInt(a[3] || 0, 10)];
            return parseFloat(a.join("."))
        };
        c.visibility = {
            MAP: {
                hidden: "visibilitychange",
                mozHidden: "mozvisibilitychange",
                msHidden: "msvisibilitychange",
                webkitHidden: "webkitvisibilitychange"
            },
            mIsSupported: !1,
            mCheckedIfSupported: !1,
            mHidden: null,
            mVisibilityChange: null,
            mOnChangeFunctions: [],
            addOnChange: function(a) {
                return this.isSupported() && -1 === this.mOnChangeFunctions.indexOf(a) ?
                    (u.addEventListener(this.mVisibilityChange, a, !1), !0) : !1
            },
            removeOnChange: function(a) {
                if (this.isSupported()) {
                    var b = this.mOnChangeFunctions.indexOf(a);
                    if (-1 !== b) return u.removeEventListener(this.mVisibilityChange, a), this.mOnChangeFunctions.splice(b, 1), !0
                }
                return !1
            },
            getOnChangeFunctions: function() {
                return this.mOnChangeFunctions
            },
            isSupported: function() {
                if (!this.mCheckedIfSupported) {
                    for (var a in this.MAP)
                        if (this.MAP.hasOwnProperty(a) && "undefined" !== typeof u[a]) {
                            this.mHidden = a;
                            this.mVisibilityChange = this.MAP[a];
                            this.mIsSupported = !0;
                            break
                        }
                    this.mCheckedIfSupported = !0
                }
                return this.mIsSupported
            },
            isHidden: function() {
                return this.isSupported() ? u[this.mHidden] : !1
            }
        };
        c.bindFnc = function(a, b) {
            return function() {
                return b.apply(a, arguments)
            }
        }
    })();
    Y.prototype = {
        get: function(a) {
            var b = this.map[a];
            b || (this.map[a] = b = u.getElementById(a));
            return b
        },
        create: function(a, b, e, c) {
            a = u.createElement(a);
            var d;
            b && (a.hasOwnProperty("id") ? a.id = b : a.setAttribute("id", b));
            e && (a.hasOwnProperty("className") ? a.className = e : a.setAttribute("class",
                e));
            if (c)
                for (d in c) c.hasOwnProperty(d) && (a.hasOwnProperty(d) ? a[d] = c[d] : a.setAttribute(d, c[d]));
            return a
        }
    };
    var r = new Y;
    A.prototype = {
        addEventListener: function(a, b) {
            return "function" === typeof b && (this.eventMap.hasOwnProperty(a) || (this.eventMap[a] = []), -1 === this.eventMap[a].indexOf(b)) ? (this.eventMap[a].push(b), !0) : !1
        },
        removeEventListener: function(a, b) {
            if ("function" === typeof b && this.eventMap[a]) {
                var e = this.eventMap[a].indexOf(b);
                if (-1 !== e) return this.eventMap[a].splice(e, 1), !0
            }
            return !1
        },
        removeAllEventListeners: function(a) {
            if (this.eventMap[a]) {
                for (a =
                    this.eventMap[a]; 0 < a.length;) a.pop();
                return !0
            }
            return !1
        },
        dispatch: function(a, b) {
            var e = {
                source: this,
                name: a,
                data: b
            }, c, d;
            if (this.eventMap[a]) {
                d = this.eventMap[a];
                for (c = 0; c < d.length; c += 1) d[c](e);
                return !0
            }
            return !1
        }
    };
    F.events = {
        DOWN: "down",
        UP: "up",
        PRESS: "press"
    };
    F.keys = {
        SPACE: 32,
        0: 48,
        1: 49,
        2: 50,
        3: 51,
        4: 52,
        5: 53,
        6: 54,
        7: 55,
        8: 56,
        9: 57,
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        ARROWLEFT: 37,
        ARROWUP: 38,
        ARROWRIGHT: 39,
        ARROWDOWN: 40
    };
    F.prototype = c.inherit(new A, {
        keyDown: function(a) {
            this.keyMap[a.keyCode] || (this.keyMap[a.keyCode] = !0, this.dispatch(F.events.DOWN, {
                keyCode: a.keyCode,
                keyMap: this.keyMap,
                originalEvent: a
            }))
        },
        keyUp: function(a) {
            this.keyMap[a.keyCode] && (this.keyMap[a.keyCode] = !1, this.dispatch(F.events.UP, {
                keyCode: a.keyCode,
                keyMap: this.keyMap,
                originalEvent: a
            }))
        },
        keyPress: function(a) {
            this.dispatch(F.events.PRESS, {
                keyCode: a.keyCode,
                keyMap: this.keyMap,
                originalEvent: a
            })
        }
    });
    t.events = {
        DOWN: "down",
        MOVE: "move",
        UP: "up",
        CLICK: "click",
        MOUSEDOWN: "mousedown",
        MOUSEMOVE: "mousemove",
        MOUSEUP: "mouseup",
        MOUSECLICK: "mouseclick",
        TOUCHSTART: "touchstart",
        TOUCHMOVE: "touchmove",
        TOUCHEND: "touchend"
    };
    t.prototype = c.inherit(new A, {
        resize: function(a) {},
        resetSkips: function() {
            this.skipMouseUp = this.skipMouseDown = 0
        },
        updateMousePos: function(a) {
            var b = a.target.getBoundingClientRect(),
                e = b.left,
                b = b.top,
                c = 0,
                d = 0;
            switch (a.type) {
                case "touchstart":
                case "touchmove":
                case "touchend":
                    c = a.changedTouches[0].pageX;
                    d = a.changedTouches[0].pageY;
                    break;
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "click":
                    c =
                        a.pageX, d = a.pageY
            }
            c -= e;
            d -= b;
            this.mouseX = c;
            this.mouseY = d;
            this.scaledMouseX = Math.round(c * this.scaleX);
            this.scaledMouseY = Math.round(d * this.scaleY)
        },
        mouseDown: function(a) {
            a.preventDefault();
            a.stopPropagation();
            this.updateMousePos(a);
            this.dispatch(t.events.MOUSEDOWN, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            });
            0 < this.skipMouseDown ? this.skipMouseDown -= 1 : this.dispatch(t.events.DOWN, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            })
        },
        mouseMove: function(a) {
            a.preventDefault();
            a.stopPropagation();
            this.updateMousePos(a);
            this.dispatch(t.events.MOUSEMOVE, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            });
            0 === this.numTouch && this.dispatch(t.events.MOVE, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            })
        },
        mouseUp: function(a) {
            a.preventDefault();
            a.stopPropagation();
            this.updateMousePos(a);
            this.dispatch(t.events.MOUSEUP, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            });
            0 < this.skipMouseUp ? this.skipMouseUp -= 1 : this.dispatch(t.events.UP, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            })
        },
        mouseClick: function(a) {
            a.preventDefault();
            a.stopPropagation();
            this.updateMousePos(a);
            this.dispatch(t.events.MOUSECLICK, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            });
            0 === this.numTouch &&
                this.dispatch(t.events.CLICK, {
                    originalEvent: a,
                    x: this.mouseX,
                    y: this.mouseY,
                    scaledX: this.scaledMouseX,
                    scaledY: this.scaledMouseY
                })
        },
        touchStart: function(a) {
            a.preventDefault();
            a.stopPropagation();
            this.updateMousePos(a);
            this.numTouch += 1;
            this.skipMouseDown += 1;
            this.dispatch(t.events.TOUCHSTART, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            });
            this.dispatch(t.events.DOWN, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            })
        },
        touchMove: function(a) {
            a.preventDefault();
            a.stopPropagation();
            this.updateMousePos(a);
            this.dispatch(t.events.TOUCHMOVE, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            });
            this.dispatch(t.events.MOVE, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            })
        },
        touchEnd: function(a) {
            a.preventDefault();
            a.stopPropagation();
            this.updateMousePos(a);
            this.numTouch -= 1;
            this.skipMouseUp += 1;
            this.dispatch(t.events.TOUCHEND, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            });
            this.dispatch(t.events.UP, {
                originalEvent: a,
                x: this.mouseX,
                y: this.mouseY,
                scaledX: this.scaledMouseX,
                scaledY: this.scaledMouseY
            })
        }
    });
    Z.prototype = {
        hasCookie: function(a) {
            return this.cookieMap.hasOwnProperty(a)
        },
        getCookie: function(a, b, e) {
            if (this.cookieMap[a]) return this.cookieMap[a];
            e && this.setCookie(a, b, e);
            return b
        },
        setCookie: function(a, b, e) {
            var c = new Date;
            c.setSeconds(c.getSeconds() + e);
            u.cookie = a + "=" + b + "; expires=" + c.toUTCString();
            this.cookieMap[a] = b
        },
        parseCookies: function() {
            return u.cookie.split(";").map(function(a) {
                return a.trim().split("=")
            }).reduce(function(a, b) {
                a[b[0]] = b[1];
                return a
            }, {})
        }
    };
    var C = new Z;
    z.events = {
        CHECKING: "checking",
        LOADNORMALLY: "loadnormally",
        UPDATINGCACHE: "updatingcache",
        UPDATEPROGRESS: "updateprogress",
        UPDATEREADY: "updateready"
    };
    z.prototype = c.inherit(new A, {
        init: function() {
            if (this.appCache)
                if (this.appCache.status === this.appCache.UNCACHED) this.loadNormally();
                else {
                    if (this.appCache.addEventListener("checking",
                        c.bindFnc(this, this.checking), !1), this.appCache.addEventListener("noupdate", c.bindFnc(this, this.loadNormally), !1), this.appCache.addEventListener("obsolete", c.bindFnc(this, this.loadNormally), !1), this.appCache.addEventListener("error", c.bindFnc(this, this.loadNormally), !1), this.appCache.addEventListener("cached", c.bindFnc(this, this.loadNormally), !1), this.appCache.addEventListener("downloading", c.bindFnc(this, this.updatingCache), !1), this.appCache.addEventListener("progress", c.bindFnc(this, this.updateProgress), !1), this.appCache.addEventListener("updateready", c.bindFnc(this, this.updateReady), !1), this.appCache.status === this.appCache.IDLE) try {
                        this.appCache.update()
                    } catch (a) {
                        this.loadNormally()
                    }
                } else this.loadNormally()
        },
        checking: function(a) {
            this.finished || this.dispatch(z.events.CHECKING, {
                appCache: this.appCache,
                originalEvent: a
            })
        },
        loadNormally: function(a) {
            this.finished || (this.finished = !0, this.dispatch(z.events.LOADNORMALLY, {
                appCache: this.appCache,
                originalEvent: a
            }))
        },
        updateProgress: function(a) {
            this.finished ||
                this.dispatch(z.events.UPDATEPROGRESS, {
                    appCache: this.appCache,
                    originalEvent: a,
                    lengthComputable: a.lengthComputable,
                    total: a.total,
                    loaded: a.loaded
                })
        },
        updatingCache: function(a) {
            this.finished || this.dispatch(z.events.UPDATINGCACHE, {
                appCache: this.appCache,
                originalEvent: a
            })
        },
        updateReady: function(a) {
            if (!this.finished) {
                this.finished = !0;
                this.dispatch(z.events.UPDATEREADY, {
                    appCache: this.appCache,
                    originalEvent: a
                });
                try {
                    this.appCache.swapCache()
                } catch (b) {}
                this.reloadOnNewUpdate && N.reload()
            }
        }
    });
    H.COOKIE_PREFIX = "abt-";
    H.COOKIE_TTL = 31536E3;
    H.prototype = {
        getTestValue: function(a) {
            return this.testsMap[a]
        },
        isTestValue: function(a, b) {
            return this.testsMap.hasOwnProperty(a) && this.testsMap[a] === b
        },
        hasTest: function(a) {
            return this.testsMap.hasOwnProperty(a)
        }
    };
    k.IDPOOL = 0;
    k.easingFunctions = {
        linear: function(a) {
            return a
        },
        easeInQuad: function(a) {
            return a * a
        },
        easeOutQuad: function(a) {
            return a * (2 - a)
        },
        easeInOutQuad: function(a) {
            return 0.5 > a ? 2 * a * a : -1 + (4 - 2 * a) * a
        },
        easeInCubic: function(a) {
            return a * a * a
        },
        easeOutCubic: function(a) {
            return --a * a *
                a + 1
        },
        easeInOutCubic: function(a) {
            return 0.5 > a ? 4 * a * a * a : (a - 1) * (2 * a - 2) * (2 * a - 2) + 1
        },
        easeInQuart: function(a) {
            return a * a * a * a
        },
        easeOutQuart: function(a) {
            return 1 - --a * a * a * a
        },
        easeInOutQuart: function(a) {
            return 0.5 > a ? 8 * a * a * a * a : 1 - 8 * --a * a * a * a
        },
        easeInQuint: function(a) {
            return a * a * a * a * a
        },
        easeOutQuint: function(a) {
            return 1 + --a * a * a * a * a
        },
        easeInOutQuint: function(a) {
            return 0.5 > a ? 16 * a * a * a * a * a : 1 + 16 * --a * a * a * a * a
        }
    };
    k.prototype = {
        preStart: function() {
            this.prepared = !1;
            this.endTime = this.startTime = -1
        },
        start: function(a) {
            this.prepared = !0;
            this.startTime = a;
            this.endTime = a + this.duration;
            this.startCallback && this.startCallback(this.startValue, 0, 0)
        },
        step: function(a, b) {
            var e = this.timeFunction(a),
                c = this.startValue + (this.endValue - this.startValue) * e;
            this.stepCallback && this.stepCallback(c, e, a)
        },
        end: function() {
            this.prepared = !1;
            this.endTime = this.startTime = -1;
            this.endCallback && this.endCallback(this.endValue, 1, 1)
        },
        stop: function() {
            this.prepared = !1;
            this.endTime = this.startTime = -1
        }
    };
    W.prototype = c.inherit(new k, {
        preStart: function() {
            k.prototype.preStart.call(this);
            var a;
            for (a = 0; a < this.anims.length; a += 1) this.anims[a].preStart()
        },
        start: function(a) {
            var b = 0,
                e, c;
            this.currentIndex = 0;
            k.prototype.start.call(this, a);
            for (e = 0; e < this.anims.length; e += 1) c = this.anims[e], c.startTime = a + b, c.endTime = c.startTime + c.duration, b += c.duration
        },
        step: function(a, b) {
            k.prototype.step.call(this, a, b);
            if (this.currentIndex < this.anims.length) {
                var e, c;
                do e = this.anims[this.currentIndex], c = !1, e && (e.prepared || e.start(e.startTime), b >= e.startTime && b < e.endTime ? (c = (b - e.startTime) / e.duration, e.step(c,
                    b), c = !1) : b >= e.endTime && (e.step(1, b), e.end(), this.currentIndex += 1, c = !0)); while (c)
            }
        },
        end: function() {
            k.prototype.end.call(this);
            this.currentIndex = this.anims.length
        },
        stop: function() {
            k.prototype.stop.call(this);
            this.currentIndex = this.anims.length;
            var a;
            for (a = 0; a < this.anims.length; a += 1) this.anims[a].stop()
        }
    });
    Q.prototype = c.inherit(new k, {
        preStart: function() {
            var a;
            k.prototype.preStart.call(this);
            for (a = 0; a < this.anims.length; a += 1) this.anims[a].preStart()
        },
        start: function(a) {
            var b;
            k.prototype.start.call(this,
                a);
            for (b = 0; b < this.anims.length; b += 1) this.anims[b].start(a)
        },
        step: function(a, b) {
            var c;
            k.prototype.step.call(this, a, b);
            for (c = 0; c < this.anims.length; c += 1) this.anims[c].step(a, b)
        },
        end: function() {
            var a;
            k.prototype.end.call(this);
            for (a = 0; a < this.anims.length; a += 1) this.anims[a].end()
        },
        stop: function() {
            var a;
            k.prototype.stop.call(this);
            for (a = 0; a < this.anims.length; a += 1) this.anims[a].stop()
        }
    });
    $.prototype = c.inherit(new A, R.prototype, {
        addAnim: function(a) {
            this.anims[a.id] = a;
            a.manager = this
        },
        removeAnim: function(a) {
            if (a =
                this.anims["string" === typeof a ? a : a.id]) this.anims[a.id] = void 0, a.manager = null
        },
        update: function(a, b, c, d) {
            if (0 < this.activeAnims.length)
                for (a = 0; a < this.activeAnims.length; a += 1) d = this.activeAnims[a], d.prepared || d.start(c), c >= d.startTime && c < d.endTime ? (b = (c - d.startTime) / d.duration, d.step(b, c)) : c >= d.endTime && (d.step(1, c), d.end(), this.activeAnims.splice(a, 1), a -= 1)
        },
        createAnim: function(a) {
            new k(c.extendObj(a, {
                manager: this
            }))
        },
        getAnim: function(a) {
            return this.anims[a]
        },
        startAnimById: function(a) {
            this.startAnim(this.anims[a])
        },
        startAnim: function(a) {
            a.manager = this;
            a.preStart();
            this.activeAnims.push(a)
        },
        stopAnimById: function(a) {
            this.stopAnim(this.anims[a])
        },
        stopAnim: function(a) {
            var b = this.activeAnims.indexOf(a);
            a.stop(); - 1 !== b && this.activeAnims.splice(b, 1)
        }
    });
    R.prototype = {
        update: function(a, b, c, d) {}
    };
    B.prototype = {
        draw: function(a) {},
        getStageX: function() {
            return this.parent ? this.parent.x + this.x - this.anchorX : this.x - this.anchorX
        },
        getStageY: function() {
            return this.parent ? this.parent.y + this.y - this.anchorY : this.y - this.anchorY
        },
        isGloballyVisible: function() {
            return this.parent &&
                this.parent.isGloballyVisible ? this.parent.isGloballyVisible() : !0
        },
        getTopVisible: function() {
            return this.parent && this.parent.getTopVisible ? this.parent.getTopVisible() : !1
        }
    };
    S.prototype = c.inherit(new h, B.prototype, {
        draw: function(a) {
            this.visible && 0 < this.opacity && (a.save(), a.translate(this.left, this.top), 1 > this.opacity && (a.globalAlpha = this.opacity), a.fillStyle = this.fillStyle, a.fillRect(-this.anchorX, -this.anchorY, this.getWidth(), this.getHeight()), a.restore())
        }
    });
    y.prototype = c.inherit(new B, {
        addChild: function(a) {
            return -1 ===
                this.children.indexOf(a) ? (a.parent = this, this.children.push(a), !0) : !1
        },
        removeChild: function(a) {
            var b = this.children.indexOf(a);
            return -1 !== b ? (a.parent = null, this.children.splice(b, 1), a) : null
        },
        removeChildAt: function(a) {
            return a < this.children.length ? (this.children[a].parent = null, this.children.splice(a, 1)) : null
        },
        removeAllChilds: function() {
            for (; 0 < this.children.length;) this.removeChildAt(0)
        },
        draw: function(a) {
            if (this.visible && 0 < this.opacity) {
                var b;
                a.save();
                1 > this.opacity && (a.globalAlpha = this.opacity);
                a.translate(this.x -
                    this.anchorX, this.y - this.anchorY);
                a.scale(this.scaleX, this.scaleY);
                for (b = 0; b < this.children.length; b += 1) this.children[b].draw(a);
                a.restore()
            }
        },
        isGloballyVisible: function() {
            var a = this;
            do {
                if (!a.visible) return !1;
                a = a.parent
            } while (a);
            return !0
        },
        getTopVisible: function() {
            return this.parent && this.parent.getTopVisible ? this.parent.getTopVisible() : this.visible
        },
        getTopOpacity: function() {
            return this.parent && this.parent.getTopOpacity ? this.parent.getTopOpacity() : this.opacity
        }
    });
    I.prototype = c.inherit(new B, {
        draw: function(a) {
            this.visible &&
                0 < this.opacity && (a.save(), 1 > this.opacity && (a.globalAlpha = this.opacity), a.translate(this.x, this.y), a.scale(this.scaleX, this.scaleY), a.rotate(this.angle), a.drawImage(this.image, this.sourceRect.left, this.sourceRect.top, this.sourceRect.getWidth(), this.sourceRect.getHeight(), -this.anchorX, -this.anchorY, this.width, this.height), a.restore())
        }
    });
    aa.prototype = c.inherit(new B, {
        draw: function(a) {
            var b = 0 !== this.imageWidth ? this.offsetX % this.imageWidth : this.offsetX,
                c = 0 !== this.imageHeight ? this.offsetY % this.imageHeight :
                    this.offsetY;
            a.save();
            a.translate(this.x, this.y);
            a.scale(this.imageScaleX, this.imageScaleY);
            a.rotate(this.angle);
            a.translate(b / this.imageScaleX + this.imageOffsetX, c / this.imageScaleY + this.imageOffsetY);
            a.fillStyle = this.pattern;
            a.fillRect(-b / this.imageScaleX - this.imageOffsetX, -c / this.imageScaleY - this.imageOffsetY, this.width * this.scaleX / this.imageScaleX, this.height * this.scaleY / this.imageScaleY);
            a.restore()
        }
    });
    T.prototype = c.inherit(new I, {
        setFrameId: function(a) {
            var b = this.frameMap[a];
            this.currentFrameId =
                a;
            this.sourceRect = b
        },
        copy: function() {
            var a = c.cloneObject(this.options),
                b;
            if (a.frameMap)
                for (b in a.frameMap) a.frameMap.hasOwnProperty(b) && (a.frameMap[b] = a.frameMap[b].copy());
            else a.rect && (a.rect = a.rect.copy());
            return new T(a)
        },
        applyFromOptions: function(a) {
            var b = a || {}, c;
            I.call(this, a);
            this.options = a;
            this.frameMap = b.frameMap || null;
            this.currentFrameId = b.startFrameId || null;
            if (this.frameMap)
                if (this.currentFrameId) this.setFrameId(this.currentFrameId);
                else
                    for (c in this.frameMap) {
                        if (this.frameMap.hasOwnProperty(c)) {
                            this.setFrameId(c);
                            break
                        }
                    } else this.sourceRect = b.rect || this.sourceRect || new h
        }
    });
    p.IDPOOL = 0;
    p.states = {
        UP: "up",
        DOWN: "down",
        HOVER: "hover",
        DISABLED: "disabled"
    };
    p.events = {
        CLICK: "click",
        DOWN: "down",
        UP: "up",
        HOVER: "hover"
    };
    p.prototype = c.inherit(new T, A.prototype, {
        click: function(a) {
            this.enabled && this.dispatch(p.events.CLICK, {
                originalEvent: a
            })
        },
        down: function(a) {
            this.enabled && (this.setState(p.states.DOWN), this.dispatch(p.events.DOWN, {
                originalEvent: a
            }))
        },
        up: function(a) {
            this.enabled && (this.setState(p.states.UP), this.dispatch(p.events.UP, {
                originalEvent: a
            }))
        },
        hover: function(a) {
            this.enabled && (this.setState(p.states.HOVER), this.dispatch(p.events.HOVER, {
                originalEvent: a
            }))
        },
        setEnabled: function(a) {
            (this.enabled = a) ? this.setState(p.states.UP) : this.setState(p.states.DISABLED)
        },
        setState: function(a) {
            this.state = a;
            this.anchorY = this.state === p.states.DOWN ? -5 : 0
        },
        contains: function(a, b) {
            var c = this.getStageX(),
                d = this.getStageY();
            return a >= c && a < c + this.width && b >= d && b < d + this.height
        }
    });
    M.prototype = c.inherit(new B, {
        draw: function(a) {
            this.visible && 0 < this.opacity &&
                (a.save(), 1 > this.opacity && (a.globalAlpha = this.opacity), a.translate(this.x, this.y), a.rotate(this.angle), a.scale(this.scaleX, this.scaleY), a.textAlign = this.textAlign, a.textBaseline = this.textBaseline, a.fillText(this.text, -this.anchorX, -this.anchorY), a.restore())
        }
    });
    q.gaEvents = {
        PLAYBUTTON: "playbutton",
        TAPTAP: "taptap",
        REPLAY: "replay",
        SHARE_TW: "share_tw",
        SHARE_FB: "share_fb",
        SHARE_KIK: "share_kik",
        KIKMSG_RECEIVED: "kikmsg_received",
        KIKMSG_SENT: "kikmsg_sent",
        ENDGAME: "endgame",
        PASS_TUBE: "pass_tube",
        INTERSTITIAL_SHOWN: "interstitial_shown",
        INTERSTITIAL_HIDDEN: "interstitial_hidden",
        INTERSTITIAL_ERROR: "interstitial_error",
        GAMEOVERAD_SHOWN: "gameoverad_shown",
        GAMEOVERAD_HIDDEN: "gameoverad_hidden",
        GAMEOVERAD_ROTATED: "gameoverad_rotated",
        GAMEOVERAD_ERROR: "gameoverad_error"
    };
    q.prototype = {
        init: function() {
            this.game.addEventListener(d.events.initted, c.bindFnc(this, this.gameInitted));
            this.game.buttonManager.addEventListener(E.events.CLICK, c.bindFnc(this, this.onButtonClick));
            this.game.addEventListener(d.events.stateChanged, c.bindFnc(this, this.onStateChange));
            this.initAdManagerListeners()
        },
        initAdManagerListeners: function() {
            this.game.adManager && (this.game.adManager.addEventListener(v.events.INTERSTITIALSHOWN, c.bindFnc(this, this.interstitialShown)), this.game.adManager.addEventListener(v.events.INTERSTITIALHIDDEN, c.bindFnc(this, this.interstitialHidden)), this.game.adManager.addEventListener(v.events.GAMEOVERADSHOWN, c.bindFnc(this, this.gameOverAdShown)), this.game.adManager.addEventListener(v.events.GAMEOVERADHIDDEN, c.bindFnc(this, this.gameOverAdHidden)))
        },
        interstitialShown: function(a) {
            if (a && a.data && a.data.ad) {
                var b = "ad";
                0 < (a.data.ad.platforms & l.platforms.DESKTOP) && (b += "-desktop");
                0 < (a.data.ad.platforms & l.platforms.MOBILE) && (b += "-mobile");
                0 < (a.data.ad.platforms & l.platforms.TABLET) && (b += "-tablet");
                a.source && a.source.desktopPage && (b += "-landingpage");
                this.gaAdEvent(q.gaEvents.INTERSTITIAL_SHOWN, b)
            } else this.gaErrorEvent(q.gaEvents.INTERSTITIAL_ERROR, "shown-no-ad")
        },
        interstitialHidden: function(a) {
            if (a && a.data && a.data.ad) {
                var b = "ad";
                0 < (a.data.ad.platforms &
                    l.platforms.DESKTOP) && (b += "-desktop");
                0 < (a.data.ad.platforms & l.platforms.MOBILE) && (b += "-mobile");
                0 < (a.data.ad.platforms & l.platforms.TABLET) && (b += "-tablet");
                a.source && a.source.desktopPage && (b += "-landingpage");
                this.gaAdEvent(q.gaEvents.INTERSTITIAL_HIDDEN, b)
            } else this.gaErrorEvent(q.gaEvents.INTERSTITIAL_ERROR, "hidden-no-ad")
        },
        gameOverAdShown: function(a) {
            if (a && a.data && a.data.ad) {
                var b = "ad";
                0 < (a.data.ad.platforms & l.platforms.DESKTOP) && (b += "-desktop");
                0 < (a.data.ad.platforms & l.platforms.MOBILE) && (b += "-mobile");
                0 < (a.data.ad.platforms & l.platforms.TABLET) && (b += "-tablet");
                a.source && a.source.desktopPage && (b += "-landingpage");
                this.gaAdEvent(q.gaEvents.GAMEOVERAD_SHOWN, b)
            } else this.gaErrorEvent(q.gaEvents.GAMEOVERAD_ERROR, "shown-no-ad")
        },
        gameOverAdHidden: function(a) {
            if (a && a.data && a.data.ad) {
                var b = "ad";
                0 < (a.data.ad.platforms & l.platforms.DESKTOP) && (b += "-desktop");
                0 < (a.data.ad.platforms & l.platforms.MOBILE) && (b += "-mobile");
                0 < (a.data.ad.platforms & l.platforms.TABLET) && (b += "-tablet");
                a.source && a.source.desktopPage && (b +=
                    "-landingpage");
                this.gaAdEvent(q.gaEvents.GAMEOVERAD_HIDDEN, b)
            } else this.gaErrorEvent(q.gaEvents.GAMEOVERAD_ERROR, "hidden-no-ad")
        },
        gameOverAdRotated: function(a) {
            if (a && a.data && a.data.ad) {
                var b = "ad";
                0 < (a.data.ad.platforms & l.platforms.DESKTOP) && (b += "-desktop");
                0 < (a.data.ad.platforms & l.platforms.MOBILE) && (b += "-mobile");
                0 < (a.data.ad.platforms & l.platforms.TABLET) && (b += "-tablet");
                a.source && a.source.desktopPage && (b += "-landingpage");
                this.gaAdEvent(q.gaEvents.GAMEOVERAD_ROTATED, b)
            } else this.gaErrorEvent(q.gaEvents.GAMEOVERAD_ERROR,
                "rotated-no-ad")
        },
        gameInitted: function(a) {
            a = {};
            var b = !1,
                e, d = this.game.abTestManager.testsMap,
                g = this.game.initialUrlQuery;
            this.game.kikEnabled && (b = a.kik = !0);
            for (e in d) d.hasOwnProperty(e) && (a[H.COOKIE_PREFIX + e] = d[e], b = !0);
            for (e in g) g.hasOwnProperty(e) && (a[e] = g[e], b = !0);
            b && this.gaSetCurrentPage("/?" + c.objectToParamString(a), u.title);
            this.gaPageView();
            this.game.kikEnabled && !this.game.kikShareIdCreated && this.game.kikShareId && this.gaKikShareEvent(q.gaEvents.KIKMSG_RECEIVED, this.game.kikShareId)
        },
        onStateChange: function(a) {
            if (a &&
                a.data && a.data.state) {
                var b = 1 >= this.game.numPlays;
                switch (a.data.state) {
                    case d.states.instructions:
                        b || this.gaPageView();
                        break;
                    case d.states.showingBoard:
                        this.gaGameplayEvent(q.gaEvents.ENDGAME), b ? this.gaLevelFirstPlayEvent(q.gaEvents.PASS_TUBE, this.game.kikEnabled ? "kik-tube-" + this.game.score : "nonkik-tube-" + this.game.score) : this.gaLevelReplayEvent(q.gaEvents.PASS_TUBE, this.game.kikEnabled ? "kik-tube-" + this.game.score : "nonkik-tube-" + this.game.score)
                }
            }
        },
        onButtonClick: function(a) {
            if (a && a.data && a.data.button) switch (a.data.button.id) {
                case "mainMenuPlayButton":
                    this.gaButtonEvent(q.gaEvents.PLAYBUTTON,
                        this.game.kikEnabled ? "playbutton_kik" : "playbutton_nonkik");
                    break;
                case "gameOverPlayButton":
                    this.gaButtonEvent(q.gaEvents.REPLAY, this.game.kikEnabled ? "replay_kik" : "replay_nonkik");
                    break;
                case "kikButton":
                    this.gaButtonEvent(q.gaEvents.SHARE_KIK);
                    this.game.kikShareId && this.gaKikShareEvent(q.gaEvents.KIKMSG_SENT, this.game.kikShareId);
                    break;
                case "gameOverTweetButton":
                    this.gaButtonEvent(q.gaEvents.SHARE_TW);
                    break;
                case "gameOverFBButton":
                    this.gaButtonEvent(q.gaEvents.SHARE_FB)
            }
        },
        gaPageLoadEvent: function(a,
            b, c) {
            this.gaSend({
                hitType: "event",
                eventCategory: "pageload",
                eventAction: a,
                eventLabel: b,
                eventValue: c,
                nonInteraction: 1
            })
        },
        gaKikShareEvent: function(a, b, c) {
            this.gaNonInteractionEvent("kikshare", a, b, c)
        },
        gaAdEvent: function(a, b, c) {
            this.gaEvent("ad", a, b, c)
        },
        gaButtonEvent: function(a, b, c) {
            this.gaEvent("button", a, b, c)
        },
        gaErrorEvent: function(a, b, c) {
            this.gaEvent("error", a, b, c)
        },
        gaTimingEvent: function(a, b, c) {
            this.gaEvent("timing", a, b, c)
        },
        gaGameplayEvent: function(a, b, c) {
            this.gaEvent("gameplay", a, b, c)
        },
        gaLevelFirstPlayEvent: function(a,
            b, c) {
            this.gaEvent("level_firstplay", a, b, c)
        },
        gaLevelReplayEvent: function(a, b, c) {
            this.gaEvent("level_replay", a, b, c)
        },
        gaKikPage: function(a, b, c) {
            this.gaEvent("kik_page", a, b, c)
        },
        gaSend: function(a) {
            g.ga && g.ga("send", a)
        },
        gaEvent: function(a, b, c, d) {
            g.ga && g.ga("send", "event", a, b, c, d)
        },
        gaNonInteractionEvent: function(a, b, c, d) {
            this.gaSend({
                hitType: "event",
                eventCategory: a,
                eventAction: b,
                eventLabel: c,
                eventValue: d,
                nonInteraction: 1
            })
        },
        gaPageView: function(a) {
            g.ga && (a = a ? c.extendObj(this.pageObj, a) : this.pageObj, g.ga("send",
                "pageview", a))
        },
        gaSetCurrentPage: function(a, b) {
            this.pageObj = {
                page: a,
                title: b
            };
            this.gaSet(this.pageObj)
        },
        gaSet: function(a) {
            g.ga && g.ga("set", a)
        }
    };
    U.createCombinedId = function(a, b) {
        var e = b || {}, d = e.scaleX || 1,
            g = e.scaleY || 1;
        e.hasOwnProperty("scale") && (d = g = e.scale);
        return c.objectToParamString({
            id: a,
            scaleX: d,
            scaleY: g
        })
    };
    U.prototype = {
        getSprite: function(a) {
            var b = this.sprites[a];
            b || (b = new T(c.inherit(this.spriteMap[a], {
                image: this.image
            })), this.sprites[a] = b);
            return b
        },
        getCanvas: function(a, b) {
            var c, d = U.createCombinedId(a,
                    b);
            c = this.canvases[d];
            c || (c = this.createCanvas(this.spriteMap[a], b), this.canvases[d] = c);
            return c
        },
        createPattern: function(a, b, c) {
            a = this.createCanvas(a, c);
            return this.context.createPattern(a, b || "repeat")
        },
        createRenderableImage: function(a, b) {
            var c = this.createCanvas(a, b);
            return new I({
                image: c,
                width: c.width,
                height: c.height
            })
        },
        createCanvas: function(a, b) {
            var c = b || {}, d = a.left || a.x || 0,
                g = a.top || a.y || 0,
                h = a.right || 0,
                k = a.bottom || 0,
                l = u.createElement("canvas"),
                n = l.getContext("2d"),
                p = c.scaleX || 1,
                q = c.scaleY || 1;
            a.width &&
                (h = d + a.width);
            a.height && (k = g + a.height);
            c.hasOwnProperty("scale") && (p = q = c.scale);
            c = h - d;
            k -= g;
            l.width = c * p;
            l.height = k * q;
            n.save();
            n.scale(p, q);
            n.drawImage(this.image, d, g, c, k, 0, 0, c, k);
            n.restore();
            return l
        }
    };
    O.imgOnLoad = function(a) {
        !this.alreadyLoaded && this.onLoadFunction && (this.alreadyLoaded = !0, this.onLoadFunction(this))
    };
    O.imgOnError = function(a) {
        if (this.onErrorFunction) this.onErrorFunction(this)
    };
    V.prototype = c.inherit(new y, {
        setNumber: function(a) {
            this.number = Math.floor(a);
            this.updateNumber()
        },
        updateNumber: function() {
            var a,
                b, e = c.getDigits(this.number),
                d = [],
                g = 0,
                h = 0,
                k = 0,
                l;
            this.removeAllChilds();
            for (l = 0; l < e.length; l += 1) b = e[l], a = this.baseSprite.copy(), a.setFrameId(b), a.width = a.frameMap[b].getWidth() * this.scaleX, a.height = a.frameMap[b].getHeight() * this.scaleY, d.push(a), h += a.frameMap[b].getWidth() * this.scaleX, l < e.length - 1 && (h += this.numberSpacing * this.scaleX), ("middle" === this.verticalAlign || "bottom" === this.verticalAlign) && a.frameMap[b].getHeight() > k && (k = a.frameMap[b].getHeight() * this.scaleY);
            for (l = 0; l < d.length; l += 1) {
                b = a = 0;
                switch (this.horizontalAlign) {
                    case "left":
                        a = g;
                        break;
                    case "center":
                        a = -h / 2 + g;
                        break;
                    case "right":
                        a = -h + g
                }
                g += d[l].width + this.numberSpacing;
                switch (this.verticalAlign) {
                    case "top":
                        b = k / 2 - d[l].height / 2;
                        break;
                    case "middle":
                        b = -d[l].height / 2;
                        break;
                    case "bottom":
                        b = -k / 2 - d[l].height / 2
                }
                d[l].x = a;
                d[l].y = b;
                this.addChild(d[l])
            }
        }
    });
    ba.prototype = c.inherit(new y, {
        preAnim: function() {
            this.resetNewLabel();
            this.hideMedal();
            this.setScore(0)
        },
        postAnim: function() {
            10 > this.score ? this.hideMedal() : (this.showMedal(), 10 <= this.score &&
                50 > this.score ? this.medalsSprite.setFrameId("bronze") : 50 <= this.score && 100 > this.score ? this.medalsSprite.setFrameId("silver") : 100 <= this.score && this.medalsSprite.setFrameId("gold"));
            this.isBestScoreNew && (this.newLabel.visible = !0)
        },
        setScore: function(a) {
            this.score = a;
            this.flappyNumbersScore.setNumber(a);
            this.score > this.bestScore && (this.bestScore = this.score, this.flappyNumbersBestScore.setNumber(this.bestScore), this.isBestScoreNew = !0)
        },
        setBestScore: function(a) {
            this.bestScore = a;
            this.flappyNumbersScore.setNumber(a)
        },
        resetNewLabel: function() {
            this.isBestScoreNew = !1;
            this.newLabel.visible = !1
        },
        showMedal: function() {
            this.medalsSprite.visible = !0
        },
        hideMedal: function() {
            this.medalsSprite.visible = !1
        }
    });
    D.events = {
        imageLoad: "imageload",
        imageError: "imageerror",
        allImagesLoad: "allimagesload"
    };
    D.prototype = c.inherit(new A, {
        startLoading: function() {
            var a, b = c.bindFnc(this, this.imageLoaded),
                d = c.bindFnc(this, this.imageErrored);
            for (a in this.imgListObj) this.imgListObj.hasOwnProperty(a) && (this.imgs[a] = this.imgs[this.imgListObj[a]] = new O(this.imgListObj[a]),
                this.imgCount += 1, this.imgs[a].imgName = a, this.imgs[a].load(b, d));
            0 === this.imgCount && this.dispatch(D.events.allImagesLoad, {
                loaded: this.imgLoaded,
                total: this.imgCount
            })
        },
        imageLoaded: function(a) {
            this.imgLoaded += 1;
            this.dispatch(D.events.imageLoad, {
                img: a,
                loaded: this.imgLoaded,
                total: this.imgCount
            });
            this.imgLoaded >= this.imgCount && this.dispatch(D.events.allImagesLoad, {
                loaded: this.imgLoaded,
                total: this.imgCount
            })
        },
        imageErrored: function(a) {
            this.imgLoaded += 1;
            this.dispatch(D.events.imageError, {
                img: a,
                loaded: this.imgLoaded,
                total: this.imgCount
            })
        },
        get: function(a) {
            return this.imgs[a]
        }
    });
    J.events = {
        soundLoad: "soundload",
        soundError: "sounderror",
        allSoundsLoad: "allsoundsload"
    };
    J.prototype = c.inherit(new A, {
        startLoading: function() {
            var a, b = [];
            for (a in this.soundMap) this.soundMap.hasOwnProperty(a) && (b.push({
                id: a,
                src: this.soundMap[a]
            }), this.soundsCount += 1, g.cordova && (this.cordovaSounds[this.soundMap[a]] = new Media("file:///android_asset/www/" + this.soundMap[a], function() {}, function() {
                X.log("Error while playing " + this.src)
            })));
            if (g.cordova)
                for (a in this.soundMap) this.soundLoaded();
            else createjs.Sound.addEventListener("fileload", c.bindFnc(this, this.soundLoaded)), createjs.Sound.registerManifest(b, "")
        },
        soundLoaded: function(a) {
            this.soundsLoaded += 1;
            this.dispatch(J.events.soundLoad, {
                loaded: this.soundsLoaded,
                total: this.soundsCount
            });
            this.soundsLoaded >= this.soundsCount && this.dispatch(J.events.allSoundsLoad, {
                loaded: this.soundsLoaded,
                total: this.soundsCount
            })
        },
        soundErrored: function(a) {
            this.soundsError += 1
        },
        get: function(a) {
            return this.sounds[a]
        },
        play: function(a) {
            this.enabled && !this.mute &&
                (g.cordova ? this.cordovaSounds[a].play() : createjs.Sound.play(a))
        },
        stop: function(a) {
            this.enabled && !g.cordova && createjs.Sound.stop(a)
        }
    });
    E.events = {
        DOWN: "down",
        UP: "up",
        HOVERIN: "hoverin",
        HOVEROUT: "hoverout",
        MOVE: "move",
        CLICK: "click"
    };
    E.prototype = c.inherit(new A, {
        addButton: function(a) {
            return -1 === this.buttons.indexOf(a) ? (this.buttons.push(a), !0) : !1
        },
        removeButton: function(a) {
            a = this.buttons.indexOf(a);
            return -1 !== a ? (this.buttons.splice(a, 1), !0) : !1
        },
        onDown: function(a) {
            !this.downedButton && (this.downedButton =
                this.getButtonFromCoords(a.data.scaledX, a.data.scaledY)) && (this.hoveredButton = null, this.downedButton.down(), this.dispatch(E.events.DOWN, {
                button: this.downedButton
            }))
        },
        onMove: function(a) {
            var b = a.data.scaledX;
            a = a.data.scaledY;
            if (this.downedButton) this.downedButton.state === p.states.UP && this.downedButton.contains(b, a) ? this.downedButton.down() : this.downedButton.state !== p.states.DOWN || this.downedButton.contains(b, a) || this.downedButton.up();
            else if (this.hoveredButton) this.hoveredButton.contains(b, a) || (this.hoveredButton.up(),
                this.dispatch(E.events.HOVEROUT, {
                    button: this.hoveredButton
                }), this.hoveredButton = null);
            else if (b = this.getButtonFromCoords(b, a)) this.hoveredButton = b, b.hover(), this.dispatch(E.events.HOVERIN, {
                button: this.hoveredButton
            })
        },
        onUp: function(a) {
            this.downedButton && (this.downedButton.state === p.states.DOWN && (this.downedButton.click(), this.dispatch(E.events.CLICK, {
                button: this.downedButton
            })), this.downedButton.up(), this.dispatch(E.events.UP, {
                button: this.downedButton
            }), this.downedButton = null)
        },
        getButtonFromCoords: function(a,
            b) {
            var c;
            for (c = this.buttons.length - 1; 0 <= c && !this.downedButton; c -= 1)
                if (this.buttons[c].isGloballyVisible() && this.buttons[c].contains(a, b)) return this.buttons[c];
            return null
        }
    });
    l.platforms = {
        DESKTOP: 1,
        MOBILE: 2,
        TABLET: 4
    };
    l.prototype = {
        init: function() {
            this.enabled && (this.initted = !0)
        },
        start: function() {
            this.enabled && (this.started = !0)
        },
        rotate: function() {},
        show: function() {},
        hide: function() {},
        showContainer: function() {},
        hideContainer: function() {},
        shouldShow: function() {
            return this.initted && this.enabled ? this.shouldShowFunction() : !1
        }
    };
    w.slotsToDefine = [];
    w.googletagInit = function() {
        g.googletag = g.googletag || {};
        g.googletag.cmd = g.googletag.cmd || [];
        googletag.cmd.push(function() {
            var a, b, c = v.getCurrentPlatform();
            for (a = 0; a < w.slotsToDefine.length; a += 1)(b = w.slotsToDefine[a]) && 0 < (b.platforms & c) && b.enabled && b.unitName && b.size && b.divId && (b.adSlot = googletag.defineSlot(b.unitName, b.size, b.divId).addService(googletag.pubads()), b.init());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices()
        })
    };
    w.prototype = c.inherit(new l, {
        start: function() {
            this.initted && !this.started && this.canRun() && (l.prototype.start.call(this), googletag.cmd.push(c.bindFnc(this, function() {
                googletag.display(this.divId)
            })))
        },
        rotate: function() {
            if (this.initted && this.canRun()) {
                var a = !1;
                this.started || (this.start(), a = !0);
                a || googletag.cmd.push(c.bindFnc(this, function() {
                    googletag.pubads().refresh([this.adSlot])
                }))
            }
        },
        show: function() {
            this.initted && this.canRun() && c.addClass(r.get(this.divId), "show")
        },
        hide: function() {
            this.initted && this.canRun() && c.removeClass(r.get(this.divId), "show")
        },
        showContainer: function() {
            this.initted &&
                this.containerDivId && r.get(this.containerDivId) && this.canRun() && c.addClass(r.get(this.containerDivId), "show")
        },
        hideContainer: function() {
            this.initted && this.containerDivId && r.get(this.containerDivId) && this.canRun() && c.removeClass(r.get(this.containerDivId), "show")
        },
        shouldShow: function() {
            return this.canRun() ? l.prototype.shouldShow.call(this) : !1
        },
        canRun: function() {
            return this.enabled && this.hasGoogleTag && this.unitName && this.size && this.divId && r.get(this.divId)
        }
    });
    v.GAMEOVERROTATEDELAY = 3E4;
    v.events = {
        INTERSTITIALREFRESHED: "interstitialrefreshed",
        INTERSTITIALSHOWN: "interstitialshown",
        INTERSTITIALHIDDEN: "interstitialhidden",
        GAMEOVERADREFRESHED: "gameoveradrefreshed",
        GAMEOVERADSHOWN: "gameoveradshown",
        GAMEOVERADHIDDEN: "gameoveradhidden"
    };
    v.getCurrentPlatform = function() {
        return c.isMobile.any() ? 768 <= (g.innerWidth || u.documentElement.clientWidth) ? l.platforms.TABLET : l.platforms.MOBILE : l.platforms.DESKTOP
    };
    v.prototype = c.inherit(new A, {
        init: function() {
            this.interstitialScreen && c.addOnClick(this.interstitialScreen, c.bindFnc(this, function(a) {
                var b = a.target;
                do a.currentTarget === b ? (this.hideInterstitial(), b = null) : b = c.hasClass(b, "dismissableArea") ? b.parentNode : null; while (b)
            }), !0);
            this.interstitialClose && c.addOnClick(this.interstitialClose, c.bindFnc(this, this.hideInterstitial), !0);
            w.googletagInit()
        },
        setGame: function(a) {
            var b;
            this.game = a;
            for (b = 0; b < this.interstitialAds.length; b += 1) this.interstitialAds[b].game = a;
            for (b = 0; b < this.gameOverAds.length; b += 1) this.gameOverAds[b].game = a
        },
        isInterstitialShowing: function() {
            return this.enabled && this.interstitialScreen ?
                c.hasClass(this.interstitialScreen, "show") : !1
        },
        refreshInterstitial: function() {
            if (this.enabled) {
                var a = this.getInterstitialAd();
                a && (a.rotate(), this.dispatch(v.events.INTERSTITIALREFRESHED, {
                    ad: a
                }))
            }
        },
        showInterstitial: function(a) {
            this.enabled && (this.interestitialHideCallback = a, c.addClass(this.interstitialScreen, "show"), this.dispatch(v.events.INTERSTITIALSHOWN, {
                ad: this.currentInterstitialAd
            }))
        },
        hideInterstitial: function() {
            this.interstitialScreen && c.removeClass(this.interstitialScreen, "show");
            this.interestitialHideCallback &&
                (this.interestitialHideCallback(), this.interestitialHideCallback = null);
            this.dispatch(v.events.INTERSTITIALHIDDEN, {
                ad: this.currentInterstitialAd
            })
        },
        shouldShowInterstitial: function() {
            if (this.enabled) {
                var a = this.getInterstitialAd();
                if (a) return a.shouldShow()
            }
            return !1
        },
        getInterstitialAd: function() {
            if (this.enabled && !this.currentInterstitialAd) {
                var a, b = v.getCurrentPlatform();
                for (a = 0; a < this.interstitialAds.length && !this.currentInterstitialAd; a += 1) this.interstitialAds[a].shouldShow() && 0 < (this.interstitialAds[a].platforms &
                    b) && (this.currentInterstitialAd = this.interstitialAds[a], this.currentInterstitialAd.show())
            }
            return this.currentInterstitialAd
        },
        isGameOverAdShowing: function() {
            return this.enabled && this.gameOverAdScreen ? c.hasClass(this.gameOverAdScreen, "show") : !1
        },
        refreshGameOverAd: function() {
            if (this.enabled) {
                var a = (new Date).getTime(),
                    b = this.getGameOverAd();
                b && a - this.lastGameOverAdRotate >= v.GAMEOVERROTATEDELAY && (b.rotate(), this.lastGameOverAdRotate = a, this.dispatch(v.events.GAMEOVERADREFRESHED, {
                    ad: b
                }))
            }
        },
        showGameOverAd: function(a) {
            this.enabled &&
                this.gameOverAdScreen && (this.gameOverHideCallback = a, c.addClass(this.gameOverAdScreen, "show"), this.dispatch(v.events.GAMEOVERADSHOWN, {
                    ad: this.currentGameOverAd
                }))
        },
        hideGameOverAd: function() {
            this.gameOverAdScreen && c.removeClass(this.gameOverAdScreen, "show");
            this.gameOverHideCallback && (this.gameOverHideCallback(), this.gameOverHideCallback = null);
            this.dispatch(v.events.GAMEOVERADHIDDEN, {
                ad: this.currentGameOverAd
            })
        },
        shouldShowGameOverAd: function() {
            if (this.enabled) {
                var a = this.getGameOverAd();
                if (a) return a.shouldShow()
            }
            return !1
        },
        getGameOverAd: function() {
            if (this.enabled && !this.currentGameOverAd) {
                var a, b = v.getCurrentPlatform();
                for (a = 0; a < this.gameOverAds.length && !this.currentGameOverAd; a += 1) this.gameOverAds[a].shouldShow() && 0 < (this.gameOverAds[a].platforms & b) && (this.currentGameOverAd = this.gameOverAds[a], this.currentGameOverAd.show())
            }
            return this.currentGameOverAd
        }
    });
    n.gravity = 2500;
    n.cruisingOscPeriod = 800;
    n.cruisingOscHeight = 10;
    n.states = {
        cruising: "cruising",
        flapping: "flapping",
        stalling: "stalling",
        flyingDead: "flyingdead",
        groundDead: "grounddead"
    };
    n.spriteSpeeds = {
        cruising: 150,
        flapping: 50,
        stalling: 0,
        flyingDead: 0,
        groundDead: 0
    };
    n.PI2 = 2 * Math.PI;
    n.prototype = c.inherit(new I, R.prototype, {
        setX: function(a) {
            this.x = a
        },
        setY: function(a) {
            this.y = a
        },
        setPosition: function(a, b) {
            this.setX(a);
            this.setY(b)
        },
        isAlive: function() {
            return this.state !== n.states.flyingDead && this.state !== n.states.groundDead
        },
        update: function(a, b, c, d) {
            a = 0;
            switch (this.state) {
                case n.states.cruising:
                    a = Math.floor(c / n.spriteSpeeds.cruising) % this.imgs.length;
                    break;
                case n.states.flapping:
                    a = Math.floor(c /
                        n.spriteSpeeds.flapping) % this.imgs.length;
                    break;
                case n.states.stalling:
                case n.states.flyingDead:
                case n.states.groundDead:
                    a = this.stallingIndex
            }
            this.previousIndex !== a && (this.image = this.imgs[a], this.previousIndex = a);
            this.started ? (this.state !== n.states.groundDead && (this.speedY += n.gravity * b, this.x += this.speedX * b, this.y += this.speedY * b, 0 > this.y && (this.y = 0), this.rect.setPosition(this.x - this.rectWidth / 2, this.y - this.rectHeight / 2)), 200 <= this.speedY ? (this.angle += 4 * Math.PI / 3 * b, this.isAlive() && (this.state = n.states.stalling),
                this.angle > Math.PI / 2 && (this.angle = Math.PI / 2)) : 200 > this.speedY && (this.angle -= 3 * Math.PI * b, this.isAlive() && (this.state = n.states.flapping), this.angle < -Math.PI / 8 && (this.angle = -Math.PI / 8))) : this.state === n.states.cruising && (this.y = this.startY + Math.sin(c % n.cruisingOscPeriod * n.PI2 / n.cruisingOscPeriod) * n.cruisingOscHeight)
        },
        flap: function() {
            this.speedY = -700
        }
    });
    ca.prototype = c.inherit(new y, R.prototype, {
        update: function(a, b, c, d) {
            this.x += -d.scrollSpeed * b;
            this.rect.setX(this.x);
            this.gapRect.setX(this.x);
            this.pipeTiteRect.setX(this.x);
            this.pipeMiteRect.setX(this.x);
            0 > this.rect.right && (this.needsToBeDestroyed = !0)
        },
        passes: function(a) {
            return this.gapRect.containsPoint(a.getCenterX(), a.getCenterY())
        },
        collides: function(a) {
            return this.pipeTiteRect.intersectsRect(a) || this.pipeMiteRect.intersectsRect(a)
        },
        draw: function(a) {
            y.prototype.draw.call(this, a)
        }
    });
    d.BASEWIDTH = 640;
    d.BASEHEIGHT = 940;
    d.BESTSCORECOOKIE = "fl_hs";
    d.BESTSCORECOOKIETTL = 31536E4;
    d.SOUNDSETTINGCOOKIE = "fl_s";
    d.SOUNDSETTINGCOOKIETTL = 31536E4;
    d.FIXEDDTM = 1E3 / 60;
    d.FIXEDDTS = d.FIXEDDTM /
        1E3;
    d.MAXCYCLES = 5;
    d.MINFRAMEDELAY = 1E3 / 60;
    d.MAXFRAMEDELAY = 200;
    d.KIKSHAREIDHEXLENGTH = 20;
    d.scrollSpeed = 250;
    d.pipeGap = 200;
    d.pipeSpacing = 350;
    d.pipeWidth = 112;
    d.pipesticleHeight = 892;
    d.pipeTopLimit = 100;
    d.pipeBottomLimit = 791;
    d.GLOBALFONT = "25px Arial";
    d.IMGS = {
        dayBg: "imgs/BG_day.png",
        nightBg: "imgs/BG_night.png",
        ground: "imgs/ground.png",
        flappyYellow: "imgs/Flappy_yellow.png",
        flappyYellow2: "imgs/Flappy_yellow2.png",
        flappyYellow3: "imgs/Flappy_yellow3.png",
        flappyBlue: "imgs/Flappy_blue.png",
        flappyBlue2: "imgs/Flappy_blue2.png",
        flappyBlue3: "imgs/Flappy_blue3.png",
        flappyRed: "imgs/Flappy_red.png",
        flappyRed2: "imgs/Flappy_red2.png",
        flappyRed3: "imgs/Flappy_red3.png",
        sprites: "imgs/sprites.png",
        kikButton: "imgs/Flappy_kikbutton4.png"
    };
    d.SOUNDS = {
        menu: "sounds/s_menu.wav",
        point: "sounds/s_point.wav",
        crash: "sounds/s_crash.wav",
        fall: "sounds/s_fall.wav",
        fly: "sounds/s_flap.wav"
    };
    d.states = {
        none: "none",
        loading: "loading",
        mainMenu: "mainmenu",
        instructions: "instructions",
        playing: "playing",
        showingBoard: "showingboard",
        showingInterstitial: "showinginterstitial",
        end: "end"
    };
    d.events = {
        stateChanged: "statechanged",
        initted: "initted"
    };
    d.SPRITEMAP = {
        logo: {
            rect: new h({
                x: 0,
                y: 0,
                width: 535,
                height: 125
            })
        },
        play: {
            rect: new h({
                x: 0,
                y: 135,
                width: 260,
                height: 145
            })
        },
        kik: {
            rect: new h({
                x: 270,
                y: 135,
                width: 260,
                height: 145
            })
        },
        getReady: {
            rect: new h({
                x: 0,
                y: 290,
                width: 460,
                height: 125
            })
        },
        numBigs: {
            frameMap: {
                0: new h({
                    x: 0,
                    y: 425,
                    width: 60,
                    height: 90
                }),
                1: new h({
                    x: 80,
                    y: 425,
                    width: 40,
                    height: 90
                }),
                2: new h({
                    x: 140,
                    y: 425,
                    width: 60,
                    height: 90
                }),
                3: new h({
                    x: 210,
                    y: 425,
                    width: 60,
                    height: 90
                }),
                4: new h({
                    x: 280,
                    y: 425,
                    width: 60,
                    height: 90
                }),
                5: new h({
                    x: 350,
                    y: 425,
                    width: 60,
                    height: 90
                }),
                6: new h({
                    x: 420,
                    y: 425,
                    width: 60,
                    height: 90
                }),
                7: new h({
                    x: 490,
                    y: 425,
                    width: 60,
                    height: 90
                }),
                8: new h({
                    x: 560,
                    y: 425,
                    width: 60,
                    height: 90
                }),
                9: new h({
                    x: 630,
                    y: 425,
                    width: 60,
                    height: 90
                })
            }
        },
        instructions: {
            rect: new h({
                x: 545,
                y: 0,
                width: 335,
                height: 145
            })
        },
        instructionsClick: {
            rect: new h({
                x: 545,
                y: 145,
                width: 335,
                height: 105
            })
        },
        instructionsTap: {
            rect: new h({
                x: 545,
                y: 250,
                width: 335,
                height: 105
            })
        },
        pipeSection: new h({
            x: 925,
            y: 0,
            width: 130,
            height: 635
        }),
        pipeTop: new h({
            x: 1065,
            y: 0,
            width: 130,
            height: 65
        }),
        pipeBottom: new h({
            x: 925,
            y: 635,
            width: 130,
            height: 65
        }),
        pipeFullTop: {
            rect: new h({
                x: 925,
                y: 0,
                width: 130,
                height: 700
            })
        },
        pipeFullBottom: {
            rect: new h({
                x: 1065,
                y: 0,
                width: 130,
                height: 700
            })
        },
        tweetButton: {
            rect: new h({
                x: 700,
                y: 425,
                width: 215,
                height: 90
            })
        },
        fbButton: {
            rect: new h({
                x: 700,
                y: 525,
                width: 215,
                height: 90
            })
        },
        gameOver: {
            rect: new h({
                x: 0,
                y: 525,
                width: 480,
                height: 105
            })
        },
        gameOverBoard: {
            rect: new h({
                x: 0,
                y: 640,
                width: 565,
                height: 285
            })
        },
        gameOverNew: {
            rect: new h({
                x: 575,
                y: 640,
                width: 80,
                height: 35
            })
        },
        numSmalls: {
            frameMap: {
                0: new h({
                    x: 575,
                    y: 715,
                    width: 35,
                    height: 50
                }),
                1: new h({
                    x: 625,
                    y: 715,
                    width: 25,
                    height: 50
                }),
                2: new h({
                    x: 665,
                    y: 715,
                    width: 35,
                    height: 50
                }),
                3: new h({
                    x: 710,
                    y: 715,
                    width: 35,
                    height: 50
                }),
                4: new h({
                    x: 755,
                    y: 715,
                    width: 35,
                    height: 50
                }),
                5: new h({
                    x: 800,
                    y: 715,
                    width: 35,
                    height: 50
                }),
                6: new h({
                    x: 845,
                    y: 715,
                    width: 35,
                    height: 50
                }),
                7: new h({
                    x: 890,
                    y: 715,
                    width: 35,
                    height: 50
                }),
                8: new h({
                    x: 935,
                    y: 715,
                    width: 35,
                    height: 50
                }),
                9: new h({
                    x: 980,
                    y: 715,
                    width: 35,
                    height: 50
                })
            }
        },
        medals: {
            frameMap: {
                bronze: new h({
                    x: 575,
                    y: 775,
                    width: 110,
                    height: 110
                }),
                silver: new h({
                    x: 695,
                    y: 775,
                    width: 110,
                    height: 110
                }),
                gold: new h({
                    x: 815,
                    y: 775,
                    width: 110,
                    height: 110
                })
            }
        },
        soundIcons: {
            frameMap: {
                on: new h({
                    x: 935,
                    y: 780,
                    width: 100,
                    height: 100
                }),
                off: new h({
                    x: 1045,
                    y: 780,
                    width: 100,
                    height: 100
                })
            }
        }
    };
    d.prototype = c.inherit(new A, {
        init: function() {
            var a = r.get("initScreen");
            a && c.removeClass(a, "show");
            this.imgManager.addEventListener(D.events.imageLoad, c.bindFnc(this, this.imageLoaded));
            this.imgManager.addEventListener(D.events.allImagesLoad, c.bindFnc(this, this.allImagesLoaded));
            this.soundManager.addEventListener(J.events.soundLoad,
                c.bindFnc(this, this.soundLoaded));
            this.soundManager.addEventListener(J.events.allSoundsLoad, c.bindFnc(this, this.allSoundsLoaded));
            this.mouseManager.addEventListener(t.events.DOWN, c.bindFnc(this.buttonManager, this.buttonManager.onDown));
            this.mouseManager.addEventListener(t.events.MOVE, c.bindFnc(this.buttonManager, this.buttonManager.onMove));
            this.mouseManager.addEventListener(t.events.UP, c.bindFnc(this.buttonManager, this.buttonManager.onUp));
            this.mouseManager.addEventListener(t.events.DOWN, c.bindFnc(this,
                this.mouseDown));
            this.keyboardManager.addEventListener(F.events.DOWN, c.bindFnc(this, this.keyDown));
            this.appCacheManager.addEventListener(z.events.LOADNORMALLY, c.bindFnc(this, function(a) {
                this.imgManager.startLoading();
                this.soundManager.startLoading()
            }));
            this.appCacheManager.addEventListener(z.events.CHECKING, c.bindFnc(this, this.appCacheChecking));
            this.appCacheManager.addEventListener(z.events.UPDATEPROGRESS, c.bindFnc(this, this.appCacheUpdateProgress));
            this.appCacheManager.addEventListener(z.events.UPDATEREADY,
                c.bindFnc(this, this.appCacheUpdateReady));
            c.makeUnselectable(r.get("mainCon"), !0);
            g.addEventListener("resize", c.bindFnc(this, this.windowResize));
            g.cards && g.cards.kik && (this.kikEnabled = !0);
            this.kikEnabled && (g.kik && g.kik.metrics && g.kik.metrics.enableGoogleAnalytics && kik.metrics.enableGoogleAnalytics(), g.kik && g.kik.browser && g.kik.browser.on && (g.kik.browser.on("background", c.bindFnc(this, function() {
                    this.stopLoop()
                })), g.kik.browser.on("foreground", c.bindFnc(this, function() {
                    this.restartLoop()
                }))), g.kik &&
                g.kik.message && (g.kik.message.shareId ? (this.kikShareIdCreated = !1, this.kikShareId = g.kik.message.shareId) : (this.kikShareId = this.generateKikShareId(), this.kikShareIdCreated = !0)), this.kikShareId || (this.kikShareId = this.generateKikShareId(), this.kikShareIdCreated = !0));
            this.bindedResizeCanvas = c.bindFnc(this, this.resizeCanvas);
            K(this.bindedResizeCanvas, 100);
            this.resizeCanvas();
            this.state = d.states.loading;
            this.appCacheManager.init();
            this.preStart();
            this.dispatch(d.events.initted)
        },
        setupDebug: function() {
            this.debugStuff.output =
                r.create("div", "debugOutput", "debugOutput");
            this.debugStuff.output.style.position = "absolute";
            this.debugStuff.output.style.top = "0";
            this.debugStuff.output.style.left = "0";
            this.debugStuff.output.style.backgroundColor = "rgba(255, 255, 255, 0.8)";
            this.debugStuff.output.style.color = "#000000";
            this.debugStuff.output.style.padding = "3px";
            this.debugStuff.output.style.zIndex = Math.pow(2, 32) - 1;
            r.get("mainCon").appendChild(this.debugStuff.output);
            this.debugStuff.frameCounter = r.create("div", "frameCounter", "frameCounter");
            this.debugStuff.frameCounter.style.position = "absolute";
            this.debugStuff.frameCounter.style.bottom = "0";
            this.debugStuff.frameCounter.style.left = "0";
            this.debugStuff.frameCounter.style.backgroundColor = "rgba(255, 255, 255, 0.8)";
            this.debugStuff.frameCounter.style.color = "#000000";
            this.debugStuff.frameCounter.style.padding = "3px";
            this.debugStuff.frameCounter.style.zIndex = Math.pow(2, 32) - 1;
            r.get("mainCon").appendChild(this.debugStuff.frameCounter)
        },
        changeToState: function(a, b) {
            if (!this.changingState || b) switch (a) {
                case d.states.mainMenu:
                    this.changingState = !0;
                    this.doFadeTransition(c.bindFnc(this, function() {
                        this.changingState = !1;
                        this.state = a;
                        this.start();
                        this.mainMenu.visible = !0;
                        this.soundButton.visible = !0;
                        this.soundButton.enabled = !0;
                        this.dispatch(d.events.stateChanged, {
                            state: a
                        })
                    }));
                    break;
                case d.states.instructions:
                    this.changingState = !0;
                    this.soundManager.play(d.SOUNDS.menu);
                    this.doFadeTransition(c.bindFnc(this, function() {
                        this.adManager.isGameOverAdShowing() && this.adManager.hideGameOverAd();
                        this.changingState = !1;
                        this.mainMenu.visible = !1;
                        this.gameOverButtons.visible = !1;
                        this.gameOverButtons.opacity = 0;
                        this.gameOverText.opacity = 0;
                        this.gameOverBoard.opacity = 0;
                        this.gameOverVersion.opacity = 0;
                        this.instructionsContainer.visible = !0;
                        this.instructionsContainer.opacity = 1;
                        this.soundButton.visible = !1;
                        this.soundButton.enabled = !1;
                        this.state = a;
                        this.beginGame();
                        this.dispatch(d.events.stateChanged, {
                            state: a
                        })
                    }));
                    break;
                case d.states.playing:
                    this.animManager.startAnim(new k({
                        duration: 500,
                        startValue: 1,
                        endValue: 0,
                        stepCallback: c.bindFnc(this, function(a) {
                            this.instructionsContainer.opacity =
                                a
                        }),
                        endCallback: c.bindFnc(this, function() {
                            this.instructionsContainer.visible = !1
                        })
                    }));
                    this.state = a;
                    this.dispatch(d.events.stateChanged, {
                        state: a
                    });
                    break;
                case d.states.showingBoard:
                    this.changingState = !0;
                    this.doFlashTransition(c.bindFnc(this, function() {
                        this.changingState = !1;
                        this.state = a;
                        this.dispatch(d.events.stateChanged, {
                            state: a
                        });
                        this.endGame()
                    }));
                    break;
                default:
                    this.state = a, this.dispatch(d.events.stateChanged, {
                        state: a
                    })
            }
        },
        setTransitionOpacity: function(a) {
            this.transitionOverlay.opacity = a
        },
        setTransitionFillStyle: function(a) {
            this.transitionOverlay.fillStyle =
                a
        },
        doFadeTransition: function(a) {
            a = new W({
                anims: [new k({
                    startValue: 0,
                    endValue: 1,
                    duration: 500,
                    startCallback: c.bindFnc(this, function() {
                        this.setTransitionFillStyle("#000000")
                    }),
                    endCallback: a,
                    stepCallback: c.bindFnc(this, this.setTransitionOpacity)
                }), new k({
                    startValue: 1,
                    endValue: 0,
                    duration: 500,
                    stepCallback: c.bindFnc(this, this.setTransitionOpacity)
                })]
            });
            this.animManager.startAnim(a)
        },
        doFlashTransition: function(a) {
            var b = new k({
                startValue: 1,
                endValue: 0,
                duration: 500,
                startCallback: c.bindFnc(this, function() {
                    a &&
                        a();
                    this.setTransitionFillStyle("#ffffff")
                }),
                stepCallback: c.bindFnc(this, this.setTransitionOpacity)
            });
            this.animManager.startAnim(b)
        },
        trace: function() {
            var a = "",
                a = Array.prototype.slice.call(arguments),
                b = g.console || {
                    log: function() {}
                }, a = a.join(" ");
            this.debugStuff.output && (this.debugStuff.output.innerHTML = a);
            b.log(a)
        },
        windowResize: function(a) {
            this.bindedResizeCanvas();
            K(this.bindedResizeCanvas, 100)
        },
        resizeCanvas: function() {
            var a = r.get("mainCon"),
                b = r.get("limitCon"),
                c = r.get("canvasCon"),
                f = g.getComputedStyle(a),
                a = parseInt(f.width, 10),
                f = parseInt(f.height, 10);
            a / f >= this.aspectRatio ? (c.style.height = f + "px", c.style.width = Math.floor(f * this.aspectRatio) + "px", this.canvas.height = this.startingHeight, this.mouseManager.scaleX = this.mouseManager.scaleY = d.BASEWIDTH / Math.floor(f * this.aspectRatio)) : (this.canvas.height = this.canvas.width / (a / f), this.transitionOverlay.bottom = this.canvas.height / this.scaleY, c.style.width = a + "px", c.style.height = f + "px", this.mouseManager.scaleX = this.mouseManager.scaleY = d.BASEWIDTH / a);
            b.style.width =
                c.style.width;
            b.style.height = f + "px";
            this.context.font = d.GLOBALFONT
        },
        keyDown: function(a) {
            if (a && a.data) switch (a.data.keyCode) {
                case 27:
                    try {
                        g.top !== g && "/desktop.html" === g.top.location.pathname && g.top.unfullscreen && g.top.unfullscreen()
                    } catch (b) {}
                    break;
                case 32:
                case 65:
                case 87:
                case 38:
                    this.defaultKeyPressBehavior(a.data.originalEvent)
            }
        },
        defaultKeyPressBehavior: function(a) {
            if (!this.changingState) switch (this.state) {
                case d.states.mainMenu:
                    this.changeToState(d.states.instructions);
                    break;
                case d.states.instructions:
                case d.states.playing:
                    this.birdFlap(a);
                    break;
                case d.states.end:
                    this.changeToState(d.states.instructions)
            }
        },
        mouseDown: function(a) {
            this.birdFlap(a.data.originalEvent)
        },
        imageLoaded: function(a) {
            this.checkLoaded()
        },
        allImagesLoaded: function(a) {
            this.checkLoaded()
        },
        soundLoaded: function(a) {
            this.checkLoaded()
        },
        allSoundsLoaded: function(a) {
            this.checkLoaded()
        },
        appCacheChecking: function(a) {
            this.updateNoPercent("Checking...")
        },
        appCacheUpdateProgress: function(a) {
            a.data.lengthComputable ? a.data.loaded >= a.data.total ? this.updatePercentLoaded(a.data.loaded,
                a.data.total, "Refreshing:") : this.updatePercentLoaded(a.data.loaded, a.data.total, "Updating:") : this.updateNoPercent("Updating...")
        },
        appCacheUpdateReady: function(a) {
            this.updateNoPercent("Refreshing...", 1)
        },
        checkLoaded: function() {
            var a = this.imgManager.imgLoaded,
                b = this.imgManager.imgCount;
            this.updatePercentLoaded(a, b, "Loading:");
            !this.allLoaded && a >= b && (this.allLoaded = !0, this.changeToState(d.states.mainMenu))
        },
        updatePercentLoaded: function(a, b, c) {
            a /= b;
            b = 100 * a;
            this.progressText.text = c ? c + " " + Math.floor(b) +
                "%" : Math.floor(b) + "%";
            this.progressBar.right = d.BASEWIDTH * a
        },
        updateNoPercent: function(a, b) {
            this.progressText.text = a;
            this.progressBar.right = b ? b * d.BASEWIDTH : 0
        },
        getRandomBirdColor: function() {
            var a = Math.floor(Math.random() * this.flappySprites.length);
            return this.flappySprites[a]
        },
        stopLoop: function() {
            this.looping = !1;
            g.cancelAnimationFrame(this.animationFrameId)
        },
        startLoop: function() {
            this.looping = !0;
            this.animationFrameId = g.requestAnimationFrame(this.bindedMainLoop)
        },
        restartLoop: function() {
            this.stopLoop();
            this.startLoop()
        },
        preStart: function() {
            this.startLoop()
        },
        start: function() {
            if (!this.started) {
                this.started = !0;
                var a = this.imgManager.get(d.IMGS.ground);
                r.get("canvasCon");
                Math.random();
                var b;
                this.spriteSheet = new U({
                    image: this.imgManager.get(d.IMGS.sprites),
                    context: this.context,
                    spriteMap: d.SPRITEMAP
                });
                this.patterns[d.IMGS.ground] = this.context.createPattern(a, "repeat");
                this.flappySprites = [{
                    base: this.imgManager.get(d.IMGS.flappyYellow),
                    sequence: [this.imgManager.get(d.IMGS.flappyYellow2), this.imgManager.get(d.IMGS.flappyYellow),
                        this.imgManager.get(d.IMGS.flappyYellow3), this.imgManager.get(d.IMGS.flappyYellow)
                    ]
                }, {
                    base: this.imgManager.get(d.IMGS.flappyBlue2),
                    sequence: [this.imgManager.get(d.IMGS.flappyBlue3), this.imgManager.get(d.IMGS.flappyBlue2), this.imgManager.get(d.IMGS.flappyBlue), this.imgManager.get(d.IMGS.flappyBlue2)]
                }, {
                    base: this.imgManager.get(d.IMGS.flappyRed),
                    sequence: [this.imgManager.get(d.IMGS.flappyRed2), this.imgManager.get(d.IMGS.flappyRed), this.imgManager.get(d.IMGS.flappyRed3), this.imgManager.get(d.IMGS.flappyRed)]
                }];
                this.background = new I({
                    img: this.imgManager.get(d.IMGS.dayBg),
                    x: 0,
                    y: 0,
                    width: 640,
                    height: 892
                });
                this.stage.addChild(this.background);
                this.pipes = [];
                this.pipesContainer = new y({
                    x: 0,
                    y: 0
                });
                this.stage.addChild(this.pipesContainer);
                b = this.getRandomBirdColor();
                this.bird = new n({
                    x: d.BASEWIDTH / 2,
                    y: d.BASEHEIGHT / 2,
                    anchorX: 38,
                    anchorY: 27,
                    width: 76,
                    height: 53,
                    rectWidth: 53,
                    rectHeight: 53,
                    img: b.base,
                    birdImages: b.sequence,
                    stallingIndex: 1
                });
                this.stage.addChild(this.bird);
                this.ground = new aa({
                    pattern: this.patterns[d.IMGS.ground],
                    x: 0,
                    y: 892,
                    width: 640,
                    height: 50,
                    imageWidth: a.width,
                    imageHeight: a.height
                });
                this.ground.rect = new h({
                    x: this.ground.x,
                    y: this.ground.y,
                    width: this.ground.width,
                    height: this.ground.height
                });
                this.stage.addChild(this.ground);
                this.soundButton = new p(c.inherit(c.cloneObject(this.spriteSheet.getSprite("soundIcons").options), {
                    id: "soundButton",
                    x: d.BASEWIDTH - 85,
                    y: 25,
                    width: 60,
                    height: 60,
                    startFrameId: "1" === C.getCookie(d.SOUNDSETTINGCOOKIE, "1") ? "on" : "off",
                    clickFunction: c.bindFnc(this, function(a) {
                        this.soundManager.mute = !this.soundManager.mute;
                        this.soundManager.mute ? (this.soundButton.setFrameId("off"), C.setCookie(d.SOUNDSETTINGCOOKIE, "0", d.SOUNDSETTINGCOOKIETTL)) : (this.soundButton.setFrameId("on"), C.setCookie(d.SOUNDSETTINGCOOKIE, "1", d.SOUNDSETTINGCOOKIETTL), this.soundManager.play(d.SOUNDS.fly))
                    }),
                    visible: !0,
                    enabled: !0
                }));
                this.buttonManager.addButton(this.soundButton);
                this.stage.addChild(this.soundButton);
                this.mainMenu = new y({
                    x: d.BASEWIDTH / 2,
                    y: d.BASEHEIGHT / 2,
                    visible: !0
                });
                this.stage.addChild(this.mainMenu);
                this.mainMenuLogo =
                    this.spriteSheet.getSprite("logo");
                this.mainMenuLogo.x = -160;
                this.mainMenuLogo.y = -170;
                this.mainMenuLogo.width = 320;
                this.mainMenuLogo.height = 76;
                this.mainMenu.addChild(this.mainMenuLogo);
                this.mainMenuPlayButton = new p(c.inherit(c.cloneObject(this.spriteSheet.getSprite("play").options), {
                    id: "mainMenuPlayButton",
                    x: -128,
                    y: 107,
                    width: 256,
                    height: 143,
                    clickFunction: c.bindFnc(this, this.playButtonPressed)
                }));
                this.buttonManager.addButton(this.mainMenuPlayButton);
                this.mainMenu.addChild(this.mainMenuPlayButton);
                this.mainMenuVersion =
                    new M({
                        x: d.BASEWIDTH / 2,
                        y: 420,
                        textAlign: "right",
                        textBaseline: "bottom",
                        text: "v" + g.FLAPPYLIVESVERSION
                    });
                this.mainMenu.addChild(this.mainMenuVersion);
                this.instructionsContainer = new y({
                    x: d.BASEWIDTH / 2,
                    y: 290,
                    visible: !1,
                    opacity: 0
                });
                this.stage.addChild(this.instructionsContainer);
                this.getReadyText = this.spriteSheet.getSprite("getReady");
                this.getReadyText.x = -256;
                this.getReadyText.y = 0;
                this.getReadyText.width = 512;
                this.getReadyText.height = 138;
                this.instructionsContainer.addChild(this.getReadyText);
                this.instructionsBird =
                    this.spriteSheet.getSprite("instructions");
                this.instructionsBird.x = -140;
                this.instructionsBird.y = 161;
                this.instructionsBird.width = 290;
                this.instructionsBird.height = 130;
                this.instructionsContainer.addChild(this.instructionsBird);
                this.instructionsBottom = this.spriteSheet.getSprite(c.isMobile.any() ? "instructionsTap" : "instructionsClick");
                this.instructionsBottom.x = -145;
                this.instructionsBottom.y = 275;
                this.instructionsBottom.width = 290;
                this.instructionsBottom.height = 91;
                this.instructionsContainer.addChild(this.instructionsBottom);
                this.scoreboard = new V({
                    x: d.BASEWIDTH / 2,
                    y: 180,
                    horizontalAlign: "center",
                    verticalAlign: "middle",
                    number: 0,
                    numberSprite: this.spriteSheet.getSprite("numBigs"),
                    numberSpacing: -5
                });
                this.scoreboard.visible = !1;
                this.stage.addChild(this.scoreboard);
                this.gameOverText = this.spriteSheet.getSprite("gameOver");
                this.gameOverText.width = 512;
                this.gameOverText.height = 112;
                this.gameOverText.x = d.BASEWIDTH / 2 - this.gameOverText.width / 2;
                this.gameOverText.y = 110;
                this.gameOverText.opacity = 0;
                this.stage.addChild(this.gameOverText);
                this.gameOverBoard = new ba({
                    x: d.BASEWIDTH / 2,
                    y: 260,
                    width: 576,
                    height: 291,
                    numberSprite: this.spriteSheet.getSprite("numSmalls"),
                    medalsSprite: this.spriteSheet.getSprite("medals"),
                    boardSprite: this.spriteSheet.getSprite("gameOverBoard"),
                    newLabelSprite: this.spriteSheet.getSprite("gameOverNew"),
                    opacity: 0,
                    bestScore: this.bestScore
                });
                this.gameOverBoard.anchorX = this.gameOverBoard.width / 2;
                this.stage.addChild(this.gameOverBoard);
                this.gameOverButtons = new y({
                    x: d.BASEWIDTH / 2,
                    y: 587,
                    visible: !1,
                    opacity: 0
                });
                this.stage.addChild(this.gameOverButtons);
                this.gameOverPlayButton = new p(c.inherit(c.cloneObject(this.spriteSheet.getSprite("play").options), {
                    id: "gameOverPlayButton",
                    x: this.kikEnabled ? -261 : -128,
                    y: 0,
                    width: 256,
                    height: 143,
                    clickFunction: c.bindFnc(this, this.playButtonPressed)
                }));
                this.buttonManager.addButton(this.gameOverPlayButton);
                this.gameOverButtons.addChild(this.gameOverPlayButton);
                this.gameOverVersion = new M({
                    x: d.BASEWIDTH,
                    y: 890,
                    textAlign: "right",
                    textBaseline: "bottom",
                    text: "v" + g.FLAPPYLIVESVERSION,
                    opacity: 0
                });
                this.stage.addChild(this.gameOverVersion);
                this.kikEnabled && (this.gameOverKikButton = new p({
                    image: this.imgManager.get(d.IMGS.kikButton),
                    id: "kikButton",
                    x: 5,
                    y: 0,
                    width: 256,
                    height: 143,
                    clickFunction: c.bindFnc(this, this.sendKik)
                }), this.buttonManager.addButton(this.gameOverKikButton), this.gameOverButtons.addChild(this.gameOverKikButton));
                this.updateContext.scrollSpeed = d.scrollSpeed;
                this.loadingStage.visible = !1;
                this.logicLooping = this.stage.visible = !0
            }
        },
        playButtonPressed: function(a) {
            this.state !== d.states.mainMenu && this.state !== d.states.end || this.changeToState(d.states.instructions)
        },
        beginGame: function(a) {
            r.get("canvasCon");
            a = 0.5 < Math.random() ? this.imgManager.get(d.IMGS.dayBg) : this.imgManager.get(d.IMGS.nightBg);
            var b = this.getRandomBirdColor();
            this.numPlays += 1;
            this.score = 0;
            this.scoreboard.setNumber(this.score);
            this.scoreboard.visible = !0;
            this.pipes = [];
            this.pipesContainer.removeAllChilds();
            this.background.image = a;
            this.ignoreMouseDown = !1;
            this.firstTap = !0;
            this.bird.image = b.base;
            this.bird.imgs = b.sequence;
            this.bird.started = !1;
            this.bird.startY = 500;
            this.bird.setPosition(200, 500);
            this.bird.angle = 0;
            this.bird.state = n.states.cruising;
            this.updateContext.scrollSpeed = d.scrollSpeed
        },
        mainLoop: function(a) {
            this.looping ? this.animationFrameId = g.requestAnimationFrame(this.bindedMainLoop) : g.cancelAnimationFrame(this.animationFrameId);
            var b = a - this.lastMainLoopTime,
                c, f;
            b < d.MINFRAMEDELAY && (b = d.MINFRAMEDELAY);
            b > d.MAXFRAMEDELAY && (b = d.MAXFRAMEDELAY);
            c = b / 1E3;
            if (this.logicLooping)
                for (this.fixedAccumulator += b, f = 0; this.fixedAccumulator >= d.FIXEDDTM && f < d.MAXCYCLES; f += 1) this.updateLoop(d.FIXEDDTM, d.FIXEDDTS, a), this.fixedAccumulator -= d.FIXEDDTM;
            this.animManager.update(b, c, a);
            this.renderLoop(b, c, a);
            this.debug && 1E3 <= a - this.debugStuff.lastFrameCaptureTime && (this.debugStuff.frameCounter.innerHTML = "FPS-count: " + Math.round((this.frameCount - this.debugStuff.lastFrameCapture) / ((a - this.debugStuff.lastFrameCaptureTime) / 1E3)) +
                "<br />FPS-time: " + Math.round(1E3 / b), this.debugStuff.lastFrameCapture = this.frameCount, this.debugStuff.lastFrameCaptureTime = a);
            this.frameCount += 1;
            this.lastMainLoopTime = a
        },
        updateLoop: function(a, b, c) {
            this.pipeDistance += b * this.updateContext.scrollSpeed;
            if (!this.firstTap && this.bird.isAlive() && this.pipeDistance >= d.pipeSpacing) {
                var f = this.pipeDistance - d.pipeSpacing,
                    g = this.createRandomPipes(f);
                this.pipes.push(g);
                this.pipesContainer.addChild(g);
                this.pipeDistance = f
            }
            this.bird.update(a, b, c, this.updateContext);
            if (!this.firstTap)
                for (i = 0; i < this.pipes.length; i += 1) this.pipes[i].needsToBeDestroyed ? (this.pipesContainer.removeChild(this.pipes[i]), this.pipes.splice(i, 1), i -= 1) : (this.pipes[i].update(a, b, c, this.updateContext), this.bird.isAlive() && this.pipes[i].collides(this.bird.rect) && (this.bird.state = n.states.flyingDead, this.soundManager.play(d.SOUNDS.crash), this.soundManager.play(d.SOUNDS.fall)), this.bird.isAlive() && !this.pipes[i].passed && this.pipes[i].passes(this.bird.rect) && (this.pipes[i].passed = !0, this.score +=
                    1, this.scoreboard.setNumber(this.score), this.soundManager.play(d.SOUNDS.point)));
            !this.firstTap && this.bird.state !== n.states.groundDead && this.bird.rect.bottom > this.ground.rect.top && (this.bird.y = this.ground.rect.top - 26, this.bird.isAlive() && this.soundManager.play(d.SOUNDS.crash), this.bird.state = n.states.groundDead);
            this.bird.isAlive() || (this.updateContext.scrollSpeed = 0, this.state !== d.states.showingInterstitial && this.state !== d.states.end && this.state !== d.states.showingBoard && this.changeToState(d.states.showingBoard));
            this.ground.offsetX -= b * this.updateContext.scrollSpeed
        },
        renderLoop: function(a, b, c) {
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.context.save();
            this.context.fillStyle = "#ded895";
            this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
            this.context.restore();
            this.loadingStage.draw(this.context);
            this.stage.draw(this.context);
            this.transitionOverlay.draw(this.context);
            if (this.debug) {
                if (this.pipes)
                    for (a = 0; a < this.pipes.length; a += 1) this.debugDrawRects(this.pipes[a].gapRect, "#0000ff"),
                this.debugDrawRects(this.pipes[a].pipeTiteRect, "#ff0000"), this.debugDrawRects(this.pipes[a].pipeMiteRect, "#ff0000");
                this.bird && this.debugDrawRects(this.bird.rect, "#000000");
                this.ground && this.debugDrawRects(this.ground.rect, "#ffffff")
            }
        },
        debugDrawRects: function(a, b) {
            this.context.save();
            this.context.scale(this.scaleX, this.scaleY);
            this.context.lineWidth = 2;
            this.context.strokeStyle = b;
            this.context.strokeRect(a.left, a.top, a.getWidth(), a.getHeight());
            this.context.restore()
        },
        createRandomPipes: function(a) {
            var b =
                Math.random() * (d.pipeBottomLimit - d.pipeGap - d.pipeTopLimit) + d.pipeTopLimit,
                b = new h({
                    left: 0,
                    top: b,
                    right: d.pipeWidth,
                    bottom: b + d.pipeGap
                });
            return new ca({
                x: d.BASEWIDTH - a,
                y: 0,
                gapRect: b,
                pipeFullTopSprite: this.spriteSheet.getSprite("pipeFullTop"),
                pipeFullBottomSprite: this.spriteSheet.getSprite("pipeFullBottom"),
                pipesticleHeight: d.pipesticleHeight
            })
        },
        birdFlap: function(a) {
            if (this.state === d.states.instructions || this.state === d.states.playing) this.firstTap && (this.bird.started = !0, this.firstTap = !1, this.pipeDistance = -250, this.changeToState(d.states.playing)), this.bird.isAlive() && (this.bird.flap(), this.soundManager.play(d.SOUNDS.fly))
        },
        endGame: function() {
            var a;
            this.score > this.bestScore && (this.bestScore = this.score, C.setCookie(d.BESTSCORECOOKIE, this.bestScore.toString(), d.BESTSCORECOOKIETTL));
            a = new W({
                anims: [new k({
                    duration: 300,
                    stepCallback: c.bindFnc(this, function() {
                        this.stage.anchorX = 20 * Math.random() - 10;
                        this.stage.anchorY = 20 * Math.random() - 10
                    }),
                    endCallback: c.bindFnc(this, function() {
                        this.stage.anchorX = 0;
                        this.stage.anchorY =
                            0
                    })
                }), new k({
                    startCallback: c.bindFnc(this, function() {
                        this.adManager.shouldShowInterstitial() && this.adManager.refreshInterstitial();
                        this.adManager.shouldShowGameOverAd() && this.adManager.refreshGameOverAd()
                    }),
                    duration: 1E3
                }), new Q({
                    startCallback: c.bindFnc(this, function() {
                        this.scoreboard.visible = !1;
                        this.soundManager.play(d.SOUNDS.menu);
                        this.adManager.shouldShowInterstitial() && this.adManager.showInterstitial(c.bindFnc(this, function() {
                            this.changeToState(d.states.end)
                        }));
                        this.adManager.shouldShowGameOverAd() &&
                            this.adManager.showGameOverAd()
                    }),
                    anims: [new k({
                        startValue: 0,
                        endValue: 0.5,
                        timeFunction: k.easingFunctions.easeOutCubic,
                        stepCallback: c.bindFnc(this, function(a, c, d) {
                            this.gameOverText.opacity = a
                        }),
                        duration: 125
                    }), new k({
                        startValue: 0,
                        endValue: 20,
                        timeFunction: k.easingFunctions.easeOutCubic,
                        stepCallback: c.bindFnc(this, function(a, c, d) {
                            this.gameOverText.anchorY = a
                        }),
                        duration: 125
                    })]
                }), new Q({
                    anims: [new k({
                        startValue: 0.5,
                        endValue: 1,
                        timeFunction: k.easingFunctions.easeOutCubic,
                        stepCallback: c.bindFnc(this, function(a,
                            c, d) {
                            this.gameOverText.opacity = a
                        }),
                        duration: 125
                    }), new k({
                        startValue: 20,
                        endValue: 0,
                        timeFunction: k.easingFunctions.easeOutCubic,
                        stepCallback: c.bindFnc(this, function(a, c, d) {
                            this.gameOverText.anchorY = a
                        }),
                        duration: 125
                    })]
                }), new k({
                    duration: 750
                }), new Q({
                    startCallback: c.bindFnc(this, function() {
                        this.soundManager.play(d.SOUNDS.menu);
                        this.gameOverBoard.preAnim()
                    }),
                    anims: [new k({
                        startValue: 0,
                        endValue: 1,
                        timeFunction: k.easingFunctions.linear,
                        stepCallback: c.bindFnc(this, function(a, c, d) {
                            this.gameOverBoard.opacity =
                                a
                        }),
                        duration: 300
                    }), new k({
                        startValue: -200,
                        endValue: 0,
                        timeFunction: k.easingFunctions.easeOutCubic,
                        stepCallback: c.bindFnc(this, function(a, c, d) {
                            this.gameOverBoard.anchorY = a
                        }),
                        duration: 300
                    })]
                }), new k({
                    startValue: 0,
                    endValue: this.score,
                    duration: 10 < this.score ? 1E3 : 100 * this.score,
                    stepCallback: c.bindFnc(this.gameOverBoard, this.gameOverBoard.setScore),
                    endCallback: c.bindFnc(this.gameOverBoard, this.gameOverBoard.postAnim)
                }), new k({
                    startValue: 0,
                    endValue: 1,
                    duration: 500,
                    startCallback: c.bindFnc(this, function() {
                        this.soundButton.visible = !0;
                        this.soundButton.enabled = !0;
                        this.soundButton.opacity = 0;
                        this.gameOverButtons.visible = !0;
                        this.adManager.isInterstitialShowing() || this.changeToState(d.states.end);
                        this.mouseManager.resetSkips()
                    }),
                    stepCallback: c.bindFnc(this, function(a, c, d) {
                        this.gameOverButtons.opacity = a;
                        this.gameOverVersion.opacity = a;
                        this.soundButton.opacity = a
                    })
                })]
            });
            this.animManager.startAnim(a)
        },
        shareTwitter: function() {
            if (this.state === d.states.end) {
                var a = this.crazygames ? {
                    text: encodeURIComponent("I just scored " + this.score + " on #FlappyBird! Try to beat my score at http://m.crazygames.com/game/flappy-bird via @CrazyGamesCom")
                } : {
                    text: encodeURIComponent("I just scored " + this.score + " on #FlappyBird! Try to beat my score at http://flappylives.com. #FlappyLives")
                }, a = "https://twitter.com/intent/tweet?" + c.objectToParamString(a);
                da(a, g.cordova ? "_blank" : "shareTwitterWindow", "width=480,height=480,scrollbars=yes,location=" + (g.cordova ? "yes" : "no"))
            }
        },
        shareFB: function() {
            if (this.state === d.states.end) {
                var a = "https://" + (c.isMobile.any() ? "m" : "www") + ".facebook.com/sharer.php?",
                    b = this.crazygames ? {
                        t: encodeURIComponent("I just scored " + this.score +
                            " on #FlappyBird! Try to beat my score at http://m.crazygames.com/game/flappy-bird via @CrazyGamesCom"),
                        u: encodeURIComponent(("https:" === N.protocol ? "https:" : "http:") + "//www.flappylives.com/?crazygames=true")
                    } : {
                        t: encodeURIComponent("I just scored " + this.score + " on #FlappyBird! Try to beat my score at http://flappylives.com. #FlappyLives"),
                        u: encodeURIComponent(("https:" === N.protocol ? "https:" : "http:") + "//www.flappylives.com/")
                    }, a = a + c.objectToParamString(b);
                da(a, g.cordova ? "_blank" : "shareFacebookWindow",
                    "width=626,height=436,scrollbars=yes,location=" + (g.cordova ? "yes" : "no"))
            }
        },
        generateKikShareId: function() {
            var a = (new Date).getTime(),
                b = "",
                c = d.KIKSHAREIDHEXLENGTH,
                f;
            for (f = 0; f < c; f += 1) b += Math.floor(16 * Math.random()).toString(16);
            return a.toString(16) + ":" + b
        },
        sendKik: function() {
            g.cards && cards.kik && kik.send({
                title: "I scored " + this.score + " on Flappy Lives",
                text: "Can you beat me?",
                pic: "/imgs/Flappy-icon-96.png",
                data: {
                    score: this.score,
                    shareId: this.kikShareId
                }
            })
        }
    });
    g.init = function() {
        c.paramStringToObject(g.location.search).desktopcheck &&
            "/game.html" !== g.location.pathname && !c.isMobile.any() && (g.location.href = "/desktop.html");
        new d
    }
})(window);